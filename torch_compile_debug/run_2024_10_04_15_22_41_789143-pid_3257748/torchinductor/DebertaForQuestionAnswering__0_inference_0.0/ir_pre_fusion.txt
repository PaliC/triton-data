op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 8192}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 8192}, None),
        MemoryDep('arg1_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg2_1', c1 + 768*tmp0, {c0: 8192, c1: 768}, None),
        MemoryDep('arg3_1', c1 + 768*tmp2, {c0: 8192, c1: 768}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (8192, 768)
op0.sizes = ([16, 512], [768])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op0_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 768}
    index0 = 512*z0 + z1
    index1 = 768*indirect0 + z2
    index2 = z1
    index3 = 768*indirect1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_4, reduction)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 768
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 512
        tmp7 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (768*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
            tmp9 = tmp7 + tmp8
            tmp10 = tmp7 < 0
            tmp11 = tl.where(tmp10, tmp9, tmp7)
            tl.device_assert((0 <= tmp11) & (tmp11 < 512), "index out of bounds: 0 <= tmp11 < 512")
            tmp13 = tl.load(in_ptr3 + (r2 + (768*tmp11)), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp6 + tmp13
            tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
            tmp17 = _tmp16 + tmp15
            _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp16 = tl.sum(_tmp16, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp16, None)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8192}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 8192}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 8192}, None),
        MemoryDep('arg1_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg2_1', c1 + 768*tmp0, {c0: 8192, c1: 768}, None),
        MemoryDep('arg3_1', c1 + 768*tmp2, {c0: 8192, c1: 768}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (8192, 768)
op1.sizes = ([16, 512], [768])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 768}
    index0 = 512*z0 + z1
    index1 = 768*indirect0 + z2
    index2 = z1
    index3 = 768*indirect1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf0', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, reduction)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 768
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 512
        tmp7 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp15 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
        _tmp21 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (768*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
            tmp9 = tmp7 + tmp8
            tmp10 = tmp7 < 0
            tmp11 = tl.where(tmp10, tmp9, tmp7)
            tl.device_assert((0 <= tmp11) & (tmp11 < 512), "index out of bounds: 0 <= tmp11 < 512")
            tmp13 = tl.load(in_ptr3 + (r2 + (768*tmp11)), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp6 + tmp13
            tmp16 = 768.0
            tmp17 = tmp15 / tmp16
            tmp18 = tmp14 - tmp17
            tmp19 = tmp18 * tmp18
            tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
            tmp22 = _tmp21 + tmp20
            _tmp21 = tl.where(rmask, tmp22, _tmp21)
        tmp21 = tl.sum(_tmp21, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp21, None)


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 6291456}, None)]
op2.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 8192}, None),
        MemoryDep('buf1', c0, {c0: 8192}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 8192}, None),
        MemoryDep('arg1_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg2_1', c1 + 768*tmp1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg3_1', c1 + 768*tmp3, {c0: 8192, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg5_1', c1, {c0: 8192, c1: 768}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (6291456, 1)
op2.sizes = ([16, 512, 768], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op2_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 768}
    index0 = z2
    index1 = 512*z0 + z1
    index2 = 768*indirect0 + z2
    index3 = z1
    index4 = 768*indirect1 + z2
    index5 = 393216*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg2_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg1_1', get_index_3)
        set_indirect1 = self.set_indirect1(load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf0', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        sub = ops.sub(add, truediv)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_6, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_1 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_1)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('arg5_1', get_index_7)
        add_2 = ops.add(mul, load_7)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf2', get_index_8, add_2, None)
        return store
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*i64', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x3 = (xindex // 768)
        x1 = (xindex // 768) % 512
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr5 + (x3), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr6 + (x3), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 50265, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 50265), "index out of bounds: 0 <= tmp5 < 50265")
        tmp7 = tl.load(in_ptr2 + (x0 + (768*tmp5)), None)
        tmp9 = tl.full([XBLOCK], 512, tl.int32)
        tmp10 = tmp8 + tmp9
        tmp11 = tmp8 < 0
        tmp12 = tl.where(tmp11, tmp10, tmp8)
        tl.device_assert((0 <= tmp12) & (tmp12 < 512), "index out of bounds: 0 <= tmp12 < 512")
        tmp14 = tl.load(in_ptr4 + (x0 + (768*tmp12)), None)
        tmp15 = tmp7 + tmp14
        tmp17 = 768.0
        tmp18 = tmp16 / tmp17
        tmp19 = tmp15 - tmp18
        tmp21 = tmp20 / tmp17
        tmp22 = 1e-07
        tmp23 = tmp21 + tmp22
        tmp24 = libdevice.sqrt(tmp23)
        tmp25 = tmp19 / tmp24
        tmp26 = tmp0 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr0 + (x4), tmp28, None)


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op3.node.kernel = extern_kernels.mm


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 6291456}, None)]
op4.unmet_dependencies = [   MemoryDep('buf3', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op4.met_dependencies = [MemoryDep('arg7_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (6291456, 1)
op4.sizes = ([16, 12, 512, 64], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op4_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf4', get_index_2, mul, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 6291456}, None)]
op5.unmet_dependencies = [   MemoryDep('buf3', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (6291456, 1)
op5.sizes = ([16, 12, 64, 512], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op5_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
    ]
]
op6.node.kernel = extern_kernels.bmm


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 98304}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 50331648}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (98304, 512)
op7.sizes = ([98304], [512])
buf6_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op7_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_1, reduction)
        return store_reduction
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 98304}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 50331648}, None),
        MemoryDep('buf7', c0, {c0: 98304}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (98304, 512)
op8.sizes = ([98304], [512])
buf6_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf8_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op8_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf7', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_2, reduction)
        return store_reduction
op8 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 50331648}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 50331648}, None),
        MemoryDep('buf7', c0, {c0: 98304}, None),
        MemoryDep('buf8', c0, {c0: 98304}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (50331648, 1)
op9.sizes = ([98304, 512], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf8_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf9_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op9_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf7', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf8', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf9', get_index_3, where_1, None)
        return store
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 6291456}, None)]
op10.unmet_dependencies = [   MemoryDep('buf3', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op10.met_dependencies = [MemoryDep('arg8_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (6291456, 1)
op10.sizes = ([16, 12, 512, 64], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op10_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf10', get_index_2, add, None)
        return store
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf9', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.bmm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 6291456}, None)]
op12.unmet_dependencies = [   MemoryDep('buf11', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (6291456, 1)
op12.sizes = ([16, 512, 12, 64], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op12_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
    ]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 8192}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6291456}, None),
        MemoryDep('buf2', c0, {c0: 6291456}, None)]
op14.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 8192, c1: 768}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (8192, 768)
op14.sizes = ([8192], [768])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op14_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf14', get_index_3, reduction)
        return store_reduction
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 8192}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6291456}, None),
        MemoryDep('buf14', c0, {c0: 8192}, None),
        MemoryDep('buf2', c0, {c0: 6291456}, None)]
op15.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 8192, c1: 768}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (8192, 768)
op15.sizes = ([8192], [768])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op15_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf14', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_4, reduction)
        return store_reduction
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 6291456}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6291456}, None),
        MemoryDep('buf14', c0, {c0: 8192}, None),
        MemoryDep('buf15', c0, {c0: 8192}, None),
        MemoryDep('buf2', c0, {c0: 6291456}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg11_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg12_1', c1, {c0: 8192, c1: 768}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf16.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (6291456, 1)
op16.sizes = ([8192, 768], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op16_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf13', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg10_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf2', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf14', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf15', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg12_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf16', get_index_7, add_3, None)
        return store
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.mm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 25165824}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 25165824}, None)]
op18.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 8192, c1: 3072}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (25165824, 1)
op18.sizes = ([8192, 3072], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op18_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf18', get_index_4, mul_2, None)
        return store
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op19.node.kernel = extern_kernels.mm


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 8192}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 6291456}, None),
        MemoryDep('buf19', c0, {c0: 6291456}, None)]
op20.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 8192, c1: 768}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (8192, 768)
op20.sizes = ([8192], [768])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op20_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf16', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf20', get_index_3, reduction)
        return store_reduction
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 8192}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 6291456}, None),
        MemoryDep('buf19', c0, {c0: 6291456}, None),
        MemoryDep('buf20', c0, {c0: 8192}, None)]
op21.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 8192, c1: 768}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (8192, 768)
op21.sizes = ([8192], [768])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf21_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op21_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf16', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf20', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf21', get_index_4, reduction)
        return store_reduction
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 6291456}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 6291456}, None),
        MemoryDep('buf19', c0, {c0: 6291456}, None),
        MemoryDep('buf20', c0, {c0: 8192}, None),
        MemoryDep('buf21', c0, {c0: 8192}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 8192, c1: 768}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (6291456, 1)
op22.sizes = ([8192, 768], [])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf21_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op22_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg17_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf16', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf20', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf21', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg18_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf22', get_index_7, add_3, None)
        return store
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 6291456}, None)]
op24.unmet_dependencies = [   MemoryDep('buf23', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op24.met_dependencies = [MemoryDep('arg20_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (6291456, 1)
op24.sizes = ([16, 12, 512, 64], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op24_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf24', get_index_2, mul, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 6291456}, None)]
op25.unmet_dependencies = [   MemoryDep('buf23', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (6291456, 1)
op25.sizes = ([16, 12, 64, 512], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op25_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf25', get_index_1, load, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf25', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op26.node.kernel = extern_kernels.bmm


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 98304}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 50331648}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (98304, 512)
op27.sizes = ([98304], [512])
buf26_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op27_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, reduction)
        return store_reduction
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 98304}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 50331648}, None),
        MemoryDep('buf27', c0, {c0: 98304}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (98304, 512)
op28.sizes = ([98304], [512])
buf26_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf28_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op28_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_2, reduction)
        return store_reduction
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 50331648}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 50331648}, None),
        MemoryDep('buf27', c0, {c0: 98304}, None),
        MemoryDep('buf28', c0, {c0: 98304}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (50331648, 1)
op29.sizes = ([98304, 512], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf28_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf29_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op29_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf29', get_index_3, where_1, None)
        return store
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 6291456}, None)]
op30.unmet_dependencies = [   MemoryDep('buf23', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op30.met_dependencies = [MemoryDep('arg21_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (6291456, 1)
op30.sizes = ([16, 12, 512, 64], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op30_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, add, None)
        return store
op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None), StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.bmm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 6291456}, None)]
op32.unmet_dependencies = [   MemoryDep('buf31', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (6291456, 1)
op32.sizes = ([16, 512, 12, 64], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op32_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.mm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 8192}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 6291456}, None)]
op34.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (8192, 768)
op34.sizes = ([8192], [768])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op34_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_3, reduction)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 8192}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 6291456}, None),
        MemoryDep('buf34', c0, {c0: 8192}, None)]
op35.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (8192, 768)
op35.sizes = ([8192], [768])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op35_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf34', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_4, reduction)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 6291456}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 6291456}, None),
        MemoryDep('buf34', c0, {c0: 8192}, None),
        MemoryDep('buf35', c0, {c0: 8192}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg25_1', c1, {c0: 8192, c1: 768}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (6291456, 1)
op36.sizes = ([8192, 768], [])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op36_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg24_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf22', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf34', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf35', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg25_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf36', get_index_7, add_3, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 25165824}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 25165824}, None)]
op38.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 8192, c1: 3072}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (25165824, 1)
op38.sizes = ([8192, 3072], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op38_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf37', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg27_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf38', get_index_4, mul_2, None)
        return store
op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.mm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 8192}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 6291456}, None),
        MemoryDep('buf39', c0, {c0: 6291456}, None)]
op40.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 8192, c1: 768}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (8192, 768)
op40.sizes = ([8192], [768])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op40_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_3, reduction)
        return store_reduction
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 8192}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 6291456}, None),
        MemoryDep('buf39', c0, {c0: 6291456}, None),
        MemoryDep('buf40', c0, {c0: 8192}, None)]
op41.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 8192, c1: 768}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (8192, 768)
op41.sizes = ([8192], [768])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op41_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_4, reduction)
        return store_reduction
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 6291456}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 6291456}, None),
        MemoryDep('buf39', c0, {c0: 6291456}, None),
        MemoryDep('buf40', c0, {c0: 8192}, None),
        MemoryDep('buf41', c0, {c0: 8192}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg30_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg31_1', c1, {c0: 8192, c1: 768}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf42.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (6291456, 1)
op42.sizes = ([8192, 768], [])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op42_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg30_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg29_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf36', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf40', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf41', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg31_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf42', get_index_7, add_3, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 6291456}, None)]
op44.unmet_dependencies = [   MemoryDep('buf43', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op44.met_dependencies = [MemoryDep('arg33_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (6291456, 1)
op44.sizes = ([16, 12, 512, 64], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op44_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf44', get_index_2, mul, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 6291456}, None)]
op45.unmet_dependencies = [   MemoryDep('buf43', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (6291456, 1)
op45.sizes = ([16, 12, 64, 512], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op45_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.bmm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 98304}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 50331648}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (98304, 512)
op47.sizes = ([98304], [512])
buf46_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op47_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf47', get_index_1, reduction)
        return store_reduction
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 98304}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 50331648}, None),
        MemoryDep('buf47', c0, {c0: 98304}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (98304, 512)
op48.sizes = ([98304], [512])
buf46_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf48_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op48_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_2, reduction)
        return store_reduction
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 50331648}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 50331648}, None),
        MemoryDep('buf47', c0, {c0: 98304}, None),
        MemoryDep('buf48', c0, {c0: 98304}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (50331648, 1)
op49.sizes = ([98304, 512], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf48_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op49_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf48', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf49', get_index_3, where_1, None)
        return store
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 6291456}, None)]
op50.unmet_dependencies = [   MemoryDep('buf43', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op50.met_dependencies = [MemoryDep('arg34_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (6291456, 1)
op50.sizes = ([16, 12, 512, 64], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op50_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg34_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf50', get_index_2, add, None)
        return store
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf49', mode=None), StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.bmm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 6291456}, None)]
op52.unmet_dependencies = [   MemoryDep('buf51', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (6291456, 1)
op52.sizes = ([16, 512, 12, 64], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op52_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf52', get_index_1, load, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 8192}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 6291456}, None),
        MemoryDep('buf53', c0, {c0: 6291456}, None)]
op54.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 8192, c1: 768}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (8192, 768)
op54.sizes = ([8192], [768])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op54_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf42', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf54', get_index_3, reduction)
        return store_reduction
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 8192}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 6291456}, None),
        MemoryDep('buf53', c0, {c0: 6291456}, None),
        MemoryDep('buf54', c0, {c0: 8192}, None)]
op55.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 8192, c1: 768}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (8192, 768)
op55.sizes = ([8192], [768])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op55_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf42', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf54', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_4, reduction)
        return store_reduction
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 6291456}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 6291456}, None),
        MemoryDep('buf53', c0, {c0: 6291456}, None),
        MemoryDep('buf54', c0, {c0: 8192}, None),
        MemoryDep('buf55', c0, {c0: 8192}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg37_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg38_1', c1, {c0: 8192, c1: 768}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf56.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (6291456, 1)
op56.sizes = ([8192, 768], [])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op56_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg36_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf42', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf54', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf55', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg38_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf56', get_index_7, add_3, None)
        return store
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 25165824}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 25165824}, None)]
op58.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 8192, c1: 3072}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (25165824, 1)
op58.sizes = ([8192, 3072], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op58_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf58', get_index_4, mul_2, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 8192}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 6291456}, None),
        MemoryDep('buf59', c0, {c0: 6291456}, None)]
op60.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 8192, c1: 768}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (8192, 768)
op60.sizes = ([8192], [768])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op60_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf56', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf60', get_index_3, reduction)
        return store_reduction
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 8192}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 6291456}, None),
        MemoryDep('buf59', c0, {c0: 6291456}, None),
        MemoryDep('buf60', c0, {c0: 8192}, None)]
op61.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 8192, c1: 768}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (8192, 768)
op61.sizes = ([8192], [768])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf61_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op61_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf56', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf60', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf61', get_index_4, reduction)
        return store_reduction
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 6291456}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 6291456}, None),
        MemoryDep('buf59', c0, {c0: 6291456}, None),
        MemoryDep('buf60', c0, {c0: 8192}, None),
        MemoryDep('buf61', c0, {c0: 8192}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg43_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg44_1', c1, {c0: 8192, c1: 768}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (6291456, 1)
op62.sizes = ([8192, 768], [])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf61_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op62_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg43_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf56', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf60', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf61', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg44_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf62', get_index_7, add_3, None)
        return store
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op63.node.kernel = extern_kernels.mm


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 6291456}, None)]
op64.unmet_dependencies = [   MemoryDep('buf63', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op64.met_dependencies = [MemoryDep('arg46_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (6291456, 1)
op64.sizes = ([16, 12, 512, 64], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op64_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf64', get_index_2, mul, None)
        return store
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 6291456}, None)]
op65.unmet_dependencies = [   MemoryDep('buf63', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (6291456, 1)
op65.sizes = ([16, 12, 64, 512], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op65_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf64', mode=None), StarDep(name='buf65', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op66.node.kernel = extern_kernels.bmm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 98304}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 50331648}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (98304, 512)
op67.sizes = ([98304], [512])
buf66_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op67_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf67', get_index_1, reduction)
        return store_reduction
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 98304}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 50331648}, None),
        MemoryDep('buf67', c0, {c0: 98304}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (98304, 512)
op68.sizes = ([98304], [512])
buf66_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf68_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op68_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf67', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_2, reduction)
        return store_reduction
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 50331648}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 50331648}, None),
        MemoryDep('buf67', c0, {c0: 98304}, None),
        MemoryDep('buf68', c0, {c0: 98304}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (50331648, 1)
op69.sizes = ([98304, 512], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf68_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf69_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op69_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf67', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf69', get_index_3, where_1, None)
        return store
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 6291456}, None)]
op70.unmet_dependencies = [   MemoryDep('buf63', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op70.met_dependencies = [MemoryDep('arg47_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (6291456, 1)
op70.sizes = ([16, 12, 512, 64], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op70_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf70', get_index_2, add, None)
        return store
op70 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf69', mode=None), StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.bmm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 6291456}, None)]
op72.unmet_dependencies = [   MemoryDep('buf71', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (6291456, 1)
op72.sizes = ([16, 512, 12, 64], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op72_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf72', get_index_1, load, None)
        return store
op72 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 8192}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 6291456}, None),
        MemoryDep('buf73', c0, {c0: 6291456}, None)]
op74.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (8192, 768)
op74.sizes = ([8192], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op74_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, reduction)
        return store_reduction
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 8192}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 6291456}, None),
        MemoryDep('buf73', c0, {c0: 6291456}, None),
        MemoryDep('buf74', c0, {c0: 8192}, None)]
op75.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (8192, 768)
op75.sizes = ([8192], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op75_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf74', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_4, reduction)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 6291456}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 6291456}, None),
        MemoryDep('buf73', c0, {c0: 6291456}, None),
        MemoryDep('buf74', c0, {c0: 8192}, None),
        MemoryDep('buf75', c0, {c0: 8192}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg50_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg51_1', c1, {c0: 8192, c1: 768}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf76.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (6291456, 1)
op76.sizes = ([8192, 768], [])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op76_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg50_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg49_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf62', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf74', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf75', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg51_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf76', get_index_7, add_3, None)
        return store
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.mm


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 25165824}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 25165824}, None)]
op78.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 8192, c1: 3072}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (25165824, 1)
op78.sizes = ([8192, 3072], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op78_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg53_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf78', get_index_4, mul_2, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.mm


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 8192}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 6291456}, None),
        MemoryDep('buf79', c0, {c0: 6291456}, None)]
op80.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (8192, 768)
op80.sizes = ([8192], [768])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op80_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf80', get_index_3, reduction)
        return store_reduction
op80 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 8192}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 6291456}, None),
        MemoryDep('buf79', c0, {c0: 6291456}, None),
        MemoryDep('buf80', c0, {c0: 8192}, None)]
op81.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (8192, 768)
op81.sizes = ([8192], [768])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op81_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf80', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_4, reduction)
        return store_reduction
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 6291456}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 6291456}, None),
        MemoryDep('buf79', c0, {c0: 6291456}, None),
        MemoryDep('buf80', c0, {c0: 8192}, None),
        MemoryDep('buf81', c0, {c0: 8192}, None)]
op82.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg56_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 8192, c1: 768}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (6291456, 1)
op82.sizes = ([8192, 768], [])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op82_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg55_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf76', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf80', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf81', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg57_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf82', get_index_7, add_3, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 6291456}, None)]
op84.unmet_dependencies = [   MemoryDep('buf83', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op84.met_dependencies = [MemoryDep('arg59_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (6291456, 1)
op84.sizes = ([16, 12, 512, 64], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op84_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf84', get_index_2, mul, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 6291456}, None)]
op85.unmet_dependencies = [   MemoryDep('buf83', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (6291456, 1)
op85.sizes = ([16, 12, 64, 512], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op85_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, load, None)
        return store
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None), StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.bmm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 98304}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 50331648}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (98304, 512)
op87.sizes = ([98304], [512])
buf86_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op87_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, reduction)
        return store_reduction
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 98304}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 50331648}, None),
        MemoryDep('buf87', c0, {c0: 98304}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (98304, 512)
op88.sizes = ([98304], [512])
buf86_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf88_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op88_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_2, reduction)
        return store_reduction
op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 50331648}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 50331648}, None),
        MemoryDep('buf87', c0, {c0: 98304}, None),
        MemoryDep('buf88', c0, {c0: 98304}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (50331648, 1)
op89.sizes = ([98304, 512], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf88_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf89_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op89_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf88', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf89', get_index_3, where_1, None)
        return store
op89 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 6291456}, None)]
op90.unmet_dependencies = [   MemoryDep('buf83', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op90.met_dependencies = [MemoryDep('arg60_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (6291456, 1)
op90.sizes = ([16, 12, 512, 64], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op90_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg60_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf90', get_index_2, add, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf89', mode=None), StarDep(name='buf90', mode=None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = extern_kernels.bmm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 6291456}, None)]
op92.unmet_dependencies = [   MemoryDep('buf91', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (6291456, 1)
op92.sizes = ([16, 512, 12, 64], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op92_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf92', get_index_1, load, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 8192}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 6291456}, None),
        MemoryDep('buf93', c0, {c0: 6291456}, None)]
op94.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 8192, c1: 768}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (8192, 768)
op94.sizes = ([8192], [768])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op94_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_3, reduction)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 8192}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 6291456}, None),
        MemoryDep('buf93', c0, {c0: 6291456}, None),
        MemoryDep('buf94', c0, {c0: 8192}, None)]
op95.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 8192, c1: 768}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (8192, 768)
op95.sizes = ([8192], [768])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op95_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf94', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_4, reduction)
        return store_reduction
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 6291456}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 6291456}, None),
        MemoryDep('buf93', c0, {c0: 6291456}, None),
        MemoryDep('buf94', c0, {c0: 8192}, None),
        MemoryDep('buf95', c0, {c0: 8192}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg63_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg64_1', c1, {c0: 8192, c1: 768}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf96.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (6291456, 1)
op96.sizes = ([8192, 768], [])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op96_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg63_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg62_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf82', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf94', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf95', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg64_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf96', get_index_7, add_3, None)
        return store
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 25165824}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 25165824}, None)]
op98.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 8192, c1: 3072}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (25165824, 1)
op98.sizes = ([8192, 3072], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op98_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 8192}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf96', c0, {c0: 6291456}, None),
        MemoryDep('buf99', c0, {c0: 6291456}, None)]
op100.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 8192, c1: 768}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (8192, 768)
op100.sizes = ([8192], [768])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op100_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, reduction)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 8192}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 8192}, None),
        MemoryDep('buf96', c0, {c0: 6291456}, None),
        MemoryDep('buf99', c0, {c0: 6291456}, None)]
op101.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 8192, c1: 768}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (8192, 768)
op101.sizes = ([8192], [768])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op101_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_4, reduction)
        return store_reduction
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 6291456}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 8192}, None),
        MemoryDep('buf101', c0, {c0: 8192}, None),
        MemoryDep('buf96', c0, {c0: 6291456}, None),
        MemoryDep('buf99', c0, {c0: 6291456}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg69_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg70_1', c1, {c0: 8192, c1: 768}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (6291456, 1)
op102.sizes = ([8192, 768], [])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op102_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg69_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf96', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf100', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf101', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg70_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf102', get_index_7, add_3, None)
        return store
op102 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 6291456}, None)]
op104.unmet_dependencies = [   MemoryDep('buf103', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op104.met_dependencies = [MemoryDep('arg72_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (6291456, 1)
op104.sizes = ([16, 12, 512, 64], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op104_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf104', get_index_2, mul, None)
        return store
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 6291456}, None)]
op105.unmet_dependencies = [   MemoryDep('buf103', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (6291456, 1)
op105.sizes = ([16, 12, 64, 512], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op105_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store
op105 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.bmm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 98304}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 50331648}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (98304, 512)
op107.sizes = ([98304], [512])
buf106_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op107_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_1, reduction)
        return store_reduction
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 98304}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 50331648}, None),
        MemoryDep('buf107', c0, {c0: 98304}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (98304, 512)
op108.sizes = ([98304], [512])
buf106_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf108_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op108_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_2, reduction)
        return store_reduction
op108 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 50331648}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 50331648}, None),
        MemoryDep('buf107', c0, {c0: 98304}, None),
        MemoryDep('buf108', c0, {c0: 98304}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (50331648, 1)
op109.sizes = ([98304, 512], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf108_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf109_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op109_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf109', get_index_3, where_1, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 6291456}, None)]
op110.unmet_dependencies = [   MemoryDep('buf103', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op110.met_dependencies = [MemoryDep('arg73_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (6291456, 1)
op110.sizes = ([16, 12, 512, 64], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op110_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf110', get_index_2, add, None)
        return store
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf109', mode=None), StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.bmm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 6291456}, None)]
op112.unmet_dependencies = [   MemoryDep('buf111', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (6291456, 1)
op112.sizes = ([16, 512, 12, 64], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op112_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 8192}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 6291456}, None),
        MemoryDep('buf113', c0, {c0: 6291456}, None)]
op114.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 8192, c1: 768}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (8192, 768)
op114.sizes = ([8192], [768])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op114_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf102', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_3, reduction)
        return store_reduction
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 8192}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 6291456}, None),
        MemoryDep('buf113', c0, {c0: 6291456}, None),
        MemoryDep('buf114', c0, {c0: 8192}, None)]
op115.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 8192, c1: 768}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (8192, 768)
op115.sizes = ([8192], [768])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op115_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf102', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf114', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_4, reduction)
        return store_reduction
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 6291456}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 6291456}, None),
        MemoryDep('buf113', c0, {c0: 6291456}, None),
        MemoryDep('buf114', c0, {c0: 8192}, None),
        MemoryDep('buf115', c0, {c0: 8192}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg76_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 8192, c1: 768}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (6291456, 1)
op116.sizes = ([8192, 768], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op116_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg75_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf102', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf114', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf115', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg77_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf116', get_index_7, add_3, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.mm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 25165824}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 25165824}, None)]
op118.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 8192, c1: 3072}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (25165824, 1)
op118.sizes = ([8192, 3072], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op118_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf118', get_index_4, mul_2, None)
        return store
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 8192}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 6291456}, None),
        MemoryDep('buf119', c0, {c0: 6291456}, None)]
op120.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (8192, 768)
op120.sizes = ([8192], [768])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op120_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, reduction)
        return store_reduction
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 8192}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 6291456}, None),
        MemoryDep('buf119', c0, {c0: 6291456}, None),
        MemoryDep('buf120', c0, {c0: 8192}, None)]
op121.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (8192, 768)
op121.sizes = ([8192], [768])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op121_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf120', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_4, reduction)
        return store_reduction
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 6291456}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 6291456}, None),
        MemoryDep('buf119', c0, {c0: 6291456}, None),
        MemoryDep('buf120', c0, {c0: 8192}, None),
        MemoryDep('buf121', c0, {c0: 8192}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg82_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg83_1', c1, {c0: 8192, c1: 768}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (6291456, 1)
op122.sizes = ([8192, 768], [])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op122_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg82_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf119', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg81_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf116', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf121', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg83_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 6291456}, None)]
op124.unmet_dependencies = [   MemoryDep('buf123', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op124.met_dependencies = [MemoryDep('arg85_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (6291456, 1)
op124.sizes = ([16, 12, 512, 64], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op124_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf124', get_index_2, mul, None)
        return store
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 6291456}, None)]
op125.unmet_dependencies = [   MemoryDep('buf123', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (6291456, 1)
op125.sizes = ([16, 12, 64, 512], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op125_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf125', get_index_1, load, None)
        return store
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf124', mode=None), StarDep(name='buf125', mode=None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op126.node.kernel = extern_kernels.bmm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 98304}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 50331648}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (98304, 512)
op127.sizes = ([98304], [512])
buf126_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op127_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf127', get_index_1, reduction)
        return store_reduction
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 98304}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 50331648}, None),
        MemoryDep('buf127', c0, {c0: 98304}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (98304, 512)
op128.sizes = ([98304], [512])
buf126_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf128_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op128_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf127', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf128', get_index_2, reduction)
        return store_reduction
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 50331648}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 50331648}, None),
        MemoryDep('buf127', c0, {c0: 98304}, None),
        MemoryDep('buf128', c0, {c0: 98304}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (50331648, 1)
op129.sizes = ([98304, 512], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf128_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf129_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op129_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf127', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf128', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf129', get_index_3, where_1, None)
        return store
op129 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 6291456}, None)]
op130.unmet_dependencies = [   MemoryDep('buf123', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op130.met_dependencies = [MemoryDep('arg86_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (6291456, 1)
op130.sizes = ([16, 12, 512, 64], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op130_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf130', get_index_2, add, None)
        return store
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf129', mode=None), StarDep(name='buf130', mode=None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.bmm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 6291456}, None)]
op132.unmet_dependencies = [   MemoryDep('buf131', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (6291456, 1)
op132.sizes = ([16, 512, 12, 64], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op132_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf132', get_index_1, load, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.mm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 8192}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 6291456}, None),
        MemoryDep('buf133', c0, {c0: 6291456}, None)]
op134.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 8192, c1: 768}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (8192, 768)
op134.sizes = ([8192], [768])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op134_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf134', get_index_3, reduction)
        return store_reduction
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 8192}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 6291456}, None),
        MemoryDep('buf133', c0, {c0: 6291456}, None),
        MemoryDep('buf134', c0, {c0: 8192}, None)]
op135.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 8192, c1: 768}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (8192, 768)
op135.sizes = ([8192], [768])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op135_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf134', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf135', get_index_4, reduction)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 6291456}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 6291456}, None),
        MemoryDep('buf133', c0, {c0: 6291456}, None),
        MemoryDep('buf134', c0, {c0: 8192}, None),
        MemoryDep('buf135', c0, {c0: 8192}, None)]
op136.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg90_1', c1, {c0: 8192, c1: 768}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op136.group.device = cuda:0
op136.group.iteration = (6291456, 1)
op136.sizes = ([8192, 768], [])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op136_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg89_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg88_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf122', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf134', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf135', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg90_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf136', get_index_7, add_3, None)
        return store
op136 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 25165824}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 25165824}, None)]
op138.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 8192, c1: 3072}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (25165824, 1)
op138.sizes = ([8192, 3072], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op138_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg92_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf138', get_index_4, mul_2, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.mm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 8192}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf136', c0, {c0: 6291456}, None),
        MemoryDep('buf139', c0, {c0: 6291456}, None)]
op140.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 8192, c1: 768}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (8192, 768)
op140.sizes = ([8192], [768])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op140_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf140', get_index_3, reduction)
        return store_reduction
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 8192}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf136', c0, {c0: 6291456}, None),
        MemoryDep('buf139', c0, {c0: 6291456}, None),
        MemoryDep('buf140', c0, {c0: 8192}, None)]
op141.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 8192, c1: 768}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (8192, 768)
op141.sizes = ([8192], [768])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op141_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf140', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf141', get_index_4, reduction)
        return store_reduction
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 6291456}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf136', c0, {c0: 6291456}, None),
        MemoryDep('buf139', c0, {c0: 6291456}, None),
        MemoryDep('buf140', c0, {c0: 8192}, None),
        MemoryDep('buf141', c0, {c0: 8192}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg95_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 8192, c1: 768}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (6291456, 1)
op142.sizes = ([8192, 768], [])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op142_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg95_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf136', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf140', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf141', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg96_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf142', get_index_7, add_3, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 6291456}, None)]
op144.unmet_dependencies = [   MemoryDep('buf143', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op144.met_dependencies = [MemoryDep('arg98_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (6291456, 1)
op144.sizes = ([16, 12, 512, 64], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op144_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf144', get_index_2, mul, None)
        return store
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 6291456}, None)]
op145.unmet_dependencies = [   MemoryDep('buf143', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (6291456, 1)
op145.sizes = ([16, 12, 64, 512], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op145_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf145', get_index_1, load, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None), StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op146.node.kernel = extern_kernels.bmm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 98304}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 50331648}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (98304, 512)
op147.sizes = ([98304], [512])
buf146_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op147_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, reduction)
        return store_reduction
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 98304}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 50331648}, None),
        MemoryDep('buf147', c0, {c0: 98304}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (98304, 512)
op148.sizes = ([98304], [512])
buf146_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf148_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op148_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_2, reduction)
        return store_reduction
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 50331648}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 50331648}, None),
        MemoryDep('buf147', c0, {c0: 98304}, None),
        MemoryDep('buf148', c0, {c0: 98304}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (50331648, 1)
op149.sizes = ([98304, 512], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf148_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf149_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op149_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf148', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf149', get_index_3, where_1, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 6291456}, None)]
op150.unmet_dependencies = [   MemoryDep('buf143', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op150.met_dependencies = [MemoryDep('arg99_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (6291456, 1)
op150.sizes = ([16, 12, 512, 64], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op150_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf150', get_index_2, add, None)
        return store
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.bmm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 6291456}, None)]
op152.unmet_dependencies = [   MemoryDep('buf151', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (6291456, 1)
op152.sizes = ([16, 512, 12, 64], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op152_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf152', get_index_1, load, None)
        return store
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op153.node.kernel = extern_kernels.mm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 8192}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 6291456}, None)]
op154.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 8192, c1: 768}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (8192, 768)
op154.sizes = ([8192], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op154_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_3, reduction)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 8192}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 6291456}, None),
        MemoryDep('buf154', c0, {c0: 8192}, None)]
op155.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 8192, c1: 768}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (8192, 768)
op155.sizes = ([8192], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op155_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf154', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_4, reduction)
        return store_reduction
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 6291456}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 6291456}, None),
        MemoryDep('buf154', c0, {c0: 8192}, None),
        MemoryDep('buf155', c0, {c0: 8192}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg102_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op156.group.device = cuda:0
op156.group.iteration = (6291456, 1)
op156.sizes = ([8192, 768], [])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op156_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg102_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf153', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf142', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf154', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf155', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg103_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf156', get_index_7, add_3, None)
        return store
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 25165824}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 25165824}, None)]
op158.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 8192, c1: 3072}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (25165824, 1)
op158.sizes = ([8192, 3072], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op158_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg105_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf158', get_index_4, mul_2, None)
        return store
op158 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 8192}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 6291456}, None),
        MemoryDep('buf159', c0, {c0: 6291456}, None)]
op160.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 8192, c1: 768}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (8192, 768)
op160.sizes = ([8192], [768])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op160_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf156', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf160', get_index_3, reduction)
        return store_reduction
op160 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 8192}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 6291456}, None),
        MemoryDep('buf159', c0, {c0: 6291456}, None),
        MemoryDep('buf160', c0, {c0: 8192}, None)]
op161.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 8192, c1: 768}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (8192, 768)
op161.sizes = ([8192], [768])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op161_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf156', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf160', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_4, reduction)
        return store_reduction
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 6291456}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 6291456}, None),
        MemoryDep('buf159', c0, {c0: 6291456}, None),
        MemoryDep('buf160', c0, {c0: 8192}, None),
        MemoryDep('buf161', c0, {c0: 8192}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg109_1', c1, {c0: 8192, c1: 768}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (6291456, 1)
op162.sizes = ([8192, 768], [])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op162_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg108_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf156', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf160', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf161', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg109_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf162', get_index_7, add_3, None)
        return store
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
    ]
]
op163.node.kernel = extern_kernels.mm


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 6291456}, None)]
op164.unmet_dependencies = [   MemoryDep('buf163', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op164.met_dependencies = [MemoryDep('arg111_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (6291456, 1)
op164.sizes = ([16, 12, 512, 64], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op164_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf164', get_index_2, mul, None)
        return store
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 6291456}, None)]
op165.unmet_dependencies = [   MemoryDep('buf163', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (6291456, 1)
op165.sizes = ([16, 12, 64, 512], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op165_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf164', mode=None), StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf166.users = [
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op166.node.kernel = extern_kernels.bmm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 98304}, None)]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 50331648}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (98304, 512)
op167.sizes = ([98304], [512])
buf166_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op167_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf167', get_index_1, reduction)
        return store_reduction
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 98304}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 50331648}, None),
        MemoryDep('buf167', c0, {c0: 98304}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (98304, 512)
op168.sizes = ([98304], [512])
buf166_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf168_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op168_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_2, reduction)
        return store_reduction
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 50331648}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 50331648}, None),
        MemoryDep('buf167', c0, {c0: 98304}, None),
        MemoryDep('buf168', c0, {c0: 98304}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (50331648, 1)
op169.sizes = ([98304, 512], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf168_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op169_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf168', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf169', get_index_3, where_1, None)
        return store
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 6291456}, None)]
op170.unmet_dependencies = [   MemoryDep('buf163', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op170.met_dependencies = [MemoryDep('arg112_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (6291456, 1)
op170.sizes = ([16, 12, 512, 64], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op170_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf170', get_index_2, add, None)
        return store
op170 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf169', mode=None), StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = extern_kernels.bmm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 6291456}, None)]
op172.unmet_dependencies = [   MemoryDep('buf171', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (6291456, 1)
op172.sizes = ([16, 512, 12, 64], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op172_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf172', get_index_1, load, None)
        return store
op172 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
    ]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 8192}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 6291456}, None),
        MemoryDep('buf173', c0, {c0: 6291456}, None)]
op174.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 8192, c1: 768}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (8192, 768)
op174.sizes = ([8192], [768])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op174_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf162', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_3, reduction)
        return store_reduction
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 8192}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 6291456}, None),
        MemoryDep('buf173', c0, {c0: 6291456}, None),
        MemoryDep('buf174', c0, {c0: 8192}, None)]
op175.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 8192, c1: 768}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (8192, 768)
op175.sizes = ([8192], [768])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op175_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf162', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf174', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_4, reduction)
        return store_reduction
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 6291456}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 6291456}, None),
        MemoryDep('buf173', c0, {c0: 6291456}, None),
        MemoryDep('buf174', c0, {c0: 8192}, None),
        MemoryDep('buf175', c0, {c0: 8192}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg115_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg116_1', c1, {c0: 8192, c1: 768}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf176.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (6291456, 1)
op176.sizes = ([8192, 768], [])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op176_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg115_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf162', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf174', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf175', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg116_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf176', get_index_7, add_3, None)
        return store
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 25165824}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 25165824}, None)]
op178.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 8192, c1: 3072}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (25165824, 1)
op178.sizes = ([8192, 3072], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op178_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf177', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg118_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf178', get_index_4, mul_2, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 8192}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 6291456}, None),
        MemoryDep('buf179', c0, {c0: 6291456}, None)]
op180.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 8192, c1: 768}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (8192, 768)
op180.sizes = ([8192], [768])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op180_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf180', get_index_3, reduction)
        return store_reduction
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 8192}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 6291456}, None),
        MemoryDep('buf179', c0, {c0: 6291456}, None),
        MemoryDep('buf180', c0, {c0: 8192}, None)]
op181.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 8192, c1: 768}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (8192, 768)
op181.sizes = ([8192], [768])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op181_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf180', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf181', get_index_4, reduction)
        return store_reduction
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 6291456}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 6291456}, None),
        MemoryDep('buf179', c0, {c0: 6291456}, None),
        MemoryDep('buf180', c0, {c0: 8192}, None),
        MemoryDep('buf181', c0, {c0: 8192}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg122_1', c1, {c0: 8192, c1: 768}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (6291456, 1)
op182.sizes = ([8192, 768], [])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op182_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg120_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf176', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf180', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf181', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg122_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf182', get_index_7, add_3, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 6291456}, None)]
op184.unmet_dependencies = [   MemoryDep('buf183', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op184.met_dependencies = [MemoryDep('arg124_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (6291456, 1)
op184.sizes = ([16, 12, 512, 64], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op184_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg124_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf184', get_index_2, mul, None)
        return store
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 6291456}, None)]
op185.unmet_dependencies = [   MemoryDep('buf183', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (6291456, 1)
op185.sizes = ([16, 12, 64, 512], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op185_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf184', mode=None), StarDep(name='buf185', mode=None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.bmm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 98304}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 50331648}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (98304, 512)
op187.sizes = ([98304], [512])
buf186_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op187_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_1, reduction)
        return store_reduction
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 98304}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 50331648}, None),
        MemoryDep('buf187', c0, {c0: 98304}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (98304, 512)
op188.sizes = ([98304], [512])
buf186_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf188_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op188_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf187', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_2, reduction)
        return store_reduction
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 50331648}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 50331648}, None),
        MemoryDep('buf187', c0, {c0: 98304}, None),
        MemoryDep('buf188', c0, {c0: 98304}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (50331648, 1)
op189.sizes = ([98304, 512], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf188_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf189_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op189_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf187', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf188', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf189', get_index_3, where_1, None)
        return store
op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 6291456}, None)]
op190.unmet_dependencies = [   MemoryDep('buf183', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op190.met_dependencies = [MemoryDep('arg125_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (6291456, 1)
op190.sizes = ([16, 12, 512, 64], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op190_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf190', get_index_2, add, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf189', mode=None), StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.bmm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 6291456}, None)]
op192.unmet_dependencies = [   MemoryDep('buf191', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (6291456, 1)
op192.sizes = ([16, 512, 12, 64], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op192_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf192', get_index_1, load, None)
        return store
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 8192}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 6291456}, None),
        MemoryDep('buf193', c0, {c0: 6291456}, None)]
op194.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 8192, c1: 768}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (8192, 768)
op194.sizes = ([8192], [768])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op194_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf182', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, reduction)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 8192}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 6291456}, None),
        MemoryDep('buf193', c0, {c0: 6291456}, None),
        MemoryDep('buf194', c0, {c0: 8192}, None)]
op195.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 8192, c1: 768}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (8192, 768)
op195.sizes = ([8192], [768])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op195_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf182', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_4, reduction)
        return store_reduction
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 6291456}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 6291456}, None),
        MemoryDep('buf193', c0, {c0: 6291456}, None),
        MemoryDep('buf194', c0, {c0: 8192}, None),
        MemoryDep('buf195', c0, {c0: 8192}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg128_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg129_1', c1, {c0: 8192, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf196.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (6291456, 1)
op196.sizes = ([8192, 768], [])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op196_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg128_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf182', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf194', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf195', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf196', get_index_7, add_3, None)
        return store
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 25165824}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 25165824}, None)]
op198.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 8192, c1: 3072}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (25165824, 1)
op198.sizes = ([8192, 3072], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op198_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf198', get_index_4, mul_2, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 8192}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 6291456}, None),
        MemoryDep('buf199', c0, {c0: 6291456}, None)]
op200.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 8192, c1: 768}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (8192, 768)
op200.sizes = ([8192], [768])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op200_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, reduction)
        return store_reduction
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 8192}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 6291456}, None),
        MemoryDep('buf199', c0, {c0: 6291456}, None),
        MemoryDep('buf200', c0, {c0: 8192}, None)]
op201.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 8192, c1: 768}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (8192, 768)
op201.sizes = ([8192], [768])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf201_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op201_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf200', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_4, reduction)
        return store_reduction
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 6291456}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 6291456}, None),
        MemoryDep('buf199', c0, {c0: 6291456}, None),
        MemoryDep('buf200', c0, {c0: 8192}, None),
        MemoryDep('buf201', c0, {c0: 8192}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg133_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg134_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg135_1', c1, {c0: 8192, c1: 768}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (6291456, 1)
op202.sizes = ([8192, 768], [])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf201_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op202_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg134_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg133_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf196', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf200', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf201', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg135_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf202', get_index_7, add_3, None)
        return store
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op203.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 6291456}, None)]
op204.unmet_dependencies = [   MemoryDep('buf203', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op204.met_dependencies = [MemoryDep('arg137_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (6291456, 1)
op204.sizes = ([16, 12, 512, 64], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op204_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf204', get_index_2, mul, None)
        return store
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 6291456}, None)]
op205.unmet_dependencies = [   MemoryDep('buf203', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (6291456, 1)
op205.sizes = ([16, 12, 64, 512], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op205_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf205', get_index_1, load, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None), StarDep(name='buf205', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
    ]
]
op206.node.kernel = extern_kernels.bmm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 98304}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 50331648}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op207.group.device = cuda:0
op207.group.iteration = (98304, 512)
op207.sizes = ([98304], [512])
buf206_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op207_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_1, reduction)
        return store_reduction
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 98304}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 50331648}, None),
        MemoryDep('buf207', c0, {c0: 98304}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (98304, 512)
op208.sizes = ([98304], [512])
buf206_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf208_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op208_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf207', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf208', get_index_2, reduction)
        return store_reduction
op208 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 50331648}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 50331648}, None),
        MemoryDep('buf207', c0, {c0: 98304}, None),
        MemoryDep('buf208', c0, {c0: 98304}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (50331648, 1)
op209.sizes = ([98304, 512], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf208_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf209_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op209_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf207', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf208', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf209', get_index_3, where_1, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 6291456}, None)]
op210.unmet_dependencies = [   MemoryDep('buf203', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op210.met_dependencies = [MemoryDep('arg138_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (6291456, 1)
op210.sizes = ([16, 12, 512, 64], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op210_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf210', get_index_2, add, None)
        return store
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf209', mode=None), StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = extern_kernels.bmm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 6291456}, None)]
op212.unmet_dependencies = [   MemoryDep('buf211', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (6291456, 1)
op212.sizes = ([16, 512, 12, 64], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op212_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf212', get_index_1, load, None)
        return store
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
    ]
]
op213.node.kernel = extern_kernels.mm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 8192}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 6291456}, None),
        MemoryDep('buf213', c0, {c0: 6291456}, None)]
op214.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 8192, c1: 768}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (8192, 768)
op214.sizes = ([8192], [768])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op214_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf214', get_index_3, reduction)
        return store_reduction
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 8192}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 6291456}, None),
        MemoryDep('buf213', c0, {c0: 6291456}, None),
        MemoryDep('buf214', c0, {c0: 8192}, None)]
op215.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 8192, c1: 768}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (8192, 768)
op215.sizes = ([8192], [768])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op215_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf214', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_4, reduction)
        return store_reduction
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 6291456}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 6291456}, None),
        MemoryDep('buf213', c0, {c0: 6291456}, None),
        MemoryDep('buf214', c0, {c0: 8192}, None),
        MemoryDep('buf215', c0, {c0: 8192}, None)]
op216.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg141_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg142_1', c1, {c0: 8192, c1: 768}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf216.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
    ]
]
op216.group.device = cuda:0
op216.group.iteration = (6291456, 1)
op216.sizes = ([8192, 768], [])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op216_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg141_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf202', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf214', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf215', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg142_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf216', get_index_7, add_3, None)
        return store
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op217.node.kernel = extern_kernels.mm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 25165824}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 25165824}, None)]
op218.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 8192, c1: 3072}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (25165824, 1)
op218.sizes = ([8192, 3072], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op218_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf218', get_index_4, mul_2, None)
        return store
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
    ]
]
op219.node.kernel = extern_kernels.mm


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 8192}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 6291456}, None),
        MemoryDep('buf219', c0, {c0: 6291456}, None)]
op220.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 8192, c1: 768}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (8192, 768)
op220.sizes = ([8192], [768])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op220_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf216', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf220', get_index_3, reduction)
        return store_reduction
op220 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 8192}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 6291456}, None),
        MemoryDep('buf219', c0, {c0: 6291456}, None),
        MemoryDep('buf220', c0, {c0: 8192}, None)]
op221.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 8192, c1: 768}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (8192, 768)
op221.sizes = ([8192], [768])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op221_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf216', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf220', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_4, reduction)
        return store_reduction
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 6291456}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 6291456}, None),
        MemoryDep('buf219', c0, {c0: 6291456}, None),
        MemoryDep('buf220', c0, {c0: 8192}, None),
        MemoryDep('buf221', c0, {c0: 8192}, None)]
op222.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg148_1', c1, {c0: 8192, c1: 768}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf222.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op222.group.device = cuda:0
op222.group.iteration = (6291456, 1)
op222.sizes = ([8192, 768], [])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op222_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf216', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf220', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf221', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg148_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf222', get_index_7, add_3, None)
        return store
op222 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op223.node.kernel = extern_kernels.mm


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 6291456}, None)]
op224.unmet_dependencies = [   MemoryDep('buf223', 1179648*c0 + 192*c1 + 2304*c2 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op224.met_dependencies = [MemoryDep('arg150_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (6291456, 1)
op224.sizes = ([16, 12, 512, 64], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op224_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf224', get_index_2, mul, None)
        return store
op224 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 6291456}, None)]
op225.unmet_dependencies = [   MemoryDep('buf223', 1179648*c0 + 192*c1 + c2 + 2304*c3 + 64, {c0: 16, c1: 12, c2: 64, c3: 512}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (6291456, 1)
op225.sizes = ([16, 12, 64, 512], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 64, 512], stride=[393216, 32768, 512, 1])
class op225_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 64, z3: 512}
    index0 = 1179648*z0 + 192*z1 + z2 + 2304*z3 + 64
    index1 = 393216*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf225', get_index_1, load, None)
        return store
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 12288
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 12
        y2 = (yindex // 768)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (64 + y0 + (192*y1) + (2304*x3) + (1179648*y2)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op226.node.kernel = extern_kernels.bmm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 98304}, None)]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 50331648}, None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (98304, 512)
op227.sizes = ([98304], [512])
buf226_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op227_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf227', get_index_1, reduction)
        return store_reduction
op227 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 98304}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 50331648}, None),
        MemoryDep('buf227', c0, {c0: 98304}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (98304, 512)
op228.sizes = ([98304], [512])
buf226_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf228_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
class op228_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf228', get_index_2, reduction)
        return store_reduction
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 98304
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 50331648}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 50331648}, None),
        MemoryDep('buf227', c0, {c0: 98304}, None),
        MemoryDep('buf228', c0, {c0: 98304}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (50331648, 1)
op229.sizes = ([98304, 512], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 512], stride=[262144, 512, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf228_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 1], stride=[6144, 512, 1, 98304])
buf229_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 512], stride=[3145728, 262144, 512, 1])
class op229_loop_body:
    var_ranges = {z0: 98304, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf228', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf229', get_index_3, where_1, None)
        return store
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 6291456}, None)]
op230.unmet_dependencies = [   MemoryDep('buf223', 1179648*c0 + 192*c1 + 2304*c2 + c3 + 128, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op230.met_dependencies = [MemoryDep('arg151_1', 64*c1 + c3, {c0: 16, c1: 12, c2: 512, c3: 64}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (6291456, 1)
op230.sizes = ([16, 12, 512, 64], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8192, 2304], stride=[2304, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 32768, 64, 1])
class op230_loop_body:
    var_ranges = {z0: 16, z1: 12, z2: 512, z3: 64}
    index0 = 1179648*z0 + 192*z1 + 2304*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = 393216*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf230', get_index_2, add, None)
        return store
op230 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 12
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x0 + (192*x2) + (2304*x1) + (1179648*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = extern_kernels.bmm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 6291456}, None)]
op232.unmet_dependencies = [   MemoryDep('buf231', 393216*c0 + 64*c1 + 32768*c2 + c3, {c0: 16, c1: 512, c2: 12, c3: 64}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (6291456, 1)
op232.sizes = ([16, 512, 12, 64], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[192, 512, 64], stride=[32768, 64, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 12, 64], stride=[393216, 768, 64, 1])
class op232_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 12, z3: 64}
    index0 = 393216*z0 + 64*z1 + 32768*z2 + z3
    index1 = 393216*z0 + 768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 12
        x2 = (xindex // 768) % 512
        x3 = (xindex // 393216)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1) + (393216*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 8192}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf222', c0, {c0: 6291456}, None),
        MemoryDep('buf233', c0, {c0: 6291456}, None)]
op234.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 8192, c1: 768}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (8192, 768)
op234.sizes = ([8192], [768])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op234_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, reduction)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 8192}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf222', c0, {c0: 6291456}, None),
        MemoryDep('buf233', c0, {c0: 6291456}, None),
        MemoryDep('buf234', c0, {c0: 8192}, None)]
op235.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 8192, c1: 768}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (8192, 768)
op235.sizes = ([8192], [768])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op235_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf234', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_4, reduction)
        return store_reduction
op235 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 6291456}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf222', c0, {c0: 6291456}, None),
        MemoryDep('buf233', c0, {c0: 6291456}, None),
        MemoryDep('buf234', c0, {c0: 8192}, None),
        MemoryDep('buf235', c0, {c0: 8192}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg153_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg154_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg155_1', c1, {c0: 8192, c1: 768}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (6291456, 1)
op236.sizes = ([8192, 768], [])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op236_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg154_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg153_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf222', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf235', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg155_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf236', get_index_7, add_3, None)
        return store
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op237.node.kernel = extern_kernels.mm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 25165824}, None)]
op238.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 25165824}, None)]
op238.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 8192, c1: 3072}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (25165824, 1)
op238.sizes = ([8192, 3072], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op238_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf237', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg157_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf238', get_index_4, mul_2, None)
        return store
op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 8192}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 6291456}, None),
        MemoryDep('buf239', c0, {c0: 6291456}, None)]
op240.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 8192, c1: 768}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (8192, 768)
op240.sizes = ([8192], [768])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op240_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf240', get_index_3, reduction)
        return store_reduction
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 8192}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 6291456}, None),
        MemoryDep('buf239', c0, {c0: 6291456}, None),
        MemoryDep('buf240', c0, {c0: 8192}, None)]
op241.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 8192, c1: 768}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (8192, 768)
op241.sizes = ([8192], [768])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op241_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf240', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        sub = ops.sub(add_1, truediv)
        mul = ops.mul(sub, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf241', get_index_4, reduction)
        return store_reduction
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp5 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = tmp4 - tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 6291456}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 6291456}, None),
        MemoryDep('buf239', c0, {c0: 6291456}, None),
        MemoryDep('buf240', c0, {c0: 8192}, None),
        MemoryDep('buf241', c0, {c0: 8192}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg160_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg161_1', c1, {c0: 8192, c1: 768}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (6291456, 1)
op242.sizes = ([8192, 768], [])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op242_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg160_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf239', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf236', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf240', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        sub = ops.sub(add_1, truediv)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf241', get_index_5)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_1)
        constant_2 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv_1, constant_2)
        sqrt = ops.sqrt(add_2)
        truediv_2 = ops.truediv(sub, sqrt)
        mul = ops.mul(load, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf242', get_index_7, add_3, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x2 = xindex
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 768.0
        tmp8 = tmp6 / tmp7
        tmp9 = tmp5 - tmp8
        tmp11 = tmp10 / tmp7
        tmp12 = 1e-07
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.sqrt(tmp13)
        tmp15 = tmp9 / tmp14
        tmp16 = tmp0 * tmp15
        tmp18 = tmp16 + tmp17
        tl.store(out_ptr0 + (x2), tmp18, None)


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8192, 2], stride=[2, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.mm


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 8192}, None)]
op244.unmet_dependencies = [MemoryDep('buf243', 2*c0, {c0: 8192}, None)]
op244.met_dependencies = [MemoryDep('arg163_1', 0, {}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (8192, 1)
op244.sizes = ([8192], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8192, 2], stride=[2, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
class op244_loop_body:
    var_ranges = {z0: 8192}
    index0 = 2*z0
    index1 = 0
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf244', get_index_2, add, None)
        return store
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (2*x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (0))
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK])
        tmp3 = tmp0 + tmp2
        tl.store(out_ptr0 + (x0), tmp3, None)


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 16}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 8192}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (16, 512)
op245.sizes = ([16], [512])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
class op245_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_1, reduction)
        return store_reduction
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 16
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 16}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf244', c0, {c0: 8192}, None),
        MemoryDep('buf245', c0, {c0: 16}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (16, 512)
op246.sizes = ([16], [512])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
buf246_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
class op246_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_2, reduction)
        return store_reduction
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 16
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', 0, {}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf244', 512*c0 + tmp20, {c0: 16}, None),
        MemoryDep('buf245', c0, {c0: 16}, None),
        MemoryDep('buf246', c0, {c0: 16}, None)]
op247.met_dependencies = [MemoryDep('arg164_1', c0, {c0: 16}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf247.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (1, 16)
op247.sizes = ([], [16])
arg164_1_layout = FixedLayout('cuda', torch.int64, size=[16], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
buf246_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
buf247_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op247_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = indirect0 + 512*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg164_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg164_1', get_index_1)
        constant_3 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(load_1, constant_3)
        constant_4 = ops.constant(512, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_4)
        constant_5 = ops.constant(512, torch.int64)
        ne_1 = ops.ne(minimum_1, constant_5)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg164_1', get_index_2)
        constant_6 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(load_2, constant_6)
        constant_7 = ops.constant(512, torch.int64)
        minimum_2 = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, minimum_2, constant_8)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf244', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf245', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf246', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_9 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_9)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_6, reduction)
        return store_reduction
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 16],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 16
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp13 = tl.load(in_ptr2 + (r0), None)
        tmp15 = tl.load(in_ptr3 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tl.where(tmp5, tmp4, tmp1)
        tmp7 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp6 < 0
        tmp10 = tl.where(tmp9, tmp8, tmp6)
        tl.device_assert((0 <= tmp10) & (tmp10 < 512), "index out of bounds: 0 <= tmp10 < 512")
        tmp12 = tl.load(in_ptr1 + (tmp10 + (512*r0)), None, eviction_policy='evict_last')
        tmp14 = tmp12 - tmp13
        tmp16 = tl_math.log(tmp15)
        tmp17 = tmp14 - tmp16
        tmp18 = -tmp17
        tmp19 = 0.0
        tmp20 = tl.where(tmp5, tmp18, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = tl.sum(tmp21, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp23, None)


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', 0, {}, None)]
op248.unmet_dependencies = []
op248.met_dependencies = [MemoryDep('arg164_1', c0, {c0: 16}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf248.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (1, 16)
op248.sizes = ([], [16])
arg164_1_layout = FixedLayout('cuda', torch.int64, size=[16], stride=[1])
buf248_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op248_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg164_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf248', get_index_1, reduction)
        return store_reduction
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 16],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 16
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tmp5.to(tl.int64)
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp9, None)


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 8192}, None)]
op249.unmet_dependencies = [MemoryDep('buf243', 2*c0 + 1, {c0: 8192}, None)]
op249.met_dependencies = [MemoryDep('arg163_1', 1, {}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (8192, 1)
op249.sizes = ([8192], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8192, 2], stride=[2, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
class op249_loop_body:
    var_ranges = {z0: 8192}
    index0 = 2*z0 + 1
    index1 = 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf249', get_index_2, add, None)
        return store
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (1 + (2*x0)), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (1))
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK])
        tmp3 = tmp0 + tmp2
        tl.store(out_ptr0 + (x0), tmp3, None)


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 16}, None)]
op250.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 8192}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (16, 512)
op250.sizes = ([16], [512])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
class op250_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf250', get_index_1, reduction)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 16
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 16}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf249', c0, {c0: 8192}, None),
        MemoryDep('buf250', c0, {c0: 16}, None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (16, 512)
op251.sizes = ([16], [512])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
class op251_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf250', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf251', get_index_2, reduction)
        return store_reduction
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 16
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', 0, {}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf249', 512*c0 + tmp20, {c0: 16}, None),
        MemoryDep('buf250', c0, {c0: 16}, None),
        MemoryDep('buf251', c0, {c0: 16}, None)]
op252.met_dependencies = [MemoryDep('arg165_1', c0, {c0: 16}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf252.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (1, 16)
op252.sizes = ([], [16])
arg165_1_layout = FixedLayout('cuda', torch.int64, size=[16], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16, 1], stride=[1, 16])
buf252_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op252_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = indirect0 + 512*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg165_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg165_1', get_index_1)
        constant_3 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(load_1, constant_3)
        constant_4 = ops.constant(512, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_4)
        constant_5 = ops.constant(512, torch.int64)
        ne_1 = ops.ne(minimum_1, constant_5)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg165_1', get_index_2)
        constant_6 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(load_2, constant_6)
        constant_7 = ops.constant(512, torch.int64)
        minimum_2 = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, minimum_2, constant_8)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf249', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf250', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf251', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_9 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_9)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf252', get_index_6, reduction)
        return store_reduction
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 16],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 16
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp13 = tl.load(in_ptr2 + (r0), None)
        tmp15 = tl.load(in_ptr3 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tl.where(tmp5, tmp4, tmp1)
        tmp7 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp6 < 0
        tmp10 = tl.where(tmp9, tmp8, tmp6)
        tl.device_assert((0 <= tmp10) & (tmp10 < 512), "index out of bounds: 0 <= tmp10 < 512")
        tmp12 = tl.load(in_ptr1 + (tmp10 + (512*r0)), None, eviction_policy='evict_last')
        tmp14 = tmp12 - tmp13
        tmp16 = tl_math.log(tmp15)
        tmp17 = tmp14 - tmp16
        tmp18 = -tmp17
        tmp19 = 0.0
        tmp20 = tl.where(tmp5, tmp18, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = tl.sum(tmp21, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp23, None)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', 0, {}, None)]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg165_1', c0, {c0: 16}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (1, 16)
op253.sizes = ([], [16])
arg165_1_layout = FixedLayout('cuda', torch.int64, size=[16], stride=[1])
buf253_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op253_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg165_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, reduction)
        return store_reduction
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 16],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 16
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tmp5.to(tl.int64)
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp9, None)


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', 0, {}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf247', 0, {}, None),
        MemoryDep('buf248', 0, {}, None),
        MemoryDep('buf252', 0, {}, None),
        MemoryDep('buf253', 0, {}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf254.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (1, 1)
op254.sizes = ([], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf248_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf252_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf253_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf254_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op254_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf248', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf252', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf253', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.int64)
        truediv_1 = ops.truediv(load_2, to_dtype_1)
        add = ops.add(truediv, truediv_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf254', get_index_4, mul, None)
        return store
op254 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*i64', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {4: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (0))
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tmp10 = tmp9.to(tl.float32)
        tmp11 = tmp7 / tmp10
        tmp12 = tmp5 + tmp11
        tmp13 = 0.5
        tmp14 = tmp12 * tmp13
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp14, None)



op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 1184*c0 + c1, {c0: 8, c1: 1176}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 150528}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (9408, 128)
op1.sizes = ([8, 196, 6], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 768], stride=[150528, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 128}
    index0 = 150528*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 768*z1 + 128*z2 + z3
    index3 = 1184*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf1', get_index_3, getitem)
        return store_reduction


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 1184*c0 + c1, {c0: 8, c1: 1176}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 150528}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (9408, 128)
op2.sizes = ([8, 196, 6], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 768], stride=[150528, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 128}
    index0 = 150528*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 768*z1 + 128*z2 + z3
    index3 = 1184*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf2', get_index_3, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 1184*c0 + c1, {c0: 8, c1: 1176}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 150528}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (9408, 128)
op3.sizes = ([8, 196, 6], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 768], stride=[150528, 768, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 128}
    index0 = 150528*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 768*z1 + 128*z2 + z3
    index3 = 1184*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf3', get_index_3, getitem_2)
        return store_reduction


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1568}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', 1184*c0 + c1, {c0: 8, c1: 1176}, None),
        MemoryDep('buf2', 1184*c0 + c1, {c0: 8, c1: 1176}, None),
        MemoryDep('buf3', 1184*c0 + c1, {c0: 8, c1: 1176}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1568, 6)
op4.sizes = ([8, 196], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1184*z0 + 6*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1568}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', 1184*c0 + c1, {c0: 8, c1: 1176}, None),
        MemoryDep('buf2', 1184*c0 + c1, {c0: 8, c1: 1176}, None),
        MemoryDep('buf3', 1184*c0 + c1, {c0: 8, c1: 1176}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1568, 6)
op5.sizes = ([8, 196], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1184, 6, 9472, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1184*z0 + 6*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1204224}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None),
        MemoryDep('buf4', c0, {c0: 1568}, None),
        MemoryDep('buf5', c0, {c0: 1568}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 150528}, None),
        MemoryDep('arg5_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg6_1', c1, {c0: 1568, c1: 768}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (1204224, 1)
op7.sizes = ([8, 196, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 768], stride=[150528, 768, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 150528*z0 + z1 + 196*z2
    index1 = z2
    index2 = 768*z1 + z2
    index3 = 196*z0 + z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf4', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf5', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg5_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg6_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf7', get_index_7, add_3, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 1204224}, None)]
op9.unmet_dependencies = [   MemoryDep('buf8', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (1204224, 1)
op9.sizes = ([8, 16, 196, 48], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op9_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 1204224}, None)]
op10.unmet_dependencies = [   MemoryDep('buf8', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1204224, 1)
op10.sizes = ([8, 768, 196], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf9', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op11.node.kernel = extern_kernels.bmm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 25088}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 4917248}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (25088, 196)
op12.sizes = ([25088], [196])
buf11_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op12_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf12', get_index_1, reduction)
        return store_reduction


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 25088}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf11', c0, {c0: 4917248}, None),
        MemoryDep('buf12', c0, {c0: 25088}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf13.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (25088, 196)
op13.sizes = ([25088], [196])
buf11_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op13_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf13', get_index_2, reduction)
        return store_reduction


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 115248}, None)]
op14.unmet_dependencies = []
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (115248, 1)
op14.sizes = ([196, 196, 3], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op14_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf14', get_index_6, where_2, None)
        return store


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c1, {c0: 8, c1: 115248}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (921984, 1)
op15.sizes = ([8, 115248], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op15_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 921984}, None)]
op16.unmet_dependencies = [   MemoryDep('buf15', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (921984, 1)
op16.sizes = ([307328, 3], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op16_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf16', get_index_1, load, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op17.node.kernel = extern_kernels.mm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 25088}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op18.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 1568, c1: 16}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (25088, 196)
op18.sizes = ([1568, 16], [196])
buf17_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op18_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_2, reduction)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 25088}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf17', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf18', c0, {c0: 25088}, None)]
op19.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 1568, c1: 16}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (25088, 196)
op19.sizes = ([1568, 16], [196])
buf17_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op19_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf18', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, reduction)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf11', c0, {c0: 4917248}, None),
        MemoryDep('buf12', c0, {c0: 25088}, None),
        MemoryDep('buf13', c0, {c0: 25088}, None),
        MemoryDep('buf17', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf18', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf19', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg9_1', c1, {c0: 8, c1: 16}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (4917248, 1)
op20.sizes = ([8, 16, 196, 196], [])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf17_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf12', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf13', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg10_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf17', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg9_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf18', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf19', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf20', get_index_9, add_1, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 25088}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (25088, 196)
op21.sizes = ([128, 196], [196])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op21_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf21', get_index_1, reduction)
        return store_reduction


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op22.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf20', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf21', c0, {c0: 25088}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (4917248, 1)
op23.sizes = ([128, 196, 196], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op23_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf21', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, truediv, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1204224}, None)]
op24.unmet_dependencies = [   MemoryDep('buf22', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1204224, 1)
op24.sizes = ([8, 16, 196, 48], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op24_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf24', get_index_1, load, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf23', mode=None), StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.bmm


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 1204224}, None)]
op26.unmet_dependencies = [   MemoryDep('buf25', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1204224, 1)
op26.sizes = ([8, 196, 16, 48], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf26', get_index_1, load, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1204224}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf0', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None),
        MemoryDep('buf27', c0, {c0: 1204224}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 150528}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (1204224, 1)
op28.sizes = ([8, 196, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 768], stride=[150528, 768, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 150528*z0 + z1 + 196*z2
    index1 = z2
    index2 = 768*z1 + z2
    index3 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf27', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg13_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf28', get_index_5, add_3, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1568}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 1204224}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1568, 768)
op29.sizes = ([1568], [768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op29_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_1, getitem)
        return store_reduction


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 1568}, None)]
op30.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 1204224}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf30.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (1568, 768)
op30.sizes = ([1568], [768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op30_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf30', get_index_1, getitem_1)
        return store_reduction


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1204224}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf29', c0, {c0: 1568}, None),
        MemoryDep('buf30', c0, {c0: 1568}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg15_1', c1, {c0: 1568, c1: 768}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (1204224, 1)
op32.sizes = ([1568, 768], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op32_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf29', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf30', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, add_1, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.mm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 4816896}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 4816896}, None)]
op34.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 1568, c1: 3072}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (4816896, 1)
op34.sizes = ([1568, 3072], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op34_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg17_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf34', get_index_4, mul_2, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1568}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf35', c0, {c0: 1204224}, None)]
op36.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 1568, c1: 768}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf36.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1568, 768)
op36.sizes = ([1568], [768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op36_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf36', get_index_3, getitem)
        return store_reduction


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1568}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf35', c0, {c0: 1204224}, None)]
op37.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 1568, c1: 768}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1568, 768)
op37.sizes = ([1568], [768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op37_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem_1)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1204224}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf35', c0, {c0: 1204224}, None),
        MemoryDep('buf36', c0, {c0: 1568}, None),
        MemoryDep('buf37', c0, {c0: 1568}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg20_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg21_1', c1, {c0: 1568, c1: 768}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (1204224, 1)
op39.sizes = ([1568, 768], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op39_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf36', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf37', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg20_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg21_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf39', get_index_7, add_3, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 1204224}, None)]
op41.unmet_dependencies = [   MemoryDep('buf40', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (1204224, 1)
op41.sizes = ([8, 16, 196, 48], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, load, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1204224}, None)]
op42.unmet_dependencies = [   MemoryDep('buf40', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (1204224, 1)
op42.sizes = ([8, 768, 196], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf42', get_index_1, load, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf41', mode=None), StarDep(name='buf42', mode=None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op43.node.kernel = extern_kernels.bmm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 25088}, None)]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 4917248}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (25088, 196)
op44.sizes = ([25088], [196])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op44_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, reduction)
        return store_reduction


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 25088}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 4917248}, None),
        MemoryDep('buf44', c0, {c0: 25088}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf45.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (25088, 196)
op45.sizes = ([25088], [196])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op45_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf44', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_2, reduction)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 115248}, None)]
op46.unmet_dependencies = []
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (115248, 1)
op46.sizes = ([196, 196, 3], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op46_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf46', get_index_6, where_2, None)
        return store


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c1, {c0: 8, c1: 115248}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (921984, 1)
op47.sizes = ([8, 115248], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf47', get_index_1, load, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 921984}, None)]
op48.unmet_dependencies = [   MemoryDep('buf47', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (921984, 1)
op48.sizes = ([307328, 3], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op48_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf48', get_index_1, load, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 25088}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op50.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 1568, c1: 16}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (25088, 196)
op50.sizes = ([1568, 16], [196])
buf49_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op50_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_2, reduction)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 25088}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf49', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf50', c0, {c0: 25088}, None)]
op51.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 1568, c1: 16}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (25088, 196)
op51.sizes = ([1568, 16], [196])
buf49_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op51_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf50', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, reduction)
        return store_reduction


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 4917248}, None),
        MemoryDep('buf44', c0, {c0: 25088}, None),
        MemoryDep('buf45', c0, {c0: 25088}, None),
        MemoryDep('buf49', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf50', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf51', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg25_1', c1, {c0: 8, c1: 16}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (4917248, 1)
op52.sizes = ([8, 16, 196, 196], [])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf49_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg25_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf44', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf45', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg25_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf49', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg24_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf50', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf51', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf52', get_index_9, add_1, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 25088}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (25088, 196)
op53.sizes = ([128, 196], [196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op53_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, reduction)
        return store_reduction


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op54.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf52', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf53', c0, {c0: 25088}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (4917248, 1)
op55.sizes = ([128, 196, 196], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op55_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf55', get_index_2, truediv, None)
        return store


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1204224}, None)]
op56.unmet_dependencies = [   MemoryDep('buf54', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (1204224, 1)
op56.sizes = ([8, 16, 196, 48], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf56', get_index_1, load, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf55', mode=None), StarDep(name='buf56', mode=None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = extern_kernels.bmm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1204224}, None)]
op58.unmet_dependencies = [   MemoryDep('buf57', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1204224, 1)
op58.sizes = ([8, 196, 16, 48], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1204224}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf35', c0, {c0: 1204224}, None),
        MemoryDep('buf59', c0, {c0: 1204224}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg28_1', c1, {c0: 1568, c1: 768}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (1204224, 1)
op60.sizes = ([1568, 768], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op60_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf59', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg28_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf60', get_index_5, add_3, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 1568}, None)]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 1204224}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1568, 768)
op61.sizes = ([1568], [768])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op61_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_1, getitem)
        return store_reduction


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1568}, None)]
op62.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 1204224}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1568, 768)
op62.sizes = ([1568], [768])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op62_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf62', get_index_1, getitem_1)
        return store_reduction


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 1204224}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1568}, None),
        MemoryDep('buf62', c0, {c0: 1568}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg30_1', c1, {c0: 1568, c1: 768}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (1204224, 1)
op64.sizes = ([1568, 768], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op64_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf61', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf62', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf64', get_index_5, add_1, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.mm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 4816896}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 4816896}, None)]
op66.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 1568, c1: 3072}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (4816896, 1)
op66.sizes = ([1568, 3072], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op66_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf65', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg32_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf66', get_index_4, mul_2, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1568}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 1204224}, None),
        MemoryDep('buf67', c0, {c0: 1204224}, None)]
op68.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 1568, c1: 768}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (1568, 768)
op68.sizes = ([1568], [768])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op68_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem)
        return store_reduction


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1568}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 1204224}, None),
        MemoryDep('buf67', c0, {c0: 1204224}, None)]
op69.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 1568, c1: 768}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (1568, 768)
op69.sizes = ([1568], [768])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op69_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf69', get_index_3, getitem_1)
        return store_reduction


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 1204224}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 1204224}, None),
        MemoryDep('buf67', c0, {c0: 1204224}, None),
        MemoryDep('buf68', c0, {c0: 1568}, None),
        MemoryDep('buf69', c0, {c0: 1568}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg35_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg36_1', c1, {c0: 1568, c1: 768}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (1204224, 1)
op71.sizes = ([1568, 768], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op71_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf68', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf69', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg35_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg36_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf71', get_index_7, add_3, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1204224}, None)]
op73.unmet_dependencies = [   MemoryDep('buf72', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (1204224, 1)
op73.sizes = ([8, 16, 196, 48], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf73', get_index_1, load, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1204224}, None)]
op74.unmet_dependencies = [   MemoryDep('buf72', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1204224, 1)
op74.sizes = ([8, 768, 196], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op74_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf74', get_index_1, load, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.bmm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 25088}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 4917248}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (25088, 196)
op76.sizes = ([25088], [196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op76_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_1, reduction)
        return store_reduction


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 25088}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 4917248}, None),
        MemoryDep('buf76', c0, {c0: 25088}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf77.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (25088, 196)
op77.sizes = ([25088], [196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op77_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_2, reduction)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 115248}, None)]
op78.unmet_dependencies = []
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (115248, 1)
op78.sizes = ([196, 196, 3], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op78_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf78', get_index_6, where_2, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c1, {c0: 8, c1: 115248}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (921984, 1)
op79.sizes = ([8, 115248], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op79_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf79', get_index_1, load, None)
        return store


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 921984}, None)]
op80.unmet_dependencies = [   MemoryDep('buf79', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (921984, 1)
op80.sizes = ([307328, 3], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op80_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf80', get_index_1, load, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 25088}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op82.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 1568, c1: 16}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (25088, 196)
op82.sizes = ([1568, 16], [196])
buf81_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op82_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf82', get_index_2, reduction)
        return store_reduction


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 25088}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf81', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf82', c0, {c0: 25088}, None)]
op83.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 1568, c1: 16}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (25088, 196)
op83.sizes = ([1568, 16], [196])
buf81_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op83_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf82', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_3, reduction)
        return store_reduction


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 4917248}, None),
        MemoryDep('buf76', c0, {c0: 25088}, None),
        MemoryDep('buf77', c0, {c0: 25088}, None),
        MemoryDep('buf81', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf82', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf83', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg40_1', c1, {c0: 8, c1: 16}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (4917248, 1)
op84.sizes = ([8, 16, 196, 196], [])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf81_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg40_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf75', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf76', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf77', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg40_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf81', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg39_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf82', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf83', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf84', get_index_9, add_1, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 25088}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (25088, 196)
op85.sizes = ([128, 196], [196])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op85_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_1, reduction)
        return store_reduction


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op86.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf84', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf85', c0, {c0: 25088}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (4917248, 1)
op87.sizes = ([128, 196, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op87_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf85', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf87', get_index_2, truediv, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1204224}, None)]
op88.unmet_dependencies = [   MemoryDep('buf86', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1204224, 1)
op88.sizes = ([8, 16, 196, 48], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf88', get_index_1, load, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.bmm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1204224}, None)]
op90.unmet_dependencies = [   MemoryDep('buf89', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1204224, 1)
op90.sizes = ([8, 196, 16, 48], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1204224}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 1204224}, None),
        MemoryDep('buf67', c0, {c0: 1204224}, None),
        MemoryDep('buf91', c0, {c0: 1204224}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg43_1', c1, {c0: 1568, c1: 768}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (1204224, 1)
op92.sizes = ([1568, 768], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op92_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf91', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg43_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1568}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1204224}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1568, 768)
op93.sizes = ([1568], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op93_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 1568}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1204224}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (1568, 768)
op94.sizes = ([1568], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op94_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1204224}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1204224}, None),
        MemoryDep('buf93', c0, {c0: 1568}, None),
        MemoryDep('buf94', c0, {c0: 1568}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg45_1', c1, {c0: 1568, c1: 768}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1204224, 1)
op96.sizes = ([1568, 768], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op96_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 4816896}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 4816896}, None)]
op98.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 1568, c1: 3072}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (4816896, 1)
op98.sizes = ([1568, 3072], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op98_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg47_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 1568}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1204224}, None),
        MemoryDep('buf99', c0, {c0: 1204224}, None)]
op100.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 1568, c1: 768}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (1568, 768)
op100.sizes = ([1568], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op100_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg49_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 1568}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1204224}, None),
        MemoryDep('buf99', c0, {c0: 1204224}, None)]
op101.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 1568, c1: 768}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (1568, 768)
op101.sizes = ([1568], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op101_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg49_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 1204224}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 1568}, None),
        MemoryDep('buf101', c0, {c0: 1568}, None),
        MemoryDep('buf92', c0, {c0: 1204224}, None),
        MemoryDep('buf99', c0, {c0: 1204224}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg49_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg50_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg51_1', c1, {c0: 1568, c1: 768}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (1204224, 1)
op103.sizes = ([1568, 768], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op103_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg49_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg50_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg51_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 1204224}, None)]
op105.unmet_dependencies = [   MemoryDep('buf104', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (1204224, 1)
op105.sizes = ([8, 16, 196, 48], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op105_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 1204224}, None)]
op106.unmet_dependencies = [   MemoryDep('buf104', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (1204224, 1)
op106.sizes = ([8, 768, 196], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op106_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf106', get_index_1, load, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf105', mode=None), StarDep(name='buf106', mode=None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op107.node.kernel = extern_kernels.bmm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 25088}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 4917248}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (25088, 196)
op108.sizes = ([25088], [196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op108_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_1, reduction)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 25088}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 4917248}, None),
        MemoryDep('buf108', c0, {c0: 25088}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf109.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (25088, 196)
op109.sizes = ([25088], [196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op109_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_2, reduction)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 115248}, None)]
op110.unmet_dependencies = []
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (115248, 1)
op110.sizes = ([196, 196, 3], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op110_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf110', get_index_6, where_2, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c1, {c0: 8, c1: 115248}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (921984, 1)
op111.sizes = ([8, 115248], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 921984}, None)]
op112.unmet_dependencies = [   MemoryDep('buf111', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (921984, 1)
op112.sizes = ([307328, 3], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op112_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 25088}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op114.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 1568, c1: 16}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (25088, 196)
op114.sizes = ([1568, 16], [196])
buf113_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op114_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_2, reduction)
        return store_reduction


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 25088}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf113', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf114', c0, {c0: 25088}, None)]
op115.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 1568, c1: 16}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (25088, 196)
op115.sizes = ([1568, 16], [196])
buf113_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op115_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf114', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_3, reduction)
        return store_reduction


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 4917248}, None),
        MemoryDep('buf108', c0, {c0: 25088}, None),
        MemoryDep('buf109', c0, {c0: 25088}, None),
        MemoryDep('buf113', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf114', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf115', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg55_1', c1, {c0: 8, c1: 16}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (4917248, 1)
op116.sizes = ([8, 16, 196, 196], [])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf113_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op116_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg55_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf108', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf109', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg55_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf113', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg54_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf114', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf115', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf116', get_index_9, add_1, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 25088}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (25088, 196)
op117.sizes = ([128, 196], [196])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op117_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, reduction)
        return store_reduction


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op118.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118.node.kernel = extern_kernels.mm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf117', c0, {c0: 25088}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (4917248, 1)
op119.sizes = ([128, 196, 196], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op119_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf117', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf119', get_index_2, truediv, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1204224}, None)]
op120.unmet_dependencies = [   MemoryDep('buf118', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1204224, 1)
op120.sizes = ([8, 16, 196, 48], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf120', get_index_1, load, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.node.kernel = extern_kernels.bmm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1204224}, None)]
op122.unmet_dependencies = [   MemoryDep('buf121', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1204224, 1)
op122.sizes = ([8, 196, 16, 48], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, load, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 1204224}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 1204224}, None),
        MemoryDep('buf92', c0, {c0: 1204224}, None),
        MemoryDep('buf99', c0, {c0: 1204224}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg49_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg58_1', c1, {c0: 1568, c1: 768}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (1204224, 1)
op124.sizes = ([1568, 768], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op124_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg49_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf123', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg58_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, add_3, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 1568}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 1204224}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (1568, 768)
op125.sizes = ([1568], [768])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op125_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_1, getitem)
        return store_reduction


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1568}, None)]
op126.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 1204224}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (1568, 768)
op126.sizes = ([1568], [768])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op126_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf126', get_index_1, getitem_1)
        return store_reduction


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1204224}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 1204224}, None),
        MemoryDep('buf125', c0, {c0: 1568}, None),
        MemoryDep('buf126', c0, {c0: 1568}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 1568, c1: 768}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1204224, 1)
op128.sizes = ([1568, 768], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op128_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf126', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf128', get_index_5, add_1, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 4816896}, None)]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 4816896}, None)]
op130.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 1568, c1: 3072}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (4816896, 1)
op130.sizes = ([1568, 3072], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op130_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg62_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf130', get_index_4, mul_2, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op131.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 1568}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 1204224}, None),
        MemoryDep('buf131', c0, {c0: 1204224}, None)]
op132.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 1568, c1: 768}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (1568, 768)
op132.sizes = ([1568], [768])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op132_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf132', get_index_3, getitem)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 1568}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 1204224}, None),
        MemoryDep('buf131', c0, {c0: 1204224}, None)]
op133.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 1568, c1: 768}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (1568, 768)
op133.sizes = ([1568], [768])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op133_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf133', get_index_3, getitem_1)
        return store_reduction


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 1204224}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 1204224}, None),
        MemoryDep('buf131', c0, {c0: 1204224}, None),
        MemoryDep('buf132', c0, {c0: 1568}, None),
        MemoryDep('buf133', c0, {c0: 1568}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg65_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg66_1', c1, {c0: 1568, c1: 768}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (1204224, 1)
op135.sizes = ([1568, 768], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op135_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf132', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf133', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg65_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg66_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf135', get_index_7, add_3, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 1204224}, None)]
op137.unmet_dependencies = [   MemoryDep('buf136', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (1204224, 1)
op137.sizes = ([8, 16, 196, 48], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf137', get_index_1, load, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1204224}, None)]
op138.unmet_dependencies = [   MemoryDep('buf136', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1204224, 1)
op138.sizes = ([8, 768, 196], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 25088}, None)]
op140.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 4917248}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (25088, 196)
op140.sizes = ([25088], [196])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op140_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_1, reduction)
        return store_reduction


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 25088}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 4917248}, None),
        MemoryDep('buf140', c0, {c0: 25088}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf141.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (25088, 196)
op141.sizes = ([25088], [196])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op141_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf140', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_2, reduction)
        return store_reduction


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 115248}, None)]
op142.unmet_dependencies = []
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (115248, 1)
op142.sizes = ([196, 196, 3], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op142_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf142', get_index_6, where_2, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c1, {c0: 8, c1: 115248}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (921984, 1)
op143.sizes = ([8, 115248], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 921984}, None)]
op144.unmet_dependencies = [   MemoryDep('buf143', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (921984, 1)
op144.sizes = ([307328, 3], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op144_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf144', get_index_1, load, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op145.node.kernel = extern_kernels.mm


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 25088}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op146.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 1568, c1: 16}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (25088, 196)
op146.sizes = ([1568, 16], [196])
buf145_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op146_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_2, reduction)
        return store_reduction


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 25088}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf145', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf146', c0, {c0: 25088}, None)]
op147.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 1568, c1: 16}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (25088, 196)
op147.sizes = ([1568, 16], [196])
buf145_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op147_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf146', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_3, reduction)
        return store_reduction


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 4917248}, None),
        MemoryDep('buf140', c0, {c0: 25088}, None),
        MemoryDep('buf141', c0, {c0: 25088}, None),
        MemoryDep('buf145', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf146', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf147', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg70_1', c1, {c0: 8, c1: 16}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (4917248, 1)
op148.sizes = ([8, 16, 196, 196], [])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf145_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op148_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg70_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf140', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf141', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg70_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf145', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg69_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf146', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf147', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf148', get_index_9, add_1, None)
        return store


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 25088}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (25088, 196)
op149.sizes = ([128, 196], [196])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op149_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf149', get_index_1, reduction)
        return store_reduction


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op150.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf148', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf149', c0, {c0: 25088}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (4917248, 1)
op151.sizes = ([128, 196, 196], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op151_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf149', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf151', get_index_2, truediv, None)
        return store


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 1204224}, None)]
op152.unmet_dependencies = [   MemoryDep('buf150', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (1204224, 1)
op152.sizes = ([8, 16, 196, 48], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf152', get_index_1, load, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf151', mode=None), StarDep(name='buf152', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = extern_kernels.bmm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1204224}, None)]
op154.unmet_dependencies = [   MemoryDep('buf153', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1204224, 1)
op154.sizes = ([8, 196, 16, 48], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf154', get_index_1, load, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 1204224}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 1204224}, None),
        MemoryDep('buf131', c0, {c0: 1204224}, None),
        MemoryDep('buf155', c0, {c0: 1204224}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg73_1', c1, {c0: 1568, c1: 768}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf156.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op156.group.device = cuda:0
op156.group.iteration = (1204224, 1)
op156.sizes = ([1568, 768], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op156_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf155', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg73_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf156', get_index_5, add_3, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1568}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 1204224}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf157.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1568, 768)
op157.sizes = ([1568], [768])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op157_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, getitem)
        return store_reduction


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1568}, None)]
op158.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 1204224}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf158.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1568, 768)
op158.sizes = ([1568], [768])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op158_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf158', get_index_1, getitem_1)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 1204224}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 1204224}, None),
        MemoryDep('buf157', c0, {c0: 1568}, None),
        MemoryDep('buf158', c0, {c0: 1568}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 1568, c1: 768}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (1204224, 1)
op160.sizes = ([1568, 768], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op160_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf157', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf158', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_1, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 4816896}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 4816896}, None)]
op162.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 1568, c1: 3072}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (4816896, 1)
op162.sizes = ([1568, 3072], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op162_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg77_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf162', get_index_4, mul_2, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op163.node.kernel = extern_kernels.mm


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 1568}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 1204224}, None),
        MemoryDep('buf163', c0, {c0: 1204224}, None)]
op164.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 1568, c1: 768}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (1568, 768)
op164.sizes = ([1568], [768])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op164_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem)
        return store_reduction


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 1568}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 1204224}, None),
        MemoryDep('buf163', c0, {c0: 1204224}, None)]
op165.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 1568, c1: 768}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1568, 768)
op165.sizes = ([1568], [768])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op165_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf165', get_index_3, getitem_1)
        return store_reduction


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 1204224}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 1204224}, None),
        MemoryDep('buf163', c0, {c0: 1204224}, None),
        MemoryDep('buf164', c0, {c0: 1568}, None),
        MemoryDep('buf165', c0, {c0: 1568}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg80_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg81_1', c1, {c0: 1568, c1: 768}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (1204224, 1)
op167.sizes = ([1568, 768], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op167_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf164', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf165', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf167', get_index_7, add_3, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = extern_kernels.mm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1204224}, None)]
op169.unmet_dependencies = [   MemoryDep('buf168', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1204224, 1)
op169.sizes = ([8, 16, 196, 48], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf169', get_index_1, load, None)
        return store


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 1204224}, None)]
op170.unmet_dependencies = [   MemoryDep('buf168', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (1204224, 1)
op170.sizes = ([8, 768, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op170_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf170', get_index_1, load, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf169', mode=None), StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
    ]
]
op171.node.kernel = extern_kernels.bmm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 25088}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 4917248}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (25088, 196)
op172.sizes = ([25088], [196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op172_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_1, reduction)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 25088}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 4917248}, None),
        MemoryDep('buf172', c0, {c0: 25088}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf173.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (25088, 196)
op173.sizes = ([25088], [196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op173_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_2, reduction)
        return store_reduction


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 115248}, None)]
op174.unmet_dependencies = []
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (115248, 1)
op174.sizes = ([196, 196, 3], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op174_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf174', get_index_6, where_2, None)
        return store


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c1, {c0: 8, c1: 115248}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (921984, 1)
op175.sizes = ([8, 115248], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf175', get_index_1, load, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 921984}, None)]
op176.unmet_dependencies = [   MemoryDep('buf175', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (921984, 1)
op176.sizes = ([307328, 3], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op176_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf176', get_index_1, load, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf177.users = [
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
    ]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 25088}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op178.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 1568, c1: 16}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (25088, 196)
op178.sizes = ([1568, 16], [196])
buf177_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op178_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf178', get_index_2, reduction)
        return store_reduction


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 25088}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf177', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf178', c0, {c0: 25088}, None)]
op179.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 1568, c1: 16}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (25088, 196)
op179.sizes = ([1568, 16], [196])
buf177_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op179_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf178', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_3, reduction)
        return store_reduction


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 4917248}, None),
        MemoryDep('buf172', c0, {c0: 25088}, None),
        MemoryDep('buf173', c0, {c0: 25088}, None),
        MemoryDep('buf177', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf178', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf179', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op180.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg85_1', c1, {c0: 8, c1: 16}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (4917248, 1)
op180.sizes = ([8, 16, 196, 196], [])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf177_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg85_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf171', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf172', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf173', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg85_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf177', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg84_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf178', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf179', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf180', get_index_9, add_1, None)
        return store


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 25088}, None)]
op181.unmet_dependencies = [MemoryDep('buf180', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (25088, 196)
op181.sizes = ([128, 196], [196])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op181_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, reduction)
        return store_reduction


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op182.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf180', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf181', c0, {c0: 25088}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (4917248, 1)
op183.sizes = ([128, 196, 196], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op183_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf181', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf183', get_index_2, truediv, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 1204224}, None)]
op184.unmet_dependencies = [   MemoryDep('buf182', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (1204224, 1)
op184.sizes = ([8, 16, 196, 48], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf184', get_index_1, load, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf183', mode=None), StarDep(name='buf184', mode=None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.bmm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 1204224}, None)]
op186.unmet_dependencies = [   MemoryDep('buf185', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (1204224, 1)
op186.sizes = ([8, 196, 16, 48], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op186_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf186', get_index_1, load, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False)]
]
op187.node.kernel = extern_kernels.mm


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 1204224}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 1204224}, None),
        MemoryDep('buf163', c0, {c0: 1204224}, None),
        MemoryDep('buf187', c0, {c0: 1204224}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg88_1', c1, {c0: 1568, c1: 768}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (1204224, 1)
op188.sizes = ([1568, 768], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op188_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf187', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg88_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, add_3, None)
        return store


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 1568}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 1204224}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf189.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (1568, 768)
op189.sizes = ([1568], [768])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op189_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf189', get_index_1, getitem)
        return store_reduction


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 1568}, None)]
op190.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 1204224}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf190.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (1568, 768)
op190.sizes = ([1568], [768])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op190_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf190', get_index_1, getitem_1)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1204224}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 1204224}, None),
        MemoryDep('buf189', c0, {c0: 1568}, None),
        MemoryDep('buf190', c0, {c0: 1568}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg89_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg90_1', c1, {c0: 1568, c1: 768}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1204224, 1)
op192.sizes = ([1568, 768], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op192_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf189', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf190', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_1, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.mm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 4816896}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 4816896}, None)]
op194.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 1568, c1: 3072}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (4816896, 1)
op194.sizes = ([1568, 3072], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op194_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf193', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg92_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf194', get_index_4, mul_2, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op195.node.kernel = extern_kernels.mm


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 1568}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 1204224}, None),
        MemoryDep('buf195', c0, {c0: 1204224}, None)]
op196.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 1568, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (1568, 768)
op196.sizes = ([1568], [768])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op196_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf196', get_index_3, getitem)
        return store_reduction


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 1568}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 1204224}, None),
        MemoryDep('buf195', c0, {c0: 1204224}, None)]
op197.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 1568, c1: 768}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (1568, 768)
op197.sizes = ([1568], [768])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op197_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf197', get_index_3, getitem_1)
        return store_reduction


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1204224}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 1204224}, None),
        MemoryDep('buf195', c0, {c0: 1204224}, None),
        MemoryDep('buf196', c0, {c0: 1568}, None),
        MemoryDep('buf197', c0, {c0: 1568}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg95_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 1568, c1: 768}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (1204224, 1)
op199.sizes = ([1568, 768], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op199_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf196', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf197', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg95_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg96_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf199', get_index_7, add_3, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 1204224}, None)]
op201.unmet_dependencies = [   MemoryDep('buf200', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (1204224, 1)
op201.sizes = ([8, 16, 196, 48], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op201_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf201', get_index_1, load, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 1204224}, None)]
op202.unmet_dependencies = [   MemoryDep('buf200', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (1204224, 1)
op202.sizes = ([8, 768, 196], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf202', get_index_1, load, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf202', mode=None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op203.node.kernel = extern_kernels.bmm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 25088}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 4917248}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (25088, 196)
op204.sizes = ([25088], [196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op204_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_1, reduction)
        return store_reduction


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 25088}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf203', c0, {c0: 4917248}, None),
        MemoryDep('buf204', c0, {c0: 25088}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf205.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (25088, 196)
op205.sizes = ([25088], [196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op205_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf204', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf205', get_index_2, reduction)
        return store_reduction


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 115248}, None)]
op206.unmet_dependencies = []
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (115248, 1)
op206.sizes = ([196, 196, 3], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op206_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf206', get_index_6, where_2, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c1, {c0: 8, c1: 115248}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (921984, 1)
op207.sizes = ([8, 115248], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op207_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 921984}, None)]
op208.unmet_dependencies = [   MemoryDep('buf207', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (921984, 1)
op208.sizes = ([307328, 3], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op208_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf208', get_index_1, load, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 25088}, None)]
op210.unmet_dependencies = [MemoryDep('buf209', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op210.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 1568, c1: 16}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (25088, 196)
op210.sizes = ([1568, 16], [196])
buf209_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op210_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_2, reduction)
        return store_reduction


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 25088}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf209', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf210', c0, {c0: 25088}, None)]
op211.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 1568, c1: 16}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (25088, 196)
op211.sizes = ([1568, 16], [196])
buf209_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op211_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf210', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_3, reduction)
        return store_reduction


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf203', c0, {c0: 4917248}, None),
        MemoryDep('buf204', c0, {c0: 25088}, None),
        MemoryDep('buf205', c0, {c0: 25088}, None),
        MemoryDep('buf209', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf210', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf211', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 16}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (4917248, 1)
op212.sizes = ([8, 16, 196, 196], [])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf209_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op212_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg100_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf204', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf205', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg100_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf209', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg99_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf210', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf211', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf212', get_index_9, add_1, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 25088}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (25088, 196)
op213.sizes = ([128, 196], [196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op213_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, reduction)
        return store_reduction


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op214.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = extern_kernels.mm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf212', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf213', c0, {c0: 25088}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (4917248, 1)
op215.sizes = ([128, 196, 196], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op215_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf215', get_index_2, truediv, None)
        return store


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 1204224}, None)]
op216.unmet_dependencies = [   MemoryDep('buf214', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1204224, 1)
op216.sizes = ([8, 16, 196, 48], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op216_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf216', get_index_1, load, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.node.kernel = extern_kernels.bmm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 1204224}, None)]
op218.unmet_dependencies = [   MemoryDep('buf217', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (1204224, 1)
op218.sizes = ([8, 196, 16, 48], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op218_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf218', get_index_1, load, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.node.kernel = extern_kernels.mm


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 1204224}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 1204224}, None),
        MemoryDep('buf195', c0, {c0: 1204224}, None),
        MemoryDep('buf219', c0, {c0: 1204224}, None)]
op220.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg94_1', c1, {c0: 1568, c1: 768}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (1204224, 1)
op220.sizes = ([1568, 768], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op220_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf219', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg103_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf220', get_index_5, add_3, None)
        return store


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1568}, None)]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 1204224}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf221.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1568, 768)
op221.sizes = ([1568], [768])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op221_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf221', get_index_1, getitem)
        return store_reduction


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 1568}, None)]
op222.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 1204224}, None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf222.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (1568, 768)
op222.sizes = ([1568], [768])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op222_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf222', get_index_1, getitem_1)
        return store_reduction


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 1204224}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf221', c0, {c0: 1568}, None),
        MemoryDep('buf222', c0, {c0: 1568}, None)]
op224.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg105_1', c1, {c0: 1568, c1: 768}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (1204224, 1)
op224.sizes = ([1568, 768], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op224_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf222', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf224', get_index_5, add_1, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False)]
]
op225.node.kernel = extern_kernels.mm


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 4816896}, None)]
op226.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 4816896}, None)]
op226.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 1568, c1: 3072}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (4816896, 1)
op226.sizes = ([1568, 3072], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op226_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf225', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg107_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf226', get_index_4, mul_2, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op227.node.kernel = extern_kernels.mm


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 1568}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf227', c0, {c0: 1204224}, None)]
op228.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 1568, c1: 768}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf228.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (1568, 768)
op228.sizes = ([1568], [768])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op228_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_3, getitem)
        return store_reduction


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 1568}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf227', c0, {c0: 1204224}, None)]
op229.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 1568, c1: 768}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (1568, 768)
op229.sizes = ([1568], [768])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op229_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf229', get_index_3, getitem_1)
        return store_reduction


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 1204224}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf227', c0, {c0: 1204224}, None),
        MemoryDep('buf228', c0, {c0: 1568}, None),
        MemoryDep('buf229', c0, {c0: 1568}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg110_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg111_1', c1, {c0: 1568, c1: 768}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf231.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (1204224, 1)
op231.sizes = ([1568, 768], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op231_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf228', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf229', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg110_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg111_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf231', get_index_7, add_3, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op232.node.kernel = extern_kernels.mm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 1204224}, None)]
op233.unmet_dependencies = [   MemoryDep('buf232', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (1204224, 1)
op233.sizes = ([8, 16, 196, 48], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op233_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf233', get_index_1, load, None)
        return store


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 1204224}, None)]
op234.unmet_dependencies = [   MemoryDep('buf232', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (1204224, 1)
op234.sizes = ([8, 768, 196], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op234_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf234', get_index_1, load, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf233', mode=None), StarDep(name='buf234', mode=None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.bmm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 25088}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 4917248}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (25088, 196)
op236.sizes = ([25088], [196])
buf235_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op236_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_1, reduction)
        return store_reduction


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 25088}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf235', c0, {c0: 4917248}, None),
        MemoryDep('buf236', c0, {c0: 25088}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf237.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (25088, 196)
op237.sizes = ([25088], [196])
buf235_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op237_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf236', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf237', get_index_2, reduction)
        return store_reduction


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 115248}, None)]
op238.unmet_dependencies = []
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (115248, 1)
op238.sizes = ([196, 196, 3], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op238_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf238', get_index_6, where_2, None)
        return store


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c1, {c0: 8, c1: 115248}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (921984, 1)
op239.sizes = ([8, 115248], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf239', get_index_1, load, None)
        return store


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 921984}, None)]
op240.unmet_dependencies = [   MemoryDep('buf239', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (921984, 1)
op240.sizes = ([307328, 3], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op240_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
    ]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 25088}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op242.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 1568, c1: 16}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (25088, 196)
op242.sizes = ([1568, 16], [196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op242_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_2, reduction)
        return store_reduction


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 25088}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf241', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf242', c0, {c0: 25088}, None)]
op243.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 1568, c1: 16}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (25088, 196)
op243.sizes = ([1568, 16], [196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op243_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf242', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_3, reduction)
        return store_reduction


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf235', c0, {c0: 4917248}, None),
        MemoryDep('buf236', c0, {c0: 25088}, None),
        MemoryDep('buf237', c0, {c0: 25088}, None),
        MemoryDep('buf241', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf242', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf243', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg115_1', c1, {c0: 8, c1: 16}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (4917248, 1)
op244.sizes = ([8, 16, 196, 196], [])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf241_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op244_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg115_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf235', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf236', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf237', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg115_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf241', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg114_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf242', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf243', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf244', get_index_9, add_1, None)
        return store


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 25088}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (25088, 196)
op245.sizes = ([128, 196], [196])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op245_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_1, reduction)
        return store_reduction


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op246.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf244', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf245', c0, {c0: 25088}, None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (4917248, 1)
op247.sizes = ([128, 196, 196], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op247_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf247', get_index_2, truediv, None)
        return store


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 1204224}, None)]
op248.unmet_dependencies = [   MemoryDep('buf246', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (1204224, 1)
op248.sizes = ([8, 16, 196, 48], [])
buf246_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf248', get_index_1, load, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf247', mode=None), StarDep(name='buf248', mode=None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.bmm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 1204224}, None)]
op250.unmet_dependencies = [   MemoryDep('buf249', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (1204224, 1)
op250.sizes = ([8, 196, 16, 48], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf250', get_index_1, load, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1204224}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf227', c0, {c0: 1204224}, None),
        MemoryDep('buf251', c0, {c0: 1204224}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 768}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (1204224, 1)
op252.sizes = ([1568, 768], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op252_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf251', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg118_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, add_3, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 1568}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 1204224}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf253.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (1568, 768)
op253.sizes = ([1568], [768])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op253_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, getitem)
        return store_reduction


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 1568}, None)]
op254.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 1204224}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf254.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (1568, 768)
op254.sizes = ([1568], [768])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op254_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_1, getitem_1)
        return store_reduction


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 1204224}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1204224}, None),
        MemoryDep('buf253', c0, {c0: 1568}, None),
        MemoryDep('buf254', c0, {c0: 1568}, None)]
op256.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 1568, c1: 768}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (1204224, 1)
op256.sizes = ([1568, 768], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op256_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf254', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf256', get_index_5, add_1, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.mm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 4816896}, None)]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 4816896}, None)]
op258.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 1568, c1: 3072}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (4816896, 1)
op258.sizes = ([1568, 3072], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op258_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf257', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg122_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf258', get_index_4, mul_2, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 1568}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1204224}, None),
        MemoryDep('buf259', c0, {c0: 1204224}, None)]
op260.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 1568, c1: 768}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (1568, 768)
op260.sizes = ([1568], [768])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op260_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 1568}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1204224}, None),
        MemoryDep('buf259', c0, {c0: 1204224}, None)]
op261.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 1568, c1: 768}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (1568, 768)
op261.sizes = ([1568], [768])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op261_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 1204224}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1204224}, None),
        MemoryDep('buf259', c0, {c0: 1204224}, None),
        MemoryDep('buf260', c0, {c0: 1568}, None),
        MemoryDep('buf261', c0, {c0: 1568}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg125_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg126_1', c1, {c0: 1568, c1: 768}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (1204224, 1)
op263.sizes = ([1568, 768], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op263_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf261', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg125_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg126_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf263', get_index_7, add_3, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
    ]
]
op264.node.kernel = extern_kernels.mm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 1204224}, None)]
op265.unmet_dependencies = [   MemoryDep('buf264', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (1204224, 1)
op265.sizes = ([8, 16, 196, 48], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op265_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 1204224}, None)]
op266.unmet_dependencies = [   MemoryDep('buf264', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (1204224, 1)
op266.sizes = ([8, 768, 196], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf266', get_index_1, load, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf265', mode=None), StarDep(name='buf266', mode=None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op267.node.kernel = extern_kernels.bmm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 25088}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 4917248}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op268.group.device = cuda:0
op268.group.iteration = (25088, 196)
op268.sizes = ([25088], [196])
buf267_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op268_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, reduction)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 25088}, None)]
op269.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4917248}, None),
        MemoryDep('buf268', c0, {c0: 25088}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf269.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (25088, 196)
op269.sizes = ([25088], [196])
buf267_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op269_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_2, reduction)
        return store_reduction


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 115248}, None)]
op270.unmet_dependencies = []
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf270.users = [
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op270.group.device = cuda:0
op270.group.iteration = (115248, 1)
op270.sizes = ([196, 196, 3], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op270_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf270', get_index_6, where_2, None)
        return store


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op271.unmet_dependencies = [MemoryDep('buf270', c1, {c0: 8, c1: 115248}, None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (921984, 1)
op271.sizes = ([8, 115248], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op271_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 921984}, None)]
op272.unmet_dependencies = [   MemoryDep('buf271', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (921984, 1)
op272.sizes = ([307328, 3], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op272_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf272', get_index_1, load, None)
        return store


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None)]
op273.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op273.node.kernel = extern_kernels.mm


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 25088}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op274.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 1568, c1: 16}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op274.group.device = cuda:0
op274.group.iteration = (25088, 196)
op274.sizes = ([1568, 16], [196])
buf273_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op274_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf274', get_index_2, reduction)
        return store_reduction


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 25088}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf273', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf274', c0, {c0: 25088}, None)]
op275.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 1568, c1: 16}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (25088, 196)
op275.sizes = ([1568, 16], [196])
buf273_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op275_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf274', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, reduction)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4917248}, None),
        MemoryDep('buf268', c0, {c0: 25088}, None),
        MemoryDep('buf269', c0, {c0: 25088}, None),
        MemoryDep('buf273', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf274', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf275', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 16}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (4917248, 1)
op276.sizes = ([8, 16, 196, 196], [])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf273_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg130_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf267', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf268', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf269', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg130_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf273', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg129_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf274', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf275', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf276', get_index_9, add_1, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 25088}, None)]
op277.unmet_dependencies = [MemoryDep('buf276', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (25088, 196)
op277.sizes = ([128, 196], [196])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op277_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_1, reduction)
        return store_reduction


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op278.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf276', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf277', c0, {c0: 25088}, None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (4917248, 1)
op279.sizes = ([128, 196, 196], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op279_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf277', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf279', get_index_2, truediv, None)
        return store


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 1204224}, None)]
op280.unmet_dependencies = [   MemoryDep('buf278', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (1204224, 1)
op280.sizes = ([8, 16, 196, 48], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf280', get_index_1, load, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None), StarDep(name='buf280', mode=None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.node.kernel = extern_kernels.bmm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 1204224}, None)]
op282.unmet_dependencies = [   MemoryDep('buf281', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (1204224, 1)
op282.sizes = ([8, 196, 16, 48], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op282_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op283.node.kernel = extern_kernels.mm


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1204224}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1204224}, None),
        MemoryDep('buf259', c0, {c0: 1204224}, None),
        MemoryDep('buf283', c0, {c0: 1204224}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 768}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (1204224, 1)
op284.sizes = ([1568, 768], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op284_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf283', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf284', get_index_5, add_3, None)
        return store


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 1568}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 1204224}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf285.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (1568, 768)
op285.sizes = ([1568], [768])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op285_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf285', get_index_1, getitem)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 1568}, None)]
op286.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 1204224}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf286.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (1568, 768)
op286.sizes = ([1568], [768])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op286_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf286', get_index_1, getitem_1)
        return store_reduction


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 1204224}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 1204224}, None),
        MemoryDep('buf285', c0, {c0: 1568}, None),
        MemoryDep('buf286', c0, {c0: 1568}, None)]
op288.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 768}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (1204224, 1)
op288.sizes = ([1568, 768], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op288_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf285', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf286', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf288', get_index_5, add_1, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op289.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False)]
]
op289.node.kernel = extern_kernels.mm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 4816896}, None)]
op290.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 4816896}, None)]
op290.met_dependencies = [MemoryDep('arg137_1', c1, {c0: 1568, c1: 3072}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (4816896, 1)
op290.sizes = ([1568, 3072], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op290_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf289', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg137_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf290', get_index_4, mul_2, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
    ]
]
op291.node.kernel = extern_kernels.mm


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 1568}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 1204224}, None),
        MemoryDep('buf291', c0, {c0: 1204224}, None)]
op292.met_dependencies = [MemoryDep('arg139_1', c1, {c0: 1568, c1: 768}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf292.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (1568, 768)
op292.sizes = ([1568], [768])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op292_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf292', get_index_3, getitem)
        return store_reduction


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 1568}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 1204224}, None),
        MemoryDep('buf291', c0, {c0: 1204224}, None)]
op293.met_dependencies = [MemoryDep('arg139_1', c1, {c0: 1568, c1: 768}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf293.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (1568, 768)
op293.sizes = ([1568], [768])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op293_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf293', get_index_3, getitem_1)
        return store_reduction


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 1204224}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 1204224}, None),
        MemoryDep('buf291', c0, {c0: 1204224}, None),
        MemoryDep('buf292', c0, {c0: 1568}, None),
        MemoryDep('buf293', c0, {c0: 1568}, None)]
op295.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 768}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf295.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (1204224, 1)
op295.sizes = ([1568, 768], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op295_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf292', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf293', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg140_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg141_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf295', get_index_7, add_3, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelOut)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelOut
    buf296.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
]
op296.node.kernel = extern_kernels.mm


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 1204224}, None)]
op297.unmet_dependencies = [   MemoryDep('buf296', 301056*c0 + 48*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (1204224, 1)
op297.sizes = ([8, 16, 196, 48], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op297_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 301056*z0 + 48*z1 + 1536*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf297', get_index_1, load, None)
        return store


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 1204224}, None)]
op298.unmet_dependencies = [   MemoryDep('buf296', 301056*c0 + c1 + 1536*c2 + 768, {c0: 8, c1: 768, c2: 196}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (1204224, 1)
op298.sizes = ([8, 768, 196], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 196], stride=[150528, 9408, 196, 1])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 768
    index1 = 150528*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf298', get_index_1, load, None)
        return store


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf297', mode=None), StarDep(name='buf298', mode=None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.bmm


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 25088}, None)]
op300.unmet_dependencies = [MemoryDep('buf299', c0, {c0: 4917248}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (25088, 196)
op300.sizes = ([25088], [196])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op300_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_1, reduction)
        return store_reduction


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 25088}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf299', c0, {c0: 4917248}, None),
        MemoryDep('buf300', c0, {c0: 25088}, None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf301.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (25088, 196)
op301.sizes = ([25088], [196])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op301_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_2, reduction)
        return store_reduction


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 115248}, None)]
op302.unmet_dependencies = []
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (115248, 1)
op302.sizes = ([196, 196, 3], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
class op302_loop_body:
    var_ranges = {z0: 196, z1: 196, z2: 3}
    index0 = z2
    index1 = ((z0//14))**2 - 2*(z0//14)*(z1//14) + ((z1//14))**2 + ModularIndexing(z0, 1, 14)**2 - 2*ModularIndexing(z0, 1, 14)*ModularIndexing(z1, 1, 14) + ModularIndexing(z1, 1, 14)**2
    index2 = -(z0//14) + (z1//14)
    index3 = -ModularIndexing(z0, 1, 14) + ModularIndexing(z1, 1, 14)
    index4 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, index_expr_3, constant_3)
        get_index_4 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_4, torch.float32)
        where_1 = ops.where(eq_1, index_expr_4, where)
        get_index_5 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_5, torch.float32)
        where_2 = ops.where(eq, index_expr_5, where_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf302', get_index_6, where_2, None)
        return store


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', 115264*c0 + c1, {c0: 8, c1: 115248}, None)]
op303.unmet_dependencies = [MemoryDep('buf302', c1, {c0: 8, c1: 115248}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (921984, 1)
op303.sizes = ([8, 115248], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[1, 196, 196, 3], stride=[115248, 588, 3, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
class op303_loop_body:
    var_ranges = {z0: 8, z1: 115248}
    index0 = z1
    index1 = 115264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf303', get_index_1, load, None)
        return store


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 921984}, None)]
op304.unmet_dependencies = [   MemoryDep('buf303', c1 + 115264*((c0//38416)) + 3*ModularIndexing(c0, 1, 38416), {c0: 307328, c1: 3}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (921984, 1)
op304.sizes = ([307328, 3], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 196, 3], stride=[115264, 588, 3, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[307328, 3], stride=[3, 1])
class op304_loop_body:
    var_ranges = {z0: 307328, z1: 3}
    index0 = z1 + 115264*((z0//38416)) + 3*ModularIndexing(z0, 1, 38416)
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf304', get_index_1, load, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
    ]
]
op305.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 25088}, None)]
op306.unmet_dependencies = [MemoryDep('buf305', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None)]
op306.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 1568, c1: 16}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (25088, 196)
op306.sizes = ([1568, 16], [196])
buf305_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op306_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf306', get_index_2, reduction)
        return store_reduction


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 25088}, None)]
op307.unmet_dependencies = 
    [   MemoryDep('buf305', 3136*c0 + c1 + 16*c2, {c0: 1568, c1: 16, c2: 196}, None),
        MemoryDep('buf306', c0, {c0: 25088}, None)]
op307.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 1568, c1: 16}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (25088, 196)
op307.sizes = ([1568, 16], [196])
buf305_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
class op307_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 196}
    index0 = 3136*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf306', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf307', get_index_3, reduction)
        return store_reduction


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf299', c0, {c0: 4917248}, None),
        MemoryDep('buf300', c0, {c0: 25088}, None),
        MemoryDep('buf301', c0, {c0: 25088}, None),
        MemoryDep('buf305', 614656*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 38416}, None),
        MemoryDep('buf306', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None),
        MemoryDep('buf307', 3136*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 196}, None)]
op308.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg145_1', c1, {c0: 8, c1: 16}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (4917248, 1)
op308.sizes = ([8, 16, 196, 196], [])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf305_layout = FixedLayout('cuda', torch.float32, size=[307328, 16], stride=[16, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 1, 16, 25088])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op308_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = z1
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614656*z0 + z1 + 3136*z2 + 16*z3
    index4 = 3136*z0 + z1 + 16*z2
    index5 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg145_1', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, sigmoid)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf300', get_index_2)
        sub_1 = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub_1, constant_2)
        exp = ops.exp(mul_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf301', get_index_3)
        truediv = ops.truediv(exp, load_3)
        mul_2 = ops.mul(sub, truediv)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg145_1', get_index_4)
        sigmoid_1 = ops.sigmoid(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf305', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg144_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf306', get_index_7)
        sub_2 = ops.sub(add, load_7)
        exp_1 = ops.exp(sub_2)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf307', get_index_8)
        truediv_1 = ops.truediv(exp_1, load_8)
        mul_3 = ops.mul(sigmoid_1, truediv_1)
        add_1 = ops.add(mul_2, mul_3)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf308', get_index_9, add_1, None)
        return store


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 25088}, None)]
op309.unmet_dependencies = [MemoryDep('buf308', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (25088, 196)
op309.sizes = ([128, 196], [196])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
class op309_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf309', get_index_1, reduction)
        return store_reduction


op310: ExternKernelSchedulerNode(ExternKernelOut)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op310.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op310.outputs = [
    buf310: ExternKernelOut
    buf310.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf310.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op310.node.kernel = extern_kernels.mm


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf308', 38432*c0 + c1, {c0: 128, c1: 38416}, None),
        MemoryDep('buf309', c0, {c0: 25088}, None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (4917248, 1)
op311.sizes = ([128, 196, 196], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196], stride=[3136, 196, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 196], stride=[614912, 38432, 196, 1])
class op311_loop_body:
    var_ranges = {z0: 128, z1: 196, z2: 196}
    index0 = 38432*z0 + 196*z1 + z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf309', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf311', get_index_2, truediv, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 1204224}, None)]
op312.unmet_dependencies = [   MemoryDep('buf310', 150528*c0 + 48*c1 + 768*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 48}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (1204224, 1)
op312.sizes = ([8, 16, 196, 48], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 48], stride=[150528, 9408, 48, 1])
class op312_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 48}
    index0 = 150528*z0 + 48*z1 + 768*z2 + z3
    index1 = 150528*z0 + 9408*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf312', get_index_1, load, None)
        return store


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf311', mode=None), StarDep(name='buf312', mode=None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.node.kernel = extern_kernels.bmm


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 1204224}, None)]
op314.unmet_dependencies = [   MemoryDep('buf313', 150528*c0 + 48*c1 + 9408*c2 + c3, {c0: 8, c1: 196, c2: 16, c3: 48}, None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (1204224, 1)
op314.sizes = ([8, 196, 16, 48], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 48], stride=[9408, 48, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 16, 48], stride=[150528, 768, 48, 1])
class op314_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 16, z3: 48}
    index0 = 150528*z0 + 48*z1 + 9408*z2 + z3
    index1 = 150528*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf314', get_index_1, load, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf315.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False)]
]
op315.node.kernel = extern_kernels.mm


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 1204224}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 1204224}, None),
        MemoryDep('buf291', c0, {c0: 1204224}, None),
        MemoryDep('buf315', c0, {c0: 1204224}, None)]
op316.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg148_1', c1, {c0: 1568, c1: 768}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (1204224, 1)
op316.sizes = ([1568, 768], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op316_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf315', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg148_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf316', get_index_5, add_3, None)
        return store


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 1568}, None)]
op317.unmet_dependencies = [MemoryDep('buf316', c0, {c0: 1204224}, None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf317.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (1568, 768)
op317.sizes = ([1568], [768])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op317_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf317', get_index_1, getitem)
        return store_reduction


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1568}, None)]
op318.unmet_dependencies = [MemoryDep('buf316', c0, {c0: 1204224}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf318.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (1568, 768)
op318.sizes = ([1568], [768])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op318_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf318', get_index_1, getitem_1)
        return store_reduction


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1204224}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf316', c0, {c0: 1204224}, None),
        MemoryDep('buf317', c0, {c0: 1568}, None),
        MemoryDep('buf318', c0, {c0: 1568}, None)]
op320.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg150_1', c1, {c0: 1568, c1: 768}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (1204224, 1)
op320.sizes = ([1568, 768], [])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op320_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf317', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf318', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf320', get_index_5, add_1, None)
        return store


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op321.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
]
op321.node.kernel = extern_kernels.mm


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 4816896}, None)]
op322.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 4816896}, None)]
op322.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 1568, c1: 3072}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (4816896, 1)
op322.sizes = ([1568, 3072], [])
buf321_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op322_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf321', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg152_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf322', get_index_4, mul_2, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
    ]
]
op323.node.kernel = extern_kernels.mm


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 1576}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf316', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf323', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None)]
op324.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf324.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (1576, 768)
op324.sizes = ([8, 197], [768])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + z2 + 768*I
    index3 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf324', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 1576}, None)]
op325.unmet_dependencies = 
    [   MemoryDep('buf316', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf323', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None)]
op325.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf325.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (1576, 768)
op325.sizes = ([8, 197], [768])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op325_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + z2 + 768*I
    index3 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf325', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 1210368}, None)]
op327.unmet_dependencies = 
    [   MemoryDep('buf316', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf323', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf324', c0, {c0: 1576}, None),
        MemoryDep('buf325', c0, {c0: 1576}, None)]
op327.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg155_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (1210368, 1)
op327.sizes = ([8, 197, 768], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + z2 + 768*I
    index3 = 197*z0 + z1
    index4 = 151296*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf324', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('buf325', get_index_5)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('arg155_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf327', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 1210368}, None)]
op328.unmet_dependencies = [MemoryDep('buf327', c0, {c0: 1210368}, None)]
op328.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 1576, c1: 768}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (1210368, 1)
op328.sizes = ([1576, 768], [])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op328_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf328', get_index_2, add, None)
        return store


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
    ]
]
op329.node.kernel = extern_kernels.mm


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', 9472*c0 + c1, {c0: 128, c1: 9456}, None)]
op330.unmet_dependencies = [   MemoryDep('buf329', 453888*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 197, c3: 48}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (1210368, 1)
op330.sizes = ([8, 16, 197, 48], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
class op330_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 197, z3: 48}
    index0 = 453888*z0 + 48*z1 + 2304*z2 + z3
    index1 = 151552*z0 + 9472*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf330', get_index_1, load, None)
        return store


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', 9472*c0 + c1, {c0: 128, c1: 9456}, None)]
op331.unmet_dependencies = [   MemoryDep('buf329', 453888*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 197}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 197], stride=[151552, 9472, 197, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (1210368, 1)
op331.sizes = ([8, 16, 48, 197], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 197], stride=[151552, 9472, 197, 1])
class op331_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 48, z3: 197}
    index0 = 453888*z0 + 48*z1 + z2 + 2304*z3 + 768
    index1 = 151552*z0 + 9472*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf331', get_index_1, load, None)
        return store


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf330', mode=None), StarDep(name='buf331', mode=None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
    ]
]
op332.node.kernel = extern_kernels.bmm


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op333.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 4967552}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (25216, 197)
op333.sizes = ([8, 3152], [197])
buf332_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
class op333_loop_body:
    var_ranges = {z0: 8, z1: 3152, z2: 197}
    index0 = 620944*z0 + 197*z1 + z2
    index1 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_1, reduction)
        return store_reduction


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 4967552}, None),
        MemoryDep('buf333', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
    buf334.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (25216, 197)
op334.sizes = ([8, 3152], [197])
buf332_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
class op334_loop_body:
    var_ranges = {z0: 8, z1: 3152, z2: 197}
    index0 = 620944*z0 + 197*z1 + z2
    index1 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf333', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf334', get_index_2, reduction)
        return store_reduction


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', 38816*c0 + c1, {c0: 128, c1: 38809}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 4967552}, None),
        MemoryDep('buf333', 3168*c0 + c1, {c0: 8, c1: 3152}, None),
        MemoryDep('buf334', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 197], stride=[621056, 38816, 197, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (4967552, 1)
op335.sizes = ([8, 16, 197, 197], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 197], stride=[621056, 38816, 197, 1])
class op335_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 197, z3: 197}
    index0 = 620944*z0 + 38809*z1 + 197*z2 + z3
    index1 = 3168*z0 + 197*z1 + z2
    index2 = 621056*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf333', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf334', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf335', get_index_3, truediv, None)
        return store


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', 9472*c0 + c1, {c0: 128, c1: 9456}, None)]
op336.unmet_dependencies = [   MemoryDep('buf329', 453888*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 197, c3: 48}, None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (1210368, 1)
op336.sizes = ([8, 16, 197, 48], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
class op336_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 197, z3: 48}
    index0 = 453888*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 151552*z0 + 9472*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf336', get_index_1, load, None)
        return store


op337: ExternKernelSchedulerNode(ExternKernelOut)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf335', mode=None), StarDep(name='buf336', mode=None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ExternKernelOut
    buf337.layout = FixedLayout('cuda', torch.float32, size=[128, 197, 48], stride=[9456, 48, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.node.kernel = extern_kernels.bmm


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1210368}, None)]
op338.unmet_dependencies = [   MemoryDep('buf337', 151296*c0 + 48*c1 + 9456*c2 + c3, {c0: 8, c1: 197, c2: 16, c3: 48}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 16, 48], stride=[151296, 768, 48, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (1210368, 1)
op338.sizes = ([8, 197, 16, 48], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 48], stride=[9456, 48, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 16, 48], stride=[151296, 768, 48, 1])
class op338_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 16, z3: 48}
    index0 = 151296*z0 + 48*z1 + 9456*z2 + z3
    index1 = 151296*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf338', get_index_1, load, None)
        return store


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf338', mode=None)]
op339.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf339.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False)]
]
op339.node.kernel = extern_kernels.mm


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1210368}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf316', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf323', 150528*c0 + c2 + 768*I, {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf339', c0, {c0: 1210368}, None)]
op340.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg159_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (1210368, 1)
op340.sizes = ([8, 197, 768], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op340_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + z2 + 768*I
    index3 = 151296*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf339', get_index_4)
        get_index_5 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf340', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 1576}, None)]
op341.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 1210368}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf341.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (1576, 768)
op341.sizes = ([1576], [768])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op341_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf341', get_index_1, getitem)
        return store_reduction


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 1576}, None)]
op342.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 1210368}, None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf342.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (1576, 768)
op342.sizes = ([1576], [768])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op342_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf342', get_index_1, getitem_1)
        return store_reduction


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1210368}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1210368}, None),
        MemoryDep('buf341', c0, {c0: 1576}, None),
        MemoryDep('buf342', c0, {c0: 1576}, None)]
op344.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg161_1', c1, {c0: 1576, c1: 768}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (1210368, 1)
op344.sizes = ([1576, 768], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op344_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf341', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf342', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg160_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg161_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf344', get_index_5, add_1, None)
        return store


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf345.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op345.node.kernel = extern_kernels.mm


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 4841472}, None)]
op346.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 4841472}, None)]
op346.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 1576, c1: 3072}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (4841472, 1)
op346.sizes = ([1576, 3072], [])
buf345_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op346_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf345', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf346', get_index_4, mul_2, None)
        return store


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op347.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op347.node.kernel = extern_kernels.mm


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 1576}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1210368}, None),
        MemoryDep('buf347', c0, {c0: 1210368}, None)]
op348.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 1576, c1: 768}, None)]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (1576, 768)
op348.sizes = ([1576], [768])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op348_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf347', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf348', get_index_3, getitem)
        return store_reduction


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 1576}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1210368}, None),
        MemoryDep('buf347', c0, {c0: 1210368}, None)]
op349.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 1576, c1: 768}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf349.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (1576, 768)
op349.sizes = ([1576], [768])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op349_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf347', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf349', get_index_3, getitem_1)
        return store_reduction


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 1210368}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1210368}, None),
        MemoryDep('buf347', c0, {c0: 1210368}, None),
        MemoryDep('buf348', c0, {c0: 1576}, None),
        MemoryDep('buf349', c0, {c0: 1576}, None)]
op351.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg166_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg167_1', c1, {c0: 1576, c1: 768}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (1210368, 1)
op351.sizes = ([1576, 768], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op351_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf347', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf348', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf349', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg166_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg167_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf351', get_index_7, add_3, None)
        return store


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf351', mode=None)]
op352.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
    ]
]
op352.node.kernel = extern_kernels.mm


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', 9472*c0 + c1, {c0: 128, c1: 9456}, None)]
op353.unmet_dependencies = [   MemoryDep('buf352', 453888*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 197, c3: 48}, None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (1210368, 1)
op353.sizes = ([8, 16, 197, 48], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
class op353_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 197, z3: 48}
    index0 = 453888*z0 + 48*z1 + 2304*z2 + z3
    index1 = 151552*z0 + 9472*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf353', get_index_1, load, None)
        return store


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', 9472*c0 + c1, {c0: 128, c1: 9456}, None)]
op354.unmet_dependencies = [   MemoryDep('buf352', 453888*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 197}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 197], stride=[151552, 9472, 197, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (1210368, 1)
op354.sizes = ([8, 16, 48, 197], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 197], stride=[151552, 9472, 197, 1])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 48, z3: 197}
    index0 = 453888*z0 + 48*z1 + z2 + 2304*z3 + 768
    index1 = 151552*z0 + 9472*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf354', get_index_1, load, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf353', mode=None), StarDep(name='buf354', mode=None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
    ]
]
op355.node.kernel = extern_kernels.bmm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 4967552}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (25216, 197)
op356.sizes = ([8, 3152], [197])
buf355_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
class op356_loop_body:
    var_ranges = {z0: 8, z1: 3152, z2: 197}
    index0 = 620944*z0 + 197*z1 + z2
    index1 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf356', get_index_1, reduction)
        return store_reduction


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 4967552}, None),
        MemoryDep('buf356', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (25216, 197)
op357.sizes = ([8, 3152], [197])
buf355_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
class op357_loop_body:
    var_ranges = {z0: 8, z1: 3152, z2: 197}
    index0 = 620944*z0 + 197*z1 + z2
    index1 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf357', get_index_2, reduction)
        return store_reduction


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', 38816*c0 + c1, {c0: 128, c1: 38809}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 4967552}, None),
        MemoryDep('buf356', 3168*c0 + c1, {c0: 8, c1: 3152}, None),
        MemoryDep('buf357', 3168*c0 + c1, {c0: 8, c1: 3152}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 197], stride=[621056, 38816, 197, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (4967552, 1)
op358.sizes = ([8, 16, 197, 197], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 197], stride=[38809, 197, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 1], stride=[3168, 197, 1, 25344])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 197], stride=[621056, 38816, 197, 1])
class op358_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 197, z3: 197}
    index0 = 620944*z0 + 38809*z1 + 197*z2 + z3
    index1 = 3168*z0 + 197*z1 + z2
    index2 = 621056*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.14433756729740643, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf357', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf358', get_index_3, truediv, None)
        return store


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', 9472*c0 + c1, {c0: 128, c1: 9456}, None)]
op359.unmet_dependencies = [   MemoryDep('buf352', 453888*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 197, c3: 48}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (1210368, 1)
op359.sizes = ([8, 16, 197, 48], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 197, 48], stride=[151552, 9472, 48, 1])
class op359_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 197, z3: 48}
    index0 = 453888*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 151552*z0 + 9472*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf359', get_index_1, load, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelOut)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf358', mode=None), StarDep(name='buf359', mode=None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ExternKernelOut
    buf360.layout = FixedLayout('cuda', torch.float32, size=[128, 197, 48], stride=[9456, 48, 1])
    buf360.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.node.kernel = extern_kernels.bmm


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 1210368}, None)]
op361.unmet_dependencies = [   MemoryDep('buf360', 151296*c0 + 48*c1 + 9456*c2 + c3, {c0: 8, c1: 197, c2: 16, c3: 48}, None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 16, 48], stride=[151296, 768, 48, 1])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (1210368, 1)
op361.sizes = ([8, 197, 16, 48], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[128, 197, 48], stride=[9456, 48, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 16, 48], stride=[151296, 768, 48, 1])
class op361_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 16, z3: 48}
    index0 = 151296*z0 + 48*z1 + 9456*z2 + z3
    index1 = 151296*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf361', get_index_1, load, None)
        return store


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 1210368}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1210368}, None),
        MemoryDep('buf347', c0, {c0: 1210368}, None),
        MemoryDep('buf362', c0, {c0: 1210368}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg170_1', c1, {c0: 1576, c1: 768}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (1210368, 1)
op363.sizes = ([1576, 768], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op363_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf347', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf362', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf363', get_index_5, add_3, None)
        return store


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 1576}, None)]
op364.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 1210368}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf364.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (1576, 768)
op364.sizes = ([1576], [768])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op364_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf364', get_index_1, getitem)
        return store_reduction


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 1576}, None)]
op365.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 1210368}, None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (1576, 768)
op365.sizes = ([1576], [768])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op365_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf365', get_index_1, getitem_1)
        return store_reduction


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 1210368}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 1210368}, None),
        MemoryDep('buf364', c0, {c0: 1576}, None),
        MemoryDep('buf365', c0, {c0: 1576}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg172_1', c1, {c0: 1576, c1: 768}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (1210368, 1)
op367.sizes = ([1576, 768], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op367_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf364', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf365', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg171_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg172_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf367', get_index_5, add_1, None)
        return store


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False)]
]
op368.node.kernel = extern_kernels.mm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 4841472}, None)]
op369.unmet_dependencies = [MemoryDep('buf368', c0, {c0: 4841472}, None)]
op369.met_dependencies = [MemoryDep('arg174_1', c1, {c0: 1576, c1: 3072}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (4841472, 1)
op369.sizes = ([1576, 3072], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op369_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf368', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf369', get_index_4, mul_2, None)
        return store


op370: ExternKernelSchedulerNode(ExternKernelOut)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op370.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelOut
    buf370.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.mm


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 1576}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 1210368}, None),
        MemoryDep('buf370', c0, {c0: 1210368}, None)]
op371.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 1576, c1: 768}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf371.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (1576, 768)
op371.sizes = ([1576], [768])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op371_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf371', get_index_3, getitem)
        return store_reduction


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 1576}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 1210368}, None),
        MemoryDep('buf370', c0, {c0: 1210368}, None)]
op372.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 1576, c1: 768}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf372.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (1576, 768)
op372.sizes = ([1576], [768])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op372_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf372', get_index_3, getitem_1)
        return store_reduction


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 6144}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf363', 151296*c0 + c1, {c0: 8, c1: 768}, None),
        MemoryDep('buf370', 151296*c0 + c1, {c0: 8, c1: 768}, None),
        MemoryDep('buf371', 197*c0, {c0: 8}, None),
        MemoryDep('buf372', 197*c0, {c0: 8}, None)]
op374.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg177_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg178_1', c1, {c0: 8, c1: 768}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (6144, 1)
op374.sizes = ([8, 768], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
class op374_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 151296*z0 + z1
    index1 = z1
    index2 = 197*z0
    index3 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf371', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf372', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg177_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg178_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf374', get_index_7, add_3, None)
        return store


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = [StarDep(name='arg179_1', mode=None), StarDep(name='arg180_1', mode=None)]
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf375.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op375.node.kernel = extern_kernels.addmm



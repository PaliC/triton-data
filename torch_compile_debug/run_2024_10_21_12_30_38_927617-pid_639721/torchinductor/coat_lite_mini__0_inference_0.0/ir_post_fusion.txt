op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 48*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 16}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 3072}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[64, 3, 4, 4], stride=[48, 1, 12, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (3072, 1)
op1.sizes = ([64, 3, 16], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 4, 4], stride=[48, 16, 4, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 4, 4], stride=[48, 1, 12, 3])
class op1_loop_body:
    var_ranges = {z0: 64, z1: 3, z2: 16}
    index0 = 48*z0 + 16*z1 + z2
    index1 = 48*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.convolution


op3_op4_op7: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op3_op4_op7.writes = 
    [   MemoryDep('buf3', c0, {c0: 25088}, None),
        MemoryDep('buf4', c0, {c0: 25088}, None),
        MemoryDep('buf7', 200768*c0 + c1, {c0: 8, c1: 200704}, None)]
op3_op4_op7.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op3_op4_op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 64}, None)]
op3_op4_op7.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf3.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = NonOwningLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200768, 64, 1])
    buf7.aliases = ['buf8']
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op3_op4_op7.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 25088}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op3.met_dependencies = [MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf3.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (25088, 64)
op3.sizes = ([25088], [64])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op3_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem)
        return store_reduction
op3_op4_op7.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 25088}, None)]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op4.met_dependencies = [MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (25088, 64)
op4.sizes = ([25088], [64])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op4_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf4', get_index_2, getitem_1)
        return store_reduction
op3_op4_op7.snodes[2] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 200768*c0 + c1, {c0: 8, c1: 200704}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 1605632}, None),
        MemoryDep('buf3', c0, {c0: 25088}, None),
        MemoryDep('buf4', c0, {c0: 25088}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 64}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = NonOwningLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200768, 64, 1])
    buf7.aliases = ['buf8']
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (1605632, 1)
op7.sizes = ([8, 3136, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf7_layout = NonOwningLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200768, 64, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 64}
    index0 = 200704*z0 + 64*z1 + z2
    index1 = z2
    index2 = 3136*z0 + z1
    index3 = 200768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf3', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf4', get_index_3)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf7', get_index_6, add_2, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', 200768*c0 + c1, {c0: 8, c1: 64}, None)]
op6.unmet_dependencies = []
op6.met_dependencies = [MemoryDep('arg5_1', c1, {c0: 8, c1: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 64], stride=[200768, 64, 1])
    buf6.aliases = ['buf8']
    buf6.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (512, 1)
op6.sizes = ([8, 64], [])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 64], stride=[64, 64, 1])
buf6_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 64], stride=[200768, 64, 1])
class op6_loop_body:
    var_ranges = {z0: 8, z1: 64}
    index0 = z1
    index1 = 200768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, load, None)
        return store


op8: NopKernelSchedulerNode(ConcatKernel)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ConcatKernel
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf8.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op9.node.kernel = extern_kernels.convolution


op10_op11_op13_op14: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op10_op11_op13_op14.writes = 
    [   MemoryDep('buf10', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf11', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf13', c0, {c0: 1606144}, None),
        MemoryDep('buf14', c0, {c0: 1606144}, None)]
op10_op11_op13_op14.unmet_dependencies = 
    [   MemoryDep('buf8', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf8', 200768*c0 + c2, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf9', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op10_op11_op13_op14.met_dependencies = 
    [   MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 25096, c1: 64}, None)]
op10_op11_op13_op14.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf11.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op10_op11_op13_op14.snodes[0] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf8', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf8', 200768*c0 + c2, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf9', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op10.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (25096, 64)
op10.sizes = ([8, 3137], [64])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf10', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf8', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op10_op11_op13_op14.snodes[1] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf8', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf8', 200768*c0 + c2, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf9', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op11.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf11.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (25096, 64)
op11.sizes = ([8, 3137], [64])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf11', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf8', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op10_op11_op13_op14.snodes[2] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 1606144}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf10', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf11', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf8', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf8', 200768*c0 + c2, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf9', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 25096, c1: 64}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (1606144, 1)
op13.sizes = ([8, 3137, 64], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 3168*z0 + z1
    index6 = 200768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf10', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf11', get_index_5)
        constant_4 = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg8_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf13', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf8', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op10_op11_op13_op14.snodes[3] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1606144}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 1606144}, None)]
op14.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 25096, c1: 64}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1606144, 1)
op14.sizes = ([25096, 64], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op14_loop_body:
    var_ranges = {z0: 25096, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf14', get_index_2, add, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.addmm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 12800}, None)]
op16.unmet_dependencies = [   MemoryDep('buf15', 602304*c0 + 24192*c1 + c2 + 192*c3 + 64, {c0: 8, c1: 25, c2: 64, c3: 126}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (12800, 126)
op16.sizes = ([8, 25, 64], [126])
buf15_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 64, z3: 126}
    index0 = 126*z1 + z3
    index1 = 602304*z0 + 24192*z1 + z2 + 192*z3 + 64
    index2 = 1600*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, -inf)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf15', get_index)
        return load


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 512}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', 1600*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 25}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (512, 25)
op17.sizes = ([8, 64], [25])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 25}
    index0 = 1600*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_1, reduction)
        return store_reduction


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 12800}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf15', 602304*c0 + 24192*c1 + c2 + 192*c3 + 64, {c0: 8, c1: 25, c2: 64, c3: 126}, None),
        MemoryDep('buf17', 64*c0 + c2, {c0: 8, c1: 25, c2: 64}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (12800, 126)
op18.sizes = ([8, 25, 64], [126])
buf15_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
class op18_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 64, z3: 126}
    index0 = 126*z1 + z3
    index1 = 602304*z0 + 24192*z1 + z2 + 192*z3 + 64
    index2 = 64*z0 + z2
    index3 = 1600*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf18', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        return exp


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 512}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', 1600*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 25}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (512, 25)
op19.sizes = ([8, 64], [25])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
class op19_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 25}
    index0 = 1600*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, reduction)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1606144}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf15', 602304*c0 + 8*c1 + 192*c2 + c3 + 64, {c0: 8, c1: 8, c2: 3137, c3: 8}, None),
        MemoryDep('buf17', 8*c0 + c2, {c0: 64, c1: 3137, c2: 8}, None),
        MemoryDep('buf19', 8*c0 + c2, {c0: 64, c1: 3137, c2: 8}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (1606144, 1)
op20.sizes = ([8, 8, 3137, 8], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 3137, z3: 8}
    index0 = 602304*z0 + 8*z1 + 192*z2 + z3 + 64
    index1 = 64*z0 + 8*z1 + z3
    index2 = 200768*z0 + 25096*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf20', get_index_3, truediv, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1606144}, None)]
op21.unmet_dependencies = [   MemoryDep('buf15', 602304*c0 + 8*c1 + 192*c2 + c3 + 128, {c0: 8, c1: 8, c2: 3137, c3: 8}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (1606144, 1)
op21.sizes = ([8, 8, 3137, 8], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 3137, z3: 8}
    index0 = 602304*z0 + 8*z1 + 192*z2 + z3 + 128
    index1 = 200768*z0 + 25096*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf21', get_index_1, load, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf21', mode=None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[64, 8, 8], stride=[64, 8, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.bmm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1606144}, None)]
op23.unmet_dependencies = [   MemoryDep('buf15', 602304*c0 + 8*c1 + 192*c2 + c3, {c0: 8, c1: 8, c2: 3137, c3: 8}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1606144, 1)
op23.sizes = ([8, 8, 3137, 8], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 3137, z3: 8}
    index0 = 602304*z0 + 8*z1 + 192*z2 + z3
    index1 = 200768*z0 + 25096*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf23', get_index_1, load, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None), StarDep(name='buf23', mode=None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[64, 3137, 8], stride=[25096, 8, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op24.node.kernel = extern_kernels.bmm


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op25.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op26.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op27.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op28_op29.writes = 
    [   MemoryDep('buf28', c0, {c0: 1606144}, None),
        MemoryDep('buf29', c0, {c0: 1606144}, None)]
op28_op29.unmet_dependencies = 
    [   MemoryDep('buf15', 192*c0 + c1, {c0: 25096, c1: 64}, None),
        MemoryDep('buf24', 200768*c0 + 8*c1 + 25096*c2 + c3, {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf25', 50176*c0 + I + 16*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf26', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf27', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None)]
op28_op29.met_dependencies = 
    [   MemoryDep('arg13_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg15_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg17_1', I, {c0: 25096, c1: 8, c2: 8}, None)]
op28_op29.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 8, 8], stride=[200768, 64, 8, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28_op29.snodes[0] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1606144}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf15', 192*c0 + c1, {c0: 25096, c1: 64}, None),
        MemoryDep('buf25', 50176*c0 + I + 16*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf26', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf27', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg13_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg15_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg17_1', I, {c0: 25096, c1: 8, c2: 8}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1606144, 1)
op28.sizes = ([8, 3137, 8, 8], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 8, z3: 8}
    index0 = z1 - 1
    index1 = 602304*z0 + 192*z1 + 8*z2 + z3
    index2 = 8*z2 + z3
    index3 = 50176*z0 + I + 16*ModularIndexing(z1 - 1, 1, 3136)
    index4 = I
    index5 = 75264*z0 + I + 24*ModularIndexing(z1 - 1, 1, 3136)
    index6 = I
    index7 = 75264*z0 + I + 24*ModularIndexing(z1 - 1, 1, 3136)
    index8 = I
    index9 = 200768*z0 + 64*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf28', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(16, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(40, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(40, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(64, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op28_op29.snodes[1] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1606144}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf24', 200768*c0 + 8*c1 + 25096*c2 + c3, {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf28', c0, {c0: 1606144}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 8, 8], stride=[200768, 64, 8, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1606144, 1)
op29.sizes = ([8, 3137, 8, 8], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[64, 3137, 8], stride=[25096, 8, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 8, 8], stride=[200768, 64, 8, 1])
class op29_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 8, z3: 8}
    index0 = 200768*z0 + 8*z1 + 25096*z2 + z3
    index1 = 200768*z0 + 64*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        constant = ops.constant(0.3535533905932738, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf29', get_index_2, add, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31_op32_op33_op35: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op31_op32_op33_op35.writes = 
    [   MemoryDep('buf31', c0, {c0: 1606144}, None),
        MemoryDep('buf32', c0, {c0: 25096}, None),
        MemoryDep('buf33', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf35', c0, {c0: 1606144}, None)]
op31_op32_op33_op35.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1606144}, None),
        MemoryDep('buf8', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf8', 200768*c0 + c2, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf9', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op31_op32_op33_op35.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg21_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op31_op32_op33_op35.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op31_op32_op33_op35.snodes[0] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 1606144}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1606144}, None),
        MemoryDep('buf8', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf8', 200768*c0 + c2, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf9', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (1606144, 1)
op31.sizes = ([8, 3137, 64], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 200768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf30', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg19_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf31', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf8', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op31_op32_op33_op35.snodes[1] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 25096}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 1606144}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (25096, 64)
op32.sizes = ([25096], [64])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
class op32_loop_body:
    var_ranges = {z0: 25096, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf32', get_index_1, getitem)
        return store_reduction
op31_op32_op33_op35.snodes[2] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op33.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 1606144}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (25096, 64)
op33.sizes = ([8, 3137], [64])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
class op33_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = 200768*z0 + 64*z1 + z2
    index1 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_1, getitem_1)
        return store_reduction
op31_op32_op33_op35.snodes[3] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1606144}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 1606144}, None),
        MemoryDep('buf32', c0, {c0: 25096}, None),
        MemoryDep('buf33', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg21_1', c1, {c0: 25096, c1: 64}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1606144, 1)
op35.sizes = ([8, 3137, 64], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = 200768*z0 + 64*z1 + z2
    index1 = 3137*z0 + z1
    index2 = 3168*z0 + z1
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf33', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg20_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg21_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, add_1, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[25096, 512], stride=[512, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 12849152}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 12849152}, None)]
op37.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 25096, c1: 512}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 512], stride=[1606144, 512, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (12849152, 1)
op37.sizes = ([25096, 512], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[25096, 512], stride=[512, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 512], stride=[1606144, 512, 1])
class op37_loop_body:
    var_ranges = {z0: 25096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg23_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf37', get_index_4, mul_2, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1606144}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 1606144}, None),
        MemoryDep('buf38', c0, {c0: 1606144}, None)]
op39.met_dependencies = [MemoryDep('arg25_1', c1, {c0: 25096, c1: 64}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (1606144, 1)
op39.sizes = ([25096, 64], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op39_loop_body:
    var_ranges = {z0: 25096, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg25_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf39', get_index_3, add_1, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.convolution


op41_op42_op44_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op41_op42_op44_op45.writes = 
    [   MemoryDep('buf41', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf42', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf44', c0, {c0: 1606144}, None),
        MemoryDep('buf45', c0, {c0: 1606144}, None)]
op41_op42_op44_op45.unmet_dependencies = 
    [   MemoryDep('buf39', 200768*c0 + c2 + 64*I, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf39', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf40', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op41_op42_op44_op45.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg27_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op41_op42_op44_op45.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op41_op42_op44_op45.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf39', 200768*c0 + c2 + 64*I, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf39', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf40', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op41.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (25096, 64)
op41.sizes = ([8, 3137], [64])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2 + 64*I
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf41', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op41_op42_op44_op45.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf39', 200768*c0 + c2 + 64*I, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf39', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf40', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None)]
op42.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (25096, 64)
op42.sizes = ([8, 3137], [64])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2 + 64*I
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf42', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op41_op42_op44_op45.snodes[2] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 1606144}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf39', 200768*c0 + c2 + 64*I, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf39', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf40', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf41', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf42', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (1606144, 1)
op44.sizes = ([8, 3137, 64], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2 + 64*I
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 3168*z0 + z1
    index6 = 200768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf41', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf42', get_index_5)
        constant_4 = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg26_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf44', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op41_op42_op44_op45.snodes[3] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 1606144}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 1606144}, None)]
op45.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 25096, c1: 64}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1606144, 1)
op45.sizes = ([25096, 64], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op45_loop_body:
    var_ranges = {z0: 25096, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, add, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg28_1', mode=None), StarDep(name='arg29_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.addmm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 12800}, None)]
op47.unmet_dependencies = [   MemoryDep('buf46', 602304*c0 + 24192*c1 + c2 + 192*c3 + 64, {c0: 8, c1: 25, c2: 64, c3: 126}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (12800, 126)
op47.sizes = ([8, 25, 64], [126])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 64, z3: 126}
    index0 = 126*z1 + z3
    index1 = 602304*z0 + 24192*z1 + z2 + 192*z3 + 64
    index2 = 1600*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, -inf)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf46', get_index)
        return load


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 512}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', 1600*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 25}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (512, 25)
op48.sizes = ([8, 64], [25])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
class op48_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 25}
    index0 = 1600*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_1, reduction)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 12800}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf46', 602304*c0 + 24192*c1 + c2 + 192*c3 + 64, {c0: 8, c1: 25, c2: 64, c3: 126}, None),
        MemoryDep('buf48', 64*c0 + c2, {c0: 8, c1: 25, c2: 64}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (12800, 126)
op49.sizes = ([8, 25, 64], [126])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 64, z3: 126}
    index0 = 126*z1 + z3
    index1 = 602304*z0 + 24192*z1 + z2 + 192*z3 + 64
    index2 = 64*z0 + z2
    index3 = 1600*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf49', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        return exp


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 512}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', 1600*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 25}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (512, 25)
op50.sizes = ([8, 64], [25])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8, 25], stride=[1600, 8, 12800, 1, 64])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
class op50_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 25}
    index0 = 1600*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_1, reduction)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 1606144}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf46', 602304*c0 + 8*c1 + 192*c2 + c3 + 64, {c0: 8, c1: 8, c2: 3137, c3: 8}, None),
        MemoryDep('buf48', 8*c0 + c2, {c0: 64, c1: 3137, c2: 8}, None),
        MemoryDep('buf50', 8*c0 + c2, {c0: 64, c1: 3137, c2: 8}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (1606144, 1)
op51.sizes = ([8, 8, 3137, 8], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 8], stride=[64, 8, 512, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
class op51_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 3137, z3: 8}
    index0 = 602304*z0 + 8*z1 + 192*z2 + z3 + 64
    index1 = 64*z0 + 8*z1 + z3
    index2 = 200768*z0 + 25096*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf50', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf51', get_index_3, truediv, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 1606144}, None)]
op52.unmet_dependencies = [   MemoryDep('buf46', 602304*c0 + 8*c1 + 192*c2 + c3 + 128, {c0: 8, c1: 8, c2: 3137, c3: 8}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1606144, 1)
op52.sizes = ([8, 8, 3137, 8], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 3137, z3: 8}
    index0 = 602304*z0 + 8*z1 + 192*z2 + z3 + 128
    index1 = 200768*z0 + 25096*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf52', get_index_1, load, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None), StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[64, 8, 8], stride=[64, 8, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.bmm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1606144}, None)]
op54.unmet_dependencies = [   MemoryDep('buf46', 602304*c0 + 8*c1 + 192*c2 + c3, {c0: 8, c1: 8, c2: 3137, c3: 8}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1606144, 1)
op54.sizes = ([8, 8, 3137, 8], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 25096, 8, 1])
class op54_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 3137, z3: 8}
    index0 = 602304*z0 + 8*z1 + 192*z2 + z3
    index1 = 200768*z0 + 25096*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf54', get_index_1, load, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[64, 3137, 8], stride=[25096, 8, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.bmm


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op56.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: ExternKernelSchedulerNode(ExternKernelAlloc)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op57.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelAlloc
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = extern_kernels.convolution


op58: ExternKernelSchedulerNode(ExternKernelAlloc)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op58.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelAlloc
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.node.kernel = extern_kernels.convolution


op59_op60: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op59_op60.writes = 
    [   MemoryDep('buf59', c0, {c0: 1606144}, None),
        MemoryDep('buf60', c0, {c0: 1606144}, None)]
op59_op60.unmet_dependencies = 
    [   MemoryDep('buf46', 192*c0 + c1, {c0: 25096, c1: 64}, None),
        MemoryDep('buf55', 200768*c0 + 8*c1 + 25096*c2 + c3, {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf56', 50176*c0 + I + 16*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf57', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf58', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None)]
op59_op60.met_dependencies = 
    [   MemoryDep('arg13_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg15_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg17_1', I, {c0: 25096, c1: 8, c2: 8}, None)]
op59_op60.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 8, 8], stride=[200768, 64, 8, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59_op60.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1606144}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf46', 192*c0 + c1, {c0: 25096, c1: 64}, None),
        MemoryDep('buf56', 50176*c0 + I + 16*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf57', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf58', 75264*c0 + I + 24*ModularIndexing(c1 - 1, 1, 3136), {c0: 8, c1: 3137, c2: 8, c3: 8}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg13_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg15_1', I, {c0: 25096, c1: 8, c2: 8}, None),
        MemoryDep('arg17_1', I, {c0: 25096, c1: 8, c2: 8}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1606144, 1)
op59.sizes = ([8, 3137, 8, 8], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25096, 192], stride=[192, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 8, z3: 8}
    index0 = z1 - 1
    index1 = 602304*z0 + 192*z1 + 8*z2 + z3
    index2 = 8*z2 + z3
    index3 = 50176*z0 + I + 16*ModularIndexing(z1 - 1, 1, 3136)
    index4 = I
    index5 = 75264*z0 + I + 24*ModularIndexing(z1 - 1, 1, 3136)
    index6 = I
    index7 = 75264*z0 + I + 24*ModularIndexing(z1 - 1, 1, 3136)
    index8 = I
    index9 = 200768*z0 + 64*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf59', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(16, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(40, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(40, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(64, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op59_op60.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1606144}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf55', 200768*c0 + 8*c1 + 25096*c2 + c3, {c0: 8, c1: 3137, c2: 8, c3: 8}, None),
        MemoryDep('buf59', c0, {c0: 1606144}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 8, 8], stride=[200768, 64, 8, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1606144, 1)
op60.sizes = ([8, 3137, 8, 8], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[64, 3137, 8], stride=[25096, 8, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 3137, 8], stride=[200768, 8, 64, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 8, 8], stride=[200768, 64, 8, 1])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 8, z3: 8}
    index0 = 200768*z0 + 8*z1 + 25096*z2 + z3
    index1 = 200768*z0 + 64*z1 + 8*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        constant = ops.constant(0.3535533905932738, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf60', get_index_2, add, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62_op63_op64_op66: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op62_op63_op64_op66.writes = 
    [   MemoryDep('buf62', c0, {c0: 1606144}, None),
        MemoryDep('buf63', c0, {c0: 25096}, None),
        MemoryDep('buf64', 3168*c0 + c1, {c0: 8, c1: 3137}, None),
        MemoryDep('buf66', c0, {c0: 1606144}, None)]
op62_op63_op64_op66.unmet_dependencies = 
    [   MemoryDep('buf39', 200768*c0 + c2 + 64*I, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf39', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf40', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf61', c0, {c0: 1606144}, None)]
op62_op63_op64_op66.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg32_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op62_op63_op64_op66.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
    buf63.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op62_op63_op64_op66.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1606144}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf39', 200768*c0 + c2 + 64*I, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf39', 200768*c0 + c2 + 64*ModularIndexing(I, 1, 3136) + 64, {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf40', 200704*c0 + c2 + 64*ModularIndexing(I, 1, 3136), {c0: 8, c1: 3137, c2: 64}, None),
        MemoryDep('buf61', c0, {c0: 1606144}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25096, c1: 64}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (1606144, 1)
op62.sizes = ([8, 3137, 64], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = z1
    index1 = 200768*z0 + z2 + 64*I
    index2 = 200704*z0 + z2 + 64*ModularIndexing(I, 1, 3136)
    index3 = z2
    index4 = 200768*z0 + z2 + 64*ModularIndexing(I, 1, 3136) + 64
    index5 = 200768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3137, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf61', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg31_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf62', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op62_op63_op64_op66.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 25096}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 1606144}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
    buf63.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (25096, 64)
op63.sizes = ([25096], [64])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
class op63_loop_body:
    var_ranges = {z0: 25096, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf63', get_index_1, getitem)
        return store_reduction
op62_op63_op64_op66.snodes[2] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op64.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 1606144}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (25096, 64)
op64.sizes = ([8, 3137], [64])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = 200768*z0 + 64*z1 + z2
    index1 = 3168*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, getitem_1)
        return store_reduction
op62_op63_op64_op66.snodes[3] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 1606144}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 1606144}, None),
        MemoryDep('buf63', c0, {c0: 25096}, None),
        MemoryDep('buf64', 3168*c0 + c1, {c0: 8, c1: 3137}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25096, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 25096, c1: 64}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (1606144, 1)
op66.sizes = ([8, 3137, 64], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3137, 1, 25096])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 1], stride=[3168, 1, 25344])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 3137, z2: 64}
    index0 = 200768*z0 + 64*z1 + z2
    index1 = 3137*z0 + z1
    index2 = 3168*z0 + z1
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf63', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf64', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg32_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg33_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf66', get_index_5, add_1, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[25096, 512], stride=[512, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 12849152}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 12849152}, None)]
op68.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 25096, c1: 512}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 512], stride=[1606144, 512, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (12849152, 1)
op68.sizes = ([25096, 512], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[25096, 512], stride=[512, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 512], stride=[1606144, 512, 1])
class op68_loop_body:
    var_ranges = {z0: 25096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf67', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg35_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf68', get_index_4, mul_2, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = extern_kernels.mm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1605632}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf62', 200768*c0 + c1 + 64, {c0: 8, c1: 200704}, None),
        MemoryDep('buf69', 200768*c0 + c1 + 64, {c0: 8, c1: 200704}, None)]
op70.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 25088, c1: 64}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1605632, 1)
op70.sizes = ([8, 3136, 64], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 3137, 64], stride=[200768, 64, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[25096, 64], stride=[64, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 64}
    index0 = 200768*z0 + 64*z1 + z2 + 64
    index1 = z2
    index2 = 200704*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg37_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf70', get_index_3, add_1, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', 256*c0 + c1 + 64*c2, {c0: 128, c1: 64, c2: 4}, None)]
op71.unmet_dependencies = []
op71.met_dependencies = [MemoryDep('arg38_1', c0, {c0: 32768}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[128, 64, 2, 2], stride=[256, 1, 128, 64])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (32768, 1)
op71.sizes = ([128, 64, 4], [])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 2, 2], stride=[256, 4, 2, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 2, 2], stride=[256, 1, 128, 64])
class op71_loop_body:
    var_ranges = {z0: 128, z1: 64, z2: 4}
    index0 = 256*z0 + 4*z1 + z2
    index1 = 256*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg38_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf71', get_index_1, load, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf70', mode=None), StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.convolution


op73_op74_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op73_op74_op77.writes = 
    [   MemoryDep('buf73', c0, {c0: 6272}, None),
        MemoryDep('buf74', c0, {c0: 6272}, None),
        MemoryDep('buf77', 100480*c0 + c1, {c0: 8, c1: 100352}, None)]
op73_op74_op77.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 802816}, None)]
op73_op74_op77.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg40_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg41_1', c1, {c0: 6272, c1: 128}, None)]
op73_op74_op77.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf73.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = NonOwningLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100480, 128, 1])
    buf77.aliases = ['buf78']
    buf77.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op73_op74_op77.snodes[0] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 6272}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 802816}, None)]
op73.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 6272, c1: 128}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf73.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (6272, 128)
op73.sizes = ([6272], [128])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op73_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf73', get_index_2, getitem)
        return store_reduction
op73_op74_op77.snodes[1] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 6272}, None)]
op74.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 802816}, None)]
op74.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 6272, c1: 128}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (6272, 128)
op74.sizes = ([6272], [128])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op74_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_2, getitem_1)
        return store_reduction
op73_op74_op77.snodes[2] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', 100480*c0 + c1, {c0: 8, c1: 100352}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 802816}, None),
        MemoryDep('buf73', c0, {c0: 6272}, None),
        MemoryDep('buf74', c0, {c0: 6272}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg40_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg41_1', c1, {c0: 6272, c1: 128}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = NonOwningLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100480, 128, 1])
    buf77.aliases = ['buf78']
    buf77.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (802816, 1)
op77.sizes = ([8, 784, 128], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf77_layout = NonOwningLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100480, 128, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 128}
    index0 = 100352*z0 + 128*z1 + z2
    index1 = z2
    index2 = 784*z0 + z1
    index3 = 100480*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf73', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf74', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg41_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf77', get_index_6, add_2, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', 100480*c0 + c1, {c0: 8, c1: 128}, None)]
op76.unmet_dependencies = []
op76.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 8, c1: 128}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 128], stride=[100480, 128, 1])
    buf76.aliases = ['buf78']
    buf76.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (1024, 1)
op76.sizes = ([8, 128], [])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 128], stride=[128, 128, 1])
buf76_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 128], stride=[100480, 128, 1])
class op76_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = z1
    index1 = 100480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg42_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store


op78: NopKernelSchedulerNode(ConcatKernel)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf76', mode=None), StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ConcatKernel
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf78.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.convolution


op80_op81_op83_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op80_op81_op83_op84.writes = 
    [   MemoryDep('buf80', c0, {c0: 6280}, None),
        MemoryDep('buf81', c0, {c0: 6280}, None),
        MemoryDep('buf83', c0, {c0: 803840}, None),
        MemoryDep('buf84', c0, {c0: 803840}, None)]
op80_op81_op83_op84.unmet_dependencies = 
    [   MemoryDep('buf78', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf78', 100480*c0 + c2, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf79', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op80_op81_op83_op84.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg45_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg46_1', c1, {c0: 6280, c1: 128}, None)]
op80_op81_op83_op84.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op80_op81_op83_op84.snodes[0] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 6280}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf78', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf78', 100480*c0 + c2, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf79', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op80.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (6280, 128)
op80.sizes = ([8, 785], [128])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
class op80_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 785*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf80', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf78', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op80_op81_op83_op84.snodes[1] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 6280}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf78', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf78', 100480*c0 + c2, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf79', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op81.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (6280, 128)
op81.sizes = ([8, 785], [128])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 785*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf81', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf78', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op80_op81_op83_op84.snodes[2] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 803840}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf78', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf78', 100480*c0 + c2, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf79', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf80', c0, {c0: 6280}, None),
        MemoryDep('buf81', c0, {c0: 6280}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg45_1', c1, {c0: 6280, c1: 128}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (803840, 1)
op83.sizes = ([8, 785, 128], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op83_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 785*z0 + z1
    index6 = 100480*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf80', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf81', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg45_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf83', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf78', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op80_op81_op83_op84.snodes[3] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 803840}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 803840}, None)]
op84.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 6280, c1: 128}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (803840, 1)
op84.sizes = ([6280, 128], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op84_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf84', get_index_2, add, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg47_1', mode=None), StarDep(name='arg48_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.addmm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 7168}, None)]
op86.unmet_dependencies = [   MemoryDep('buf85', 301440*c0 + 43392*c1 + c2 + 384*c3 + 128, {c0: 8, c1: 7, c2: 128, c3: 113}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (7168, 113)
op86.sizes = ([8, 7, 128], [113])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
class op86_loop_body:
    var_ranges = {z0: 8, z1: 7, z2: 128, z3: 113}
    index0 = 113*z1 + z3
    index1 = 301440*z0 + 43392*z1 + z2 + 384*z3 + 128
    index2 = 896*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(785, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, -inf)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf86', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf85', get_index)
        return load


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1024}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', 896*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 7}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (1024, 7)
op87.sizes = ([8, 128], [7])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
class op87_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 7}
    index0 = 896*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, reduction)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 7168}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf85', 301440*c0 + 43392*c1 + c2 + 384*c3 + 128, {c0: 8, c1: 7, c2: 128, c3: 113}, None),
        MemoryDep('buf87', 128*c0 + c2, {c0: 8, c1: 7, c2: 128}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (7168, 113)
op88.sizes = ([8, 7, 128], [113])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 7, z2: 128, z3: 113}
    index0 = 113*z1 + z3
    index1 = 301440*z0 + 43392*z1 + z2 + 384*z3 + 128
    index2 = 128*z0 + z2
    index3 = 896*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(785, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf88', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf87', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        return exp


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 1024}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', 896*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 7}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (1024, 7)
op89.sizes = ([8, 128], [7])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
class op89_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 7}
    index0 = 896*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_1, reduction)
        return store_reduction


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 803840}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf85', 301440*c0 + 16*c1 + 384*c2 + c3 + 128, {c0: 8, c1: 8, c2: 785, c3: 16}, None),
        MemoryDep('buf87', 16*c0 + c2, {c0: 64, c1: 785, c2: 16}, None),
        MemoryDep('buf89', 16*c0 + c2, {c0: 64, c1: 785, c2: 16}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (803840, 1)
op90.sizes = ([8, 8, 785, 16], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 785, z3: 16}
    index0 = 301440*z0 + 16*z1 + 384*z2 + z3 + 128
    index1 = 128*z0 + 16*z1 + z3
    index2 = 100480*z0 + 12560*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf89', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf90', get_index_3, truediv, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 803840}, None)]
op91.unmet_dependencies = [   MemoryDep('buf85', 301440*c0 + 16*c1 + 384*c2 + c3 + 256, {c0: 8, c1: 8, c2: 785, c3: 16}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (803840, 1)
op91.sizes = ([8, 8, 785, 16], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 785, z3: 16}
    index0 = 301440*z0 + 16*z1 + 384*z2 + z3 + 256
    index1 = 100480*z0 + 12560*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, load, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None), StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 16], stride=[256, 16, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.bmm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 803840}, None)]
op93.unmet_dependencies = [   MemoryDep('buf85', 301440*c0 + 16*c1 + 384*c2 + c3, {c0: 8, c1: 8, c2: 785, c3: 16}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (803840, 1)
op93.sizes = ([8, 8, 785, 16], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 785, z3: 16}
    index0 = 301440*z0 + 16*z1 + 384*z2 + z3
    index1 = 100480*z0 + 12560*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf93', get_index_1, load, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf92', mode=None), StarDep(name='buf93', mode=None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[64, 785, 16], stride=[12560, 16, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op94.node.kernel = extern_kernels.bmm


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op95.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 28, 28], stride=[25088, 1, 896, 32])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = extern_kernels.convolution


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op96.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
    buf96.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op97.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98_op99: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op98_op99.writes = 
    [   MemoryDep('buf98', c0, {c0: 803840}, None),
        MemoryDep('buf99', c0, {c0: 803840}, None)]
op98_op99.unmet_dependencies = 
    [   MemoryDep('buf85', 384*c0 + c1, {c0: 6280, c1: 128}, None),
        MemoryDep('buf94', 100480*c0 + 16*c1 + 12560*c2 + c3, {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf95', 25088*c0 + I + 32*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf96', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf97', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None)]
op98_op99.met_dependencies = 
    [   MemoryDep('arg50_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg52_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg54_1', I, {c0: 6280, c1: 8, c2: 16}, None)]
op98_op99.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 8, 16], stride=[100480, 128, 16, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98_op99.snodes[0] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 803840}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf85', 384*c0 + c1, {c0: 6280, c1: 128}, None),
        MemoryDep('buf95', 25088*c0 + I + 32*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf96', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf97', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None)]
op98.met_dependencies = 
    [   MemoryDep('arg50_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg52_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg54_1', I, {c0: 6280, c1: 8, c2: 16}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (803840, 1)
op98.sizes = ([8, 785, 8, 16], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 28, 28], stride=[25088, 1, 896, 32])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 8, z3: 16}
    index0 = z1 - 1
    index1 = 301440*z0 + 384*z1 + 16*z2 + z3
    index2 = 16*z2 + z3
    index3 = 25088*z0 + I + 32*ModularIndexing(z1 - 1, 1, 784)
    index4 = I
    index5 = 37632*z0 + I + 48*ModularIndexing(z1 - 1, 1, 784)
    index6 = I
    index7 = 37632*z0 + I + 48*ModularIndexing(z1 - 1, 1, 784)
    index8 = I
    index9 = 100480*z0 + 128*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf98', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(80, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(80, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(128, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op98_op99.snodes[1] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 803840}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf94', 100480*c0 + 16*c1 + 12560*c2 + c3, {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf98', c0, {c0: 803840}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 8, 16], stride=[100480, 128, 16, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (803840, 1)
op99.sizes = ([8, 785, 8, 16], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[64, 785, 16], stride=[12560, 16, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 8, 16], stride=[100480, 128, 16, 1])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 8, z3: 16}
    index0 = 100480*z0 + 16*z1 + 12560*z2 + z3
    index1 = 100480*z0 + 128*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf99', get_index_2, add, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op101_op102_op103_op105: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op101_op102_op103_op105.writes = 
    [   MemoryDep('buf101', c0, {c0: 803840}, None),
        MemoryDep('buf102', c0, {c0: 6280}, None),
        MemoryDep('buf103', c0, {c0: 6280}, None),
        MemoryDep('buf105', c0, {c0: 803840}, None)]
op101_op102_op103_op105.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 803840}, None),
        MemoryDep('buf78', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf78', 100480*c0 + c2, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf79', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op101_op102_op103_op105.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg56_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg57_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg58_1', c1, {c0: 6280, c1: 128}, None)]
op101_op102_op103_op105.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
    buf102.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf103.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op101_op102_op103_op105.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 803840}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 803840}, None),
        MemoryDep('buf78', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf78', 100480*c0 + c2, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf79', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg56_1', c1, {c0: 6280, c1: 128}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (803840, 1)
op101.sizes = ([8, 785, 128], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 100480*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf100', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg56_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf101', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf78', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op101_op102_op103_op105.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 6280}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 803840}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
    buf102.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (6280, 128)
op102.sizes = ([6280], [128])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
class op102_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf102', get_index_1, getitem)
        return store_reduction
op101_op102_op103_op105.snodes[2] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 6280}, None)]
op103.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 803840}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf103.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (6280, 128)
op103.sizes = ([6280], [128])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
class op103_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, getitem_1)
        return store_reduction
op101_op102_op103_op105.snodes[3] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 803840}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 803840}, None),
        MemoryDep('buf102', c0, {c0: 6280}, None),
        MemoryDep('buf103', c0, {c0: 6280}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg58_1', c1, {c0: 6280, c1: 128}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (803840, 1)
op105.sizes = ([6280, 128], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op105_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf103', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg57_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg58_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, add_1, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[6280, 1024], stride=[1024, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 6430720}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 6430720}, None)]
op107.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 6280, c1: 1024}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1024], stride=[803840, 1024, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (6430720, 1)
op107.sizes = ([6280, 1024], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[6280, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1024], stride=[803840, 1024, 1])
class op107_loop_body:
    var_ranges = {z0: 6280, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg60_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf106', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg60_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf107', get_index_4, mul_2, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.node.kernel = extern_kernels.mm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 803840}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 803840}, None),
        MemoryDep('buf108', c0, {c0: 803840}, None)]
op109.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 6280, c1: 128}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf109.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (803840, 1)
op109.sizes = ([6280, 128], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op109_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg62_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf109', get_index_3, add_1, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op110.node.kernel = extern_kernels.convolution


op111_op112_op114_op115: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op111_op112_op114_op115.writes = 
    [   MemoryDep('buf111', c0, {c0: 6280}, None),
        MemoryDep('buf112', c0, {c0: 6280}, None),
        MemoryDep('buf114', c0, {c0: 803840}, None),
        MemoryDep('buf115', c0, {c0: 803840}, None)]
op111_op112_op114_op115.unmet_dependencies = 
    [   MemoryDep('buf109', 100480*c0 + c2 + 128*I, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf109', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf110', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op111_op112_op114_op115.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg64_1', c1, {c0: 6280, c1: 128}, None)]
op111_op112_op114_op115.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op111_op112_op114_op115.snodes[0] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 6280}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf109', 100480*c0 + c2 + 128*I, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf109', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf110', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op111.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (6280, 128)
op111.sizes = ([8, 785], [128])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2 + 128*I
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 785*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf111', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf109', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf109', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op111_op112_op114_op115.snodes[1] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 6280}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf109', 100480*c0 + c2 + 128*I, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf109', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf110', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None)]
op112.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (6280, 128)
op112.sizes = ([8, 785], [128])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2 + 128*I
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 785*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf112', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf109', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf109', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op111_op112_op114_op115.snodes[2] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 803840}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf109', 100480*c0 + c2 + 128*I, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf109', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf110', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf111', c0, {c0: 6280}, None),
        MemoryDep('buf112', c0, {c0: 6280}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 6280, c1: 128}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (803840, 1)
op114.sizes = ([8, 785, 128], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2 + 128*I
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 785*z0 + z1
    index6 = 100480*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf111', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf112', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg63_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf114', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf109', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf109', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op111_op112_op114_op115.snodes[3] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 803840}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 803840}, None)]
op115.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 6280, c1: 128}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (803840, 1)
op115.sizes = ([6280, 128], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op115_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf115', get_index_2, add, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg65_1', mode=None), StarDep(name='arg66_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
    ]
]
op116.node.kernel = extern_kernels.addmm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 7168}, None)]
op117.unmet_dependencies = [   MemoryDep('buf116', 301440*c0 + 43392*c1 + c2 + 384*c3 + 128, {c0: 8, c1: 7, c2: 128, c3: 113}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (7168, 113)
op117.sizes = ([8, 7, 128], [113])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 7, z2: 128, z3: 113}
    index0 = 113*z1 + z3
    index1 = 301440*z0 + 43392*z1 + z2 + 384*z3 + 128
    index2 = 896*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(785, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, -inf)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf116', get_index)
        return load


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 1024}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', 896*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 7}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (1024, 7)
op118.sizes = ([8, 128], [7])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
class op118_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 7}
    index0 = 896*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, reduction)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 7168}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', 301440*c0 + 43392*c1 + c2 + 384*c3 + 128, {c0: 8, c1: 7, c2: 128, c3: 113}, None),
        MemoryDep('buf118', 128*c0 + c2, {c0: 8, c1: 7, c2: 128}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (7168, 113)
op119.sizes = ([8, 7, 128], [113])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 7, z2: 128, z3: 113}
    index0 = 113*z1 + z3
    index1 = 301440*z0 + 43392*z1 + z2 + 384*z3 + 128
    index2 = 128*z0 + z2
    index3 = 896*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(785, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf119', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        return exp


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1024}, None)]
op120.unmet_dependencies = [MemoryDep('buf119', 896*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 7}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1024, 7)
op120.sizes = ([8, 128], [7])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16, 7], stride=[896, 16, 7168, 1, 128])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 7}
    index0 = 896*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_1, reduction)
        return store_reduction


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 803840}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf116', 301440*c0 + 16*c1 + 384*c2 + c3 + 128, {c0: 8, c1: 8, c2: 785, c3: 16}, None),
        MemoryDep('buf118', 16*c0 + c2, {c0: 64, c1: 785, c2: 16}, None),
        MemoryDep('buf120', 16*c0 + c2, {c0: 64, c1: 785, c2: 16}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (803840, 1)
op121.sizes = ([8, 8, 785, 16], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 16], stride=[128, 16, 1024, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
class op121_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 785, z3: 16}
    index0 = 301440*z0 + 16*z1 + 384*z2 + z3 + 128
    index1 = 128*z0 + 16*z1 + z3
    index2 = 100480*z0 + 12560*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf120', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf121', get_index_3, truediv, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 803840}, None)]
op122.unmet_dependencies = [   MemoryDep('buf116', 301440*c0 + 16*c1 + 384*c2 + c3 + 256, {c0: 8, c1: 8, c2: 785, c3: 16}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (803840, 1)
op122.sizes = ([8, 8, 785, 16], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 785, z3: 16}
    index0 = 301440*z0 + 16*z1 + 384*z2 + z3 + 256
    index1 = 100480*z0 + 12560*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, load, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf121', mode=None), StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 16], stride=[256, 16, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.bmm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 803840}, None)]
op124.unmet_dependencies = [   MemoryDep('buf116', 301440*c0 + 16*c1 + 384*c2 + c3, {c0: 8, c1: 8, c2: 785, c3: 16}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (803840, 1)
op124.sizes = ([8, 8, 785, 16], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 12560, 16, 1])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 785, z3: 16}
    index0 = 301440*z0 + 16*z1 + 384*z2 + z3
    index1 = 100480*z0 + 12560*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf124', get_index_1, load, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf123', mode=None), StarDep(name='buf124', mode=None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[64, 785, 16], stride=[12560, 16, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.bmm


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op126.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 28, 28], stride=[25088, 1, 896, 32])
    buf126.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op127.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.convolution


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op128.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129_op130: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op129_op130.writes = 
    [   MemoryDep('buf129', c0, {c0: 803840}, None),
        MemoryDep('buf130', c0, {c0: 803840}, None)]
op129_op130.unmet_dependencies = 
    [   MemoryDep('buf116', 384*c0 + c1, {c0: 6280, c1: 128}, None),
        MemoryDep('buf125', 100480*c0 + 16*c1 + 12560*c2 + c3, {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf126', 25088*c0 + I + 32*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf127', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf128', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None)]
op129_op130.met_dependencies = 
    [   MemoryDep('arg50_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg52_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg54_1', I, {c0: 6280, c1: 8, c2: 16}, None)]
op129_op130.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 8, 16], stride=[100480, 128, 16, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129_op130.snodes[0] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 803840}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf116', 384*c0 + c1, {c0: 6280, c1: 128}, None),
        MemoryDep('buf126', 25088*c0 + I + 32*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf127', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf128', 37632*c0 + I + 48*ModularIndexing(c1 - 1, 1, 784), {c0: 8, c1: 785, c2: 8, c3: 16}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg50_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg52_1', I, {c0: 6280, c1: 8, c2: 16}, None),
        MemoryDep('arg54_1', I, {c0: 6280, c1: 8, c2: 16}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (803840, 1)
op129.sizes = ([8, 785, 8, 16], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6280, 384], stride=[384, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 28, 28], stride=[25088, 1, 896, 32])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 28, 28], stride=[37632, 1, 1344, 48])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 8, z3: 16}
    index0 = z1 - 1
    index1 = 301440*z0 + 384*z1 + 16*z2 + z3
    index2 = 16*z2 + z3
    index3 = 25088*z0 + I + 32*ModularIndexing(z1 - 1, 1, 784)
    index4 = I
    index5 = 37632*z0 + I + 48*ModularIndexing(z1 - 1, 1, 784)
    index6 = I
    index7 = 37632*z0 + I + 48*ModularIndexing(z1 - 1, 1, 784)
    index8 = I
    index9 = 100480*z0 + 128*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf129', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(80, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(80, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(128, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op129_op130.snodes[1] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 803840}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf125', 100480*c0 + 16*c1 + 12560*c2 + c3, {c0: 8, c1: 785, c2: 8, c3: 16}, None),
        MemoryDep('buf129', c0, {c0: 803840}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 8, 16], stride=[100480, 128, 16, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (803840, 1)
op130.sizes = ([8, 785, 8, 16], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[64, 785, 16], stride=[12560, 16, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 785, 16], stride=[100480, 16, 128, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 8, 16], stride=[100480, 128, 16, 1])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 8, z3: 16}
    index0 = 100480*z0 + 16*z1 + 12560*z2 + z3
    index1 = 100480*z0 + 128*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf129', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf130', get_index_2, add, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op132_op133_op134_op136: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op132_op133_op134_op136.writes = 
    [   MemoryDep('buf132', c0, {c0: 803840}, None),
        MemoryDep('buf133', c0, {c0: 6280}, None),
        MemoryDep('buf134', c0, {c0: 6280}, None),
        MemoryDep('buf136', c0, {c0: 803840}, None)]
op132_op133_op134_op136.unmet_dependencies = 
    [   MemoryDep('buf109', 100480*c0 + c2 + 128*I, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf109', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf110', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf131', c0, {c0: 803840}, None)]
op132_op133_op134_op136.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg68_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg69_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg70_1', c1, {c0: 6280, c1: 128}, None)]
op132_op133_op134_op136.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
    buf133.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op132_op133_op134_op136.snodes[0] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 803840}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf109', 100480*c0 + c2 + 128*I, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf109', 100480*c0 + c2 + 128*ModularIndexing(I, 1, 784) + 128, {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf110', 100352*c0 + c2 + 128*ModularIndexing(I, 1, 784), {c0: 8, c1: 785, c2: 128}, None),
        MemoryDep('buf131', c0, {c0: 803840}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg68_1', c1, {c0: 6280, c1: 128}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (803840, 1)
op132.sizes = ([8, 785, 128], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op132_loop_body:
    var_ranges = {z0: 8, z1: 785, z2: 128}
    index0 = z1
    index1 = 100480*z0 + z2 + 128*I
    index2 = 100352*z0 + z2 + 128*ModularIndexing(I, 1, 784)
    index3 = z2
    index4 = 100480*z0 + z2 + 128*ModularIndexing(I, 1, 784) + 128
    index5 = 100480*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(785, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf131', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg68_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf132', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf109', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf109', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op132_op133_op134_op136.snodes[1] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 6280}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 803840}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
    buf133.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (6280, 128)
op133.sizes = ([6280], [128])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
class op133_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, getitem)
        return store_reduction
op132_op133_op134_op136.snodes[2] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 6280}, None)]
op134.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 803840}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (6280, 128)
op134.sizes = ([6280], [128])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
class op134_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf134', get_index_1, getitem_1)
        return store_reduction
op132_op133_op134_op136.snodes[3] =
op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 803840}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 803840}, None),
        MemoryDep('buf133', c0, {c0: 6280}, None),
        MemoryDep('buf134', c0, {c0: 6280}, None)]
op136.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 6280, c1: 128}, None),
        MemoryDep('arg70_1', c1, {c0: 6280, c1: 128}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (803840, 1)
op136.sizes = ([6280, 128], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6280])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1], stride=[785, 1, 6304])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
class op136_loop_body:
    var_ranges = {z0: 6280, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf134', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf136', get_index_5, add_1, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[6280, 1024], stride=[1024, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 6430720}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 6430720}, None)]
op138.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 6280, c1: 1024}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1024], stride=[803840, 1024, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (6430720, 1)
op138.sizes = ([6280, 1024], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[6280, 1024], stride=[1024, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 1024], stride=[803840, 1024, 1])
class op138_loop_body:
    var_ranges = {z0: 6280, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf138', get_index_4, mul_2, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.mm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 802816}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf132', 100480*c0 + c1 + 128, {c0: 8, c1: 100352}, None),
        MemoryDep('buf139', 100480*c0 + c1 + 128, {c0: 8, c1: 100352}, None)]
op140.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 6272, c1: 128}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (802816, 1)
op140.sizes = ([8, 784, 128], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 785, 128], stride=[100480, 128, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[6280, 128], stride=[128, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 128}
    index0 = 100480*z0 + 128*z1 + z2 + 128
    index1 = z2
    index2 = 100352*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg74_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf140', get_index_3, add_1, None)
        return store


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', 512*c0 + c1 + 128*c2, {c0: 320, c1: 128, c2: 4}, None)]
op141.unmet_dependencies = []
op141.met_dependencies = [MemoryDep('arg75_1', c0, {c0: 163840}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[320, 128, 2, 2], stride=[512, 1, 256, 128])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (163840, 1)
op141.sizes = ([320, 128, 4], [])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[320, 128, 2, 2], stride=[512, 4, 2, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[320, 128, 2, 2], stride=[512, 1, 256, 128])
class op141_loop_body:
    var_ranges = {z0: 320, z1: 128, z2: 4}
    index0 = 512*z0 + 4*z1 + z2
    index1 = 512*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg75_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf141', get_index_1, load, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf140', mode=None), StarDep(name='buf141', mode=None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.convolution


op143_op144_op147: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op143_op144_op147.writes = 
    [   MemoryDep('buf143', c0, {c0: 1568}, None),
        MemoryDep('buf144', c0, {c0: 1568}, None),
        MemoryDep('buf147', 63040*c0 + c1, {c0: 8, c1: 62720}, None)]
op143_op144_op147.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 501760}, None)]
op143_op144_op147.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg78_1', c1, {c0: 1568, c1: 320}, None)]
op143_op144_op147.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf143.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = NonOwningLayout('cuda', torch.float32, size=[8, 196, 320], stride=[63040, 320, 1])
    buf147.aliases = ['buf148']
    buf147.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op143_op144_op147.snodes[0] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 1568}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 501760}, None)]
op143.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 1568, c1: 320}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf143.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (1568, 320)
op143.sizes = ([1568], [320])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op143_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_2, getitem)
        return store_reduction
op143_op144_op147.snodes[1] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1568}, None)]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 501760}, None)]
op144.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 1568, c1: 320}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1568, 320)
op144.sizes = ([1568], [320])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op144_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_2, getitem_1)
        return store_reduction
op143_op144_op147.snodes[2] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', 63040*c0 + c1, {c0: 8, c1: 62720}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 501760}, None),
        MemoryDep('buf143', c0, {c0: 1568}, None),
        MemoryDep('buf144', c0, {c0: 1568}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg78_1', c1, {c0: 1568, c1: 320}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = NonOwningLayout('cuda', torch.float32, size=[8, 196, 320], stride=[63040, 320, 1])
    buf147.aliases = ['buf148']
    buf147.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (501760, 1)
op147.sizes = ([8, 196, 320], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf147_layout = NonOwningLayout('cuda', torch.float32, size=[8, 196, 320], stride=[63040, 320, 1])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 320}
    index0 = 62720*z0 + 320*z1 + z2
    index1 = z2
    index2 = 196*z0 + z1
    index3 = 63040*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf143', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf144', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg78_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf147', get_index_6, add_2, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', 63040*c0 + c1, {c0: 8, c1: 320}, None)]
op146.unmet_dependencies = []
op146.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 8, c1: 320}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 320], stride=[63040, 320, 1])
    buf146.aliases = ['buf148']
    buf146.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (2560, 1)
op146.sizes = ([8, 320], [])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 320], stride=[320, 320, 1])
buf146_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 320], stride=[63040, 320, 1])
class op146_loop_body:
    var_ranges = {z0: 8, z1: 320}
    index0 = z1
    index1 = 63040*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf146', get_index_1, load, None)
        return store


op148: NopKernelSchedulerNode(ConcatKernel)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None), StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ConcatKernel
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf148.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.convolution


op150_op151_op153_op154: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op153_op154.writes = 
    [   MemoryDep('buf150', c0, {c0: 1576}, None),
        MemoryDep('buf151', c0, {c0: 1576}, None),
        MemoryDep('buf153', c0, {c0: 504320}, None),
        MemoryDep('buf154', c0, {c0: 504320}, None)]
op150_op151_op153_op154.unmet_dependencies = 
    [   MemoryDep('buf148', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf148', 63040*c0 + c2, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf149', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None)]
op150_op151_op153_op154.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg82_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg83_1', c1, {c0: 1576, c1: 320}, None)]
op150_op151_op153_op154.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op150_op151_op153_op154.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1576}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf148', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf148', 63040*c0 + c2, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf149', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None)]
op150.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1576, 320)
op150.sizes = ([8, 197], [320])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf150', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf148', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf148', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op150_op151_op153_op154.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 1576}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf148', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf148', 63040*c0 + c2, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf149', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None)]
op151.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (1576, 320)
op151.sizes = ([8, 197], [320])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf151', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf148', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf148', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op150_op151_op153_op154.snodes[2] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 504320}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf148', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf148', 63040*c0 + c2, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf149', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf150', c0, {c0: 1576}, None),
        MemoryDep('buf151', c0, {c0: 1576}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg82_1', c1, {c0: 1576, c1: 320}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (504320, 1)
op153.sizes = ([8, 197, 320], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 197*z0 + z1
    index6 = 63040*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf150', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf151', get_index_5)
        constant_4 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg82_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf153', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf148', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf148', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op150_op151_op153_op154.snodes[3] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 504320}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 504320}, None)]
op154.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1576, c1: 320}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (504320, 1)
op154.sizes = ([1576, 320], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op154_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf154', get_index_2, add, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg84_1', mode=None), StarDep(name='arg85_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.addmm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 5120}, None)]
op156.unmet_dependencies = [   MemoryDep('buf155', 189120*c0 + 95040*c1 + c2 + 960*c3 + 320, {c0: 8, c1: 2, c2: 320, c3: 99}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (5120, 99)
op156.sizes = ([8, 2, 320], [99])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 320, z3: 99}
    index0 = 99*z1 + z3
    index1 = 189120*z0 + 95040*z1 + z2 + 960*z3 + 320
    index2 = 640*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(197, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, -inf)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf156', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf155', get_index)
        return load


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 2560}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', 640*c0 + c1 + 320*c2, {c0: 8, c1: 320, c2: 2}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (2560, 2)
op157.sizes = ([8, 320], [2])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
class op157_loop_body:
    var_ranges = {z0: 8, z1: 320, z2: 2}
    index0 = 640*z0 + z1 + 320*z2
    index1 = 320*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, reduction)
        return store_reduction


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 5120}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf155', 189120*c0 + 95040*c1 + c2 + 960*c3 + 320, {c0: 8, c1: 2, c2: 320, c3: 99}, None),
        MemoryDep('buf157', 320*c0 + c2, {c0: 8, c1: 2, c2: 320}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (5120, 99)
op158.sizes = ([8, 2, 320], [99])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 320, z3: 99}
    index0 = 99*z1 + z3
    index1 = 189120*z0 + 95040*z1 + z2 + 960*z3 + 320
    index2 = 320*z0 + z2
    index3 = 640*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(197, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf158', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf157', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        return exp


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 2560}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', 640*c0 + c1 + 320*c2, {c0: 8, c1: 320, c2: 2}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (2560, 2)
op159.sizes = ([8, 320], [2])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
class op159_loop_body:
    var_ranges = {z0: 8, z1: 320, z2: 2}
    index0 = 640*z0 + z1 + 320*z2
    index1 = 320*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, reduction)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 504320}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf155', 189120*c0 + 40*c1 + 960*c2 + c3 + 320, {c0: 8, c1: 8, c2: 197, c3: 40}, None),
        MemoryDep('buf157', 40*c0 + c2, {c0: 64, c1: 197, c2: 40}, None),
        MemoryDep('buf159', 40*c0 + c2, {c0: 64, c1: 197, c2: 40}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (504320, 1)
op160.sizes = ([8, 8, 197, 40], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
class op160_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 197, z3: 40}
    index0 = 189120*z0 + 40*z1 + 960*z2 + z3 + 320
    index1 = 320*z0 + 40*z1 + z3
    index2 = 63040*z0 + 7880*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf157', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf159', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf160', get_index_3, truediv, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 504320}, None)]
op161.unmet_dependencies = [   MemoryDep('buf155', 189120*c0 + 40*c1 + 960*c2 + c3 + 640, {c0: 8, c1: 8, c2: 197, c3: 40}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (504320, 1)
op161.sizes = ([8, 8, 197, 40], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 197, z3: 40}
    index0 = 189120*z0 + 40*z1 + 960*z2 + z3 + 640
    index1 = 63040*z0 + 7880*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf161', get_index_1, load, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf160', mode=None), StarDep(name='buf161', mode=None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda', torch.float32, size=[64, 40, 40], stride=[1600, 40, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.node.kernel = extern_kernels.bmm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 504320}, None)]
op163.unmet_dependencies = [   MemoryDep('buf155', 189120*c0 + 40*c1 + 960*c2 + c3, {c0: 8, c1: 8, c2: 197, c3: 40}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (504320, 1)
op163.sizes = ([8, 8, 197, 40], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 197, z3: 40}
    index0 = 189120*z0 + 40*z1 + 960*z2 + z3
    index1 = 63040*z0 + 7880*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf162', mode=None), StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[64, 197, 40], stride=[7880, 40, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.bmm


op165: ExternKernelSchedulerNode(ExternKernelAlloc)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op165.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelAlloc
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.convolution


op166: ExternKernelSchedulerNode(ExternKernelAlloc)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op166.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelAlloc
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf166.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = extern_kernels.convolution


op167: ExternKernelSchedulerNode(ExternKernelAlloc)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op167.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelAlloc
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.convolution


op168_op169: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op168_op169.writes = 
    [   MemoryDep('buf168', c0, {c0: 504320}, None),
        MemoryDep('buf169', c0, {c0: 504320}, None)]
op168_op169.unmet_dependencies = 
    [   MemoryDep('buf155', 960*c0 + c1, {c0: 1576, c1: 320}, None),
        MemoryDep('buf164', 63040*c0 + 40*c1 + 7880*c2 + c3, {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf165', 15680*c0 + I + 80*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf166', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf167', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None)]
op168_op169.met_dependencies = 
    [   MemoryDep('arg87_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg89_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg91_1', I, {c0: 1576, c1: 8, c2: 40}, None)]
op168_op169.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 8, 40], stride=[63040, 320, 40, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op168_op169.snodes[0] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 504320}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf155', 960*c0 + c1, {c0: 1576, c1: 320}, None),
        MemoryDep('buf165', 15680*c0 + I + 80*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf166', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf167', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg87_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg89_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg91_1', I, {c0: 1576, c1: 8, c2: 40}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (504320, 1)
op168.sizes = ([8, 197, 8, 40], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 8, z3: 40}
    index0 = z1 - 1
    index1 = 189120*z0 + 960*z1 + 40*z2 + z3
    index2 = 40*z2 + z3
    index3 = 15680*z0 + I + 80*ModularIndexing(z1 - 1, 1, 196)
    index4 = I
    index5 = 23520*z0 + I + 120*ModularIndexing(z1 - 1, 1, 196)
    index6 = I
    index7 = 23520*z0 + I + 120*ModularIndexing(z1 - 1, 1, 196)
    index8 = I
    index9 = 63040*z0 + 320*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf168', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(200, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(200, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(320, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op168_op169.snodes[1] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 504320}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf164', 63040*c0 + 40*c1 + 7880*c2 + c3, {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf168', c0, {c0: 504320}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 8, 40], stride=[63040, 320, 40, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (504320, 1)
op169.sizes = ([8, 197, 8, 40], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[64, 197, 40], stride=[7880, 40, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 8, 40], stride=[63040, 320, 40, 1])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 8, z3: 40}
    index0 = 63040*z0 + 40*z1 + 7880*z2 + z3
    index1 = 63040*z0 + 320*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        constant = ops.constant(0.15811388300841897, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf169', get_index_2, add, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.node.kernel = extern_kernels.mm


op171_op172_op173_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op171_op172_op173_op175.writes = 
    [   MemoryDep('buf171', c0, {c0: 504320}, None),
        MemoryDep('buf172', c0, {c0: 1576}, None),
        MemoryDep('buf173', c0, {c0: 1576}, None),
        MemoryDep('buf175', c0, {c0: 504320}, None)]
op171_op172_op173_op175.unmet_dependencies = 
    [   MemoryDep('buf148', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf148', 63040*c0 + c2, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf149', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf170', c0, {c0: 504320}, None)]
op171_op172_op173_op175.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg93_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg94_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg95_1', c1, {c0: 1576, c1: 320}, None)]
op171_op172_op173_op175.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op171_op172_op173_op175.snodes[0] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 504320}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf148', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf148', 63040*c0 + c2, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf149', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf170', c0, {c0: 504320}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg93_1', c1, {c0: 1576, c1: 320}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (504320, 1)
op171.sizes = ([8, 197, 320], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op171_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 63040*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf170', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg93_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf171', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf148', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf148', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op171_op172_op173_op175.snodes[1] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1576}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 504320}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (1576, 320)
op172.sizes = ([1576], [320])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
class op172_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_1, getitem)
        return store_reduction
op171_op172_op173_op175.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 1576}, None)]
op173.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 504320}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (1576, 320)
op173.sizes = ([1576], [320])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op173_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem_1)
        return store_reduction
op171_op172_op173_op175.snodes[3] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 504320}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 504320}, None),
        MemoryDep('buf172', c0, {c0: 1576}, None),
        MemoryDep('buf173', c0, {c0: 1576}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg95_1', c1, {c0: 1576, c1: 320}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (504320, 1)
op175.sizes = ([1576, 320], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op175_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf173', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, add_1, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[1576, 1280], stride=[1280, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2017280}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 2017280}, None)]
op177.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 1576, c1: 1280}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1280], stride=[252160, 1280, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2017280, 1)
op177.sizes = ([1576, 1280], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1576, 1280], stride=[1280, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1280], stride=[252160, 1280, 1])
class op177_loop_body:
    var_ranges = {z0: 1576, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf177', get_index_4, mul_2, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 504320}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 504320}, None),
        MemoryDep('buf178', c0, {c0: 504320}, None)]
op179.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 1576, c1: 320}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf179.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (504320, 1)
op179.sizes = ([1576, 320], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op179_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf179', get_index_3, add_1, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.convolution


op181_op182_op184_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op181_op182_op184_op185.writes = 
    [   MemoryDep('buf181', c0, {c0: 1576}, None),
        MemoryDep('buf182', c0, {c0: 1576}, None),
        MemoryDep('buf184', c0, {c0: 504320}, None),
        MemoryDep('buf185', c0, {c0: 504320}, None)]
op181_op182_op184_op185.unmet_dependencies = 
    [   MemoryDep('buf179', 63040*c0 + c2 + 320*I, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf179', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf180', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None)]
op181_op182_op184_op185.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg101_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op181_op182_op184_op185.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op181_op182_op184_op185.snodes[0] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 1576}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf179', 63040*c0 + c2 + 320*I, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf179', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf180', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None)]
op181.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (1576, 320)
op181.sizes = ([8, 197], [320])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op181_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2 + 320*I
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf181', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf179', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op181_op182_op184_op185.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1576}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf179', 63040*c0 + c2 + 320*I, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf179', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf180', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None)]
op182.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1576, 320)
op182.sizes = ([8, 197], [320])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2 + 320*I
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf182', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf179', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op181_op182_op184_op185.snodes[2] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 504320}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf179', 63040*c0 + c2 + 320*I, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf179', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf180', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf181', c0, {c0: 1576}, None),
        MemoryDep('buf182', c0, {c0: 1576}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (504320, 1)
op184.sizes = ([8, 197, 320], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2 + 320*I
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 197*z0 + z1
    index6 = 63040*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf181', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf182', get_index_5)
        constant_4 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg100_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf184', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf179', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op181_op182_op184_op185.snodes[3] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 504320}, None)]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 504320}, None)]
op185.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 1576, c1: 320}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (504320, 1)
op185.sizes = ([1576, 320], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op185_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf185', get_index_2, add, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg102_1', mode=None), StarDep(name='arg103_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.addmm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 5120}, None)]
op187.unmet_dependencies = [   MemoryDep('buf186', 189120*c0 + 95040*c1 + c2 + 960*c3 + 320, {c0: 8, c1: 2, c2: 320, c3: 99}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (5120, 99)
op187.sizes = ([8, 2, 320], [99])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 320, z3: 99}
    index0 = 99*z1 + z3
    index1 = 189120*z0 + 95040*z1 + z2 + 960*z3 + 320
    index2 = 640*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(197, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, -inf)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf186', get_index)
        return load


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 2560}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', 640*c0 + c1 + 320*c2, {c0: 8, c1: 320, c2: 2}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (2560, 2)
op188.sizes = ([8, 320], [2])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
class op188_loop_body:
    var_ranges = {z0: 8, z1: 320, z2: 2}
    index0 = 640*z0 + z1 + 320*z2
    index1 = 320*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_1, reduction)
        return store_reduction


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 5120}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf186', 189120*c0 + 95040*c1 + c2 + 960*c3 + 320, {c0: 8, c1: 2, c2: 320, c3: 99}, None),
        MemoryDep('buf188', 320*c0 + c2, {c0: 8, c1: 2, c2: 320}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (5120, 99)
op189.sizes = ([8, 2, 320], [99])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
class op189_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 320, z3: 99}
    index0 = 99*z1 + z3
    index1 = 189120*z0 + 95040*z1 + z2 + 960*z3 + 320
    index2 = 320*z0 + z2
    index3 = 640*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(197, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf189', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf188', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        return exp


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 2560}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', 640*c0 + c1 + 320*c2, {c0: 8, c1: 320, c2: 2}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (2560, 2)
op190.sizes = ([8, 320], [2])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40, 2], stride=[640, 40, 5120, 1, 320])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
class op190_loop_body:
    var_ranges = {z0: 8, z1: 320, z2: 2}
    index0 = 640*z0 + z1 + 320*z2
    index1 = 320*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf190', get_index_1, reduction)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 504320}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf186', 189120*c0 + 40*c1 + 960*c2 + c3 + 320, {c0: 8, c1: 8, c2: 197, c3: 40}, None),
        MemoryDep('buf188', 40*c0 + c2, {c0: 64, c1: 197, c2: 40}, None),
        MemoryDep('buf190', 40*c0 + c2, {c0: 64, c1: 197, c2: 40}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (504320, 1)
op191.sizes = ([8, 8, 197, 40], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 40], stride=[320, 40, 2560, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 197, z3: 40}
    index0 = 189120*z0 + 40*z1 + 960*z2 + z3 + 320
    index1 = 320*z0 + 40*z1 + z3
    index2 = 63040*z0 + 7880*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf190', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf191', get_index_3, truediv, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 504320}, None)]
op192.unmet_dependencies = [   MemoryDep('buf186', 189120*c0 + 40*c1 + 960*c2 + c3 + 640, {c0: 8, c1: 8, c2: 197, c3: 40}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (504320, 1)
op192.sizes = ([8, 8, 197, 40], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 197, z3: 40}
    index0 = 189120*z0 + 40*z1 + 960*z2 + z3 + 640
    index1 = 63040*z0 + 7880*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf192', get_index_1, load, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf191', mode=None), StarDep(name='buf192', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[64, 40, 40], stride=[1600, 40, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op193.node.kernel = extern_kernels.bmm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 504320}, None)]
op194.unmet_dependencies = [   MemoryDep('buf186', 189120*c0 + 40*c1 + 960*c2 + c3, {c0: 8, c1: 8, c2: 197, c3: 40}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (504320, 1)
op194.sizes = ([8, 8, 197, 40], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 7880, 40, 1])
class op194_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 197, z3: 40}
    index0 = 189120*z0 + 40*z1 + 960*z2 + z3
    index1 = 63040*z0 + 7880*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf194', get_index_1, load, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf193', mode=None), StarDep(name='buf194', mode=None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[64, 197, 40], stride=[7880, 40, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = extern_kernels.bmm


op196: ExternKernelSchedulerNode(ExternKernelAlloc)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op196.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelAlloc
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.convolution


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op197.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op198.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op199_op200.writes = 
    [   MemoryDep('buf199', c0, {c0: 504320}, None),
        MemoryDep('buf200', c0, {c0: 504320}, None)]
op199_op200.unmet_dependencies = 
    [   MemoryDep('buf186', 960*c0 + c1, {c0: 1576, c1: 320}, None),
        MemoryDep('buf195', 63040*c0 + 40*c1 + 7880*c2 + c3, {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf196', 15680*c0 + I + 80*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf197', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf198', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None)]
op199_op200.met_dependencies = 
    [   MemoryDep('arg87_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg89_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg91_1', I, {c0: 1576, c1: 8, c2: 40}, None)]
op199_op200.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 8, 40], stride=[63040, 320, 40, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199_op200.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 504320}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf186', 960*c0 + c1, {c0: 1576, c1: 320}, None),
        MemoryDep('buf196', 15680*c0 + I + 80*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf197', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf198', 23520*c0 + I + 120*ModularIndexing(c1 - 1, 1, 196), {c0: 8, c1: 197, c2: 8, c3: 40}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg87_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg89_1', I, {c0: 1576, c1: 8, c2: 40}, None),
        MemoryDep('arg91_1', I, {c0: 1576, c1: 8, c2: 40}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (504320, 1)
op199.sizes = ([8, 197, 8, 40], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 960], stride=[960, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
class op199_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 8, z3: 40}
    index0 = z1 - 1
    index1 = 189120*z0 + 960*z1 + 40*z2 + z3
    index2 = 40*z2 + z3
    index3 = 15680*z0 + I + 80*ModularIndexing(z1 - 1, 1, 196)
    index4 = I
    index5 = 23520*z0 + I + 120*ModularIndexing(z1 - 1, 1, 196)
    index6 = I
    index7 = 23520*z0 + I + 120*ModularIndexing(z1 - 1, 1, 196)
    index8 = I
    index9 = 63040*z0 + 320*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf199', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(200, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(200, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(320, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op199_op200.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 504320}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf195', 63040*c0 + 40*c1 + 7880*c2 + c3, {c0: 8, c1: 197, c2: 8, c3: 40}, None),
        MemoryDep('buf199', c0, {c0: 504320}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 8, 40], stride=[63040, 320, 40, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (504320, 1)
op200.sizes = ([8, 197, 8, 40], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[64, 197, 40], stride=[7880, 40, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 197, 40], stride=[63040, 40, 320, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 8, 40], stride=[63040, 320, 40, 1])
class op200_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 8, z3: 40}
    index0 = 63040*z0 + 40*z1 + 7880*z2 + z3
    index1 = 63040*z0 + 320*z1 + 40*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        constant = ops.constant(0.15811388300841897, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf199', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf200', get_index_2, add, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.mm


op202_op203_op204_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op202_op203_op204_op206.writes = 
    [   MemoryDep('buf202', c0, {c0: 504320}, None),
        MemoryDep('buf203', c0, {c0: 1576}, None),
        MemoryDep('buf204', c0, {c0: 1576}, None),
        MemoryDep('buf206', c0, {c0: 504320}, None)]
op202_op203_op204_op206.unmet_dependencies = 
    [   MemoryDep('buf179', 63040*c0 + c2 + 320*I, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf179', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf180', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf201', c0, {c0: 504320}, None)]
op202_op203_op204_op206.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg106_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg107_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op202_op203_op204_op206.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op202_op203_op204_op206.snodes[0] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 504320}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf179', 63040*c0 + c2 + 320*I, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf179', 63040*c0 + c2 + 320*ModularIndexing(I, 1, 196) + 320, {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf180', 62720*c0 + c2 + 320*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 320}, None),
        MemoryDep('buf201', c0, {c0: 504320}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg81_1', c1, {c0: 1576, c1: 320}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (504320, 1)
op202.sizes = ([8, 197, 320], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 320}
    index0 = z1
    index1 = 63040*z0 + z2 + 320*I
    index2 = 62720*z0 + z2 + 320*ModularIndexing(I, 1, 196)
    index3 = z2
    index4 = 63040*z0 + z2 + 320*ModularIndexing(I, 1, 196) + 320
    index5 = 63040*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf201', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg105_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf202', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf179', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op202_op203_op204_op206.snodes[1] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1576}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 504320}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (1576, 320)
op203.sizes = ([1576], [320])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
class op203_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_1, getitem)
        return store_reduction
op202_op203_op204_op206.snodes[2] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 1576}, None)]
op204.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 504320}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (1576, 320)
op204.sizes = ([1576], [320])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op204_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_1, getitem_1)
        return store_reduction
op202_op203_op204_op206.snodes[3] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 504320}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 504320}, None),
        MemoryDep('buf203', c0, {c0: 1576}, None),
        MemoryDep('buf204', c0, {c0: 1576}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 1576, c1: 320}, None),
        MemoryDep('arg107_1', c1, {c0: 1576, c1: 320}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (504320, 1)
op206.sizes = ([1576, 320], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1576])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
class op206_loop_body:
    var_ranges = {z0: 1576, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf204', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg106_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg107_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf206', get_index_5, add_1, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[1576, 1280], stride=[1280, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 2017280}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 2017280}, None)]
op208.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 1576, c1: 1280}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1280], stride=[252160, 1280, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (2017280, 1)
op208.sizes = ([1576, 1280], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1576, 1280], stride=[1280, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1280], stride=[252160, 1280, 1])
class op208_loop_body:
    var_ranges = {z0: 1576, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf208', get_index_4, mul_2, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 501760}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf202', 63040*c0 + c1 + 320, {c0: 8, c1: 62720}, None),
        MemoryDep('buf209', 63040*c0 + c1 + 320, {c0: 8, c1: 62720}, None)]
op210.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 1568, c1: 320}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (501760, 1)
op210.sizes = ([8, 196, 320], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 320], stride=[63040, 320, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1576, 320], stride=[320, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 320}
    index0 = 63040*z0 + 320*z1 + z2 + 320
    index1 = z2
    index2 = 62720*z0 + 320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf209', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf210', get_index_3, add_1, None)
        return store


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', 1280*c0 + c1 + 320*c2, {c0: 512, c1: 320, c2: 4}, None)]
op211.unmet_dependencies = []
op211.met_dependencies = [MemoryDep('arg112_1', c0, {c0: 655360}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[512, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (655360, 1)
op211.sizes = ([512, 320, 4], [])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[512, 320, 2, 2], stride=[1280, 4, 2, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[512, 320, 2, 2], stride=[1280, 1, 640, 320])
class op211_loop_body:
    var_ranges = {z0: 512, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg112_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf211', get_index_1, load, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelAlloc)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf210', mode=None), StarDep(name='buf211', mode=None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ExternKernelAlloc
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op212.node.kernel = extern_kernels.convolution


op213_op214_op217: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op213_op214_op217.writes = 
    [   MemoryDep('buf213', c0, {c0: 392}, None),
        MemoryDep('buf214', c0, {c0: 392}, None),
        MemoryDep('buf217', 25600*c0 + c1, {c0: 8, c1: 25088}, None)]
op213_op214_op217.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 200704}, None)]
op213_op214_op217.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg114_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg115_1', c1, {c0: 392, c1: 512}, None)]
op213_op214_op217.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf213.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
    buf217: ComputedBuffer
    buf217.layout = NonOwningLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25600, 512, 1])
    buf217.aliases = ['buf218']
    buf217.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op213_op214_op217.snodes[0] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 392}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 200704}, None)]
op213.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 392, c1: 512}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf213.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (392, 512)
op213.sizes = ([392], [512])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op213_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_2, getitem)
        return store_reduction
op213_op214_op217.snodes[1] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 392}, None)]
op214.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 200704}, None)]
op214.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 392, c1: 512}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (392, 512)
op214.sizes = ([392], [512])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op214_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf214', get_index_2, getitem_1)
        return store_reduction
op213_op214_op217.snodes[2] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', 25600*c0 + c1, {c0: 8, c1: 25088}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 200704}, None),
        MemoryDep('buf213', c0, {c0: 392}, None),
        MemoryDep('buf214', c0, {c0: 392}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg114_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg115_1', c1, {c0: 392, c1: 512}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = NonOwningLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25600, 512, 1])
    buf217.aliases = ['buf218']
    buf217.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (200704, 1)
op217.sizes = ([8, 49, 512], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf217_layout = NonOwningLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25600, 512, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 512}
    index0 = 25088*z0 + 512*z1 + z2
    index1 = z2
    index2 = 49*z0 + z1
    index3 = 25600*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf213', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf214', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg115_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf217', get_index_6, add_2, None)
        return store


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', 25600*c0 + c1, {c0: 8, c1: 512}, None)]
op216.unmet_dependencies = []
op216.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 8, c1: 512}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 512], stride=[25600, 512, 1])
    buf216.aliases = ['buf218']
    buf216.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op216.group.device = cuda:0
op216.group.iteration = (4096, 1)
op216.sizes = ([8, 512], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 512], stride=[512, 512, 1])
buf216_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 512], stride=[25600, 512, 1])
class op216_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = z1
    index1 = 25600*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf216', get_index_1, load, None)
        return store


op218: NopKernelSchedulerNode(ConcatKernel)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf216', mode=None), StarDep(name='buf217', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ConcatKernel
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf218.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op219.node.kernel = extern_kernels.convolution


op220_op221_op223_op224: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op220_op221_op223_op224.writes = 
    [   MemoryDep('buf220', c0, {c0: 400}, None),
        MemoryDep('buf221', c0, {c0: 400}, None),
        MemoryDep('buf223', c0, {c0: 204800}, None),
        MemoryDep('buf224', c0, {c0: 204800}, None)]
op220_op221_op223_op224.unmet_dependencies = 
    [   MemoryDep('buf218', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf218', 25600*c0 + c2, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf219', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None)]
op220_op221_op223_op224.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg119_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg120_1', c1, {c0: 400, c1: 512}, None)]
op220_op221_op223_op224.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False)]
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op220_op221_op223_op224.snodes[0] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 400}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf218', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf218', 25600*c0 + c2, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf219', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None)]
op220.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (400, 512)
op220.sizes = ([8, 50], [512])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op220_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 50*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf220', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf218', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf218', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op220_op221_op223_op224.snodes[1] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 400}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf218', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf218', 25600*c0 + c2, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf219', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None)]
op221.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (400, 512)
op221.sizes = ([8, 50], [512])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op221_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 50*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf221', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf218', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf218', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op220_op221_op223_op224.snodes[2] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 204800}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf218', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf218', 25600*c0 + c2, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf219', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf220', c0, {c0: 400}, None),
        MemoryDep('buf221', c0, {c0: 400}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg119_1', c1, {c0: 400, c1: 512}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (204800, 1)
op223.sizes = ([8, 50, 512], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op223_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 50*z0 + z1
    index6 = 25600*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf220', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf221', get_index_5)
        constant_4 = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg119_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf223', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf218', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf218', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op220_op221_op223_op224.snodes[3] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 204800}, None)]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 204800}, None)]
op224.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 400, c1: 512}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (204800, 1)
op224.sizes = ([400, 512], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op224_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf224', get_index_2, add, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg121_1', mode=None), StarDep(name='arg122_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.addmm


op226_op227: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op226_op227.writes = 
    [   MemoryDep('buf226', c0, {c0: 4096}, None),
        MemoryDep('buf227', c0, {c0: 4096}, None)]
op226_op227.unmet_dependencies = [   MemoryDep('buf225', 76800*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 50}, None)]
op226_op227.met_dependencies = []
op226_op227.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
    ]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226_op227.snodes[0] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 4096}, None)]
op226.unmet_dependencies = [   MemoryDep('buf225', 76800*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 50}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (4096, 50)
op226.sizes = ([8, 512], [50])
buf225_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 50}
    index0 = 76800*z0 + z1 + 1536*z2 + 512
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf226', get_index_1, reduction)
        return store_reduction
op226_op227.snodes[1] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 4096}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf225', 76800*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 50}, None),
        MemoryDep('buf226', c0, {c0: 4096}, None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (4096, 50)
op227.sizes = ([8, 512], [50])
buf225_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 50}
    index0 = 76800*z0 + z1 + 1536*z2 + 512
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf227', get_index_2, reduction)
        return store_reduction


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 204800}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf225', 76800*c0 + 64*c1 + 1536*c2 + c3 + 512, {c0: 8, c1: 8, c2: 50, c3: 64}, None),
        MemoryDep('buf226', 64*c0 + c2, {c0: 64, c1: 50, c2: 64}, None),
        MemoryDep('buf227', 64*c0 + c2, {c0: 64, c1: 50, c2: 64}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (204800, 1)
op228.sizes = ([8, 8, 50, 64], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 50, z3: 64}
    index0 = 76800*z0 + 64*z1 + 1536*z2 + z3 + 512
    index1 = 512*z0 + 64*z1 + z3
    index2 = 25600*z0 + 3200*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf227', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf228', get_index_3, truediv, None)
        return store


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 204800}, None)]
op229.unmet_dependencies = [   MemoryDep('buf225', 76800*c0 + 64*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 8, c2: 50, c3: 64}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (204800, 1)
op229.sizes = ([8, 8, 50, 64], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
class op229_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 50, z3: 64}
    index0 = 76800*z0 + 64*z1 + 1536*z2 + z3 + 1024
    index1 = 25600*z0 + 3200*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf229', get_index_1, load, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None), StarDep(name='buf229', mode=None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 64], stride=[4096, 64, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.bmm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 204800}, None)]
op231.unmet_dependencies = [   MemoryDep('buf225', 76800*c0 + 64*c1 + 1536*c2 + c3, {c0: 8, c1: 8, c2: 50, c3: 64}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (204800, 1)
op231.sizes = ([8, 8, 50, 64], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 50, z3: 64}
    index0 = 76800*z0 + 64*z1 + 1536*z2 + z3
    index1 = 25600*z0 + 3200*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf231', get_index_1, load, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf230', mode=None), StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda', torch.float32, size=[64, 50, 64], stride=[3200, 64, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op232.node.kernel = extern_kernels.bmm


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op233.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: ExternKernelSchedulerNode(ExternKernelAlloc)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op234.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op234.outputs = [
    buf234: ExternKernelAlloc
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.node.kernel = extern_kernels.convolution


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op235.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op236_op237.writes = 
    [   MemoryDep('buf236', c0, {c0: 204800}, None),
        MemoryDep('buf237', c0, {c0: 204800}, None)]
op236_op237.unmet_dependencies = 
    [   MemoryDep('buf225', 1536*c0 + c1, {c0: 400, c1: 512}, None),
        MemoryDep('buf232', 25600*c0 + 64*c1 + 3200*c2 + c3, {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf233', 6272*c0 + I + 128*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf234', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf235', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None)]
op236_op237.met_dependencies = 
    [   MemoryDep('arg124_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg126_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg128_1', I, {c0: 400, c1: 8, c2: 64}, None)]
op236_op237.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 8, 64], stride=[25600, 512, 64, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236_op237.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 204800}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf225', 1536*c0 + c1, {c0: 400, c1: 512}, None),
        MemoryDep('buf233', 6272*c0 + I + 128*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf234', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf235', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg124_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg126_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg128_1', I, {c0: 400, c1: 8, c2: 64}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (204800, 1)
op236.sizes = ([8, 50, 8, 64], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 8, z3: 64}
    index0 = z1 - 1
    index1 = 76800*z0 + 1536*z1 + 64*z2 + z3
    index2 = 64*z2 + z3
    index3 = 6272*z0 + I + 128*ModularIndexing(z1 - 1, 1, 49)
    index4 = I
    index5 = 9408*z0 + I + 192*ModularIndexing(z1 - 1, 1, 49)
    index6 = I
    index7 = 9408*z0 + I + 192*ModularIndexing(z1 - 1, 1, 49)
    index8 = I
    index9 = 25600*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf236', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg124_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(320, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(320, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(512, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op236_op237.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 204800}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf232', 25600*c0 + 64*c1 + 3200*c2 + c3, {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf236', c0, {c0: 204800}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 8, 64], stride=[25600, 512, 64, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (204800, 1)
op237.sizes = ([8, 50, 8, 64], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[64, 50, 64], stride=[3200, 64, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 8, 64], stride=[25600, 512, 64, 1])
class op237_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 8, z3: 64}
    index0 = 25600*z0 + 64*z1 + 3200*z2 + z3
    index1 = 25600*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf236', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf237', get_index_2, add, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239_op240_op241_op243: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op239_op240_op241_op243.writes = 
    [   MemoryDep('buf239', c0, {c0: 204800}, None),
        MemoryDep('buf240', c0, {c0: 400}, None),
        MemoryDep('buf241', c0, {c0: 400}, None),
        MemoryDep('buf243', c0, {c0: 204800}, None)]
op239_op240_op241_op243.unmet_dependencies = 
    [   MemoryDep('buf218', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf218', 25600*c0 + c2, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf219', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf238', c0, {c0: 204800}, None)]
op239_op240_op241_op243.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg130_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg131_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg132_1', c1, {c0: 400, c1: 512}, None)]
op239_op240_op241_op243.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf240.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf241.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op239_op240_op241_op243.snodes[0] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 204800}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf218', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf218', 25600*c0 + c2, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf219', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf238', c0, {c0: 204800}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg130_1', c1, {c0: 400, c1: 512}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (204800, 1)
op239.sizes = ([8, 50, 512], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 25600*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf238', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg130_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf239', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf218', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf218', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op239_op240_op241_op243.snodes[1] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 400}, None)]
op240.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 204800}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf240.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (400, 512)
op240.sizes = ([400], [512])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op240_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf240', get_index_1, getitem)
        return store_reduction
op239_op240_op241_op243.snodes[2] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 400}, None)]
op241.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 204800}, None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf241.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (400, 512)
op241.sizes = ([400], [512])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op241_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf241', get_index_1, getitem_1)
        return store_reduction
op239_op240_op241_op243.snodes[3] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 204800}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 204800}, None),
        MemoryDep('buf240', c0, {c0: 400}, None),
        MemoryDep('buf241', c0, {c0: 400}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg132_1', c1, {c0: 400, c1: 512}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (204800, 1)
op243.sizes = ([400, 512], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op243_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf240', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf241', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg131_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg132_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf243', get_index_5, add_1, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda', torch.float32, size=[400, 2048], stride=[2048, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 819200}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 819200}, None)]
op245.met_dependencies = [MemoryDep('arg134_1', c1, {c0: 400, c1: 2048}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 2048], stride=[102400, 2048, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (819200, 1)
op245.sizes = ([400, 2048], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[400, 2048], stride=[2048, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 2048], stride=[102400, 2048, 1])
class op245_loop_body:
    var_ranges = {z0: 400, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf245', get_index_4, mul_2, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False)]
]
op246.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 204800}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 204800}, None),
        MemoryDep('buf246', c0, {c0: 204800}, None)]
op247.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 400, c1: 512}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf247.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op247.group.device = cuda:0
op247.group.iteration = (204800, 1)
op247.sizes = ([400, 512], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op247_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf246', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf247', get_index_3, add_1, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelAlloc)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelAlloc
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.convolution


op249_op250_op252_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op249_op250_op252_op253.writes = 
    [   MemoryDep('buf249', c0, {c0: 400}, None),
        MemoryDep('buf250', c0, {c0: 400}, None),
        MemoryDep('buf252', c0, {c0: 204800}, None),
        MemoryDep('buf253', c0, {c0: 204800}, None)]
op249_op250_op252_op253.unmet_dependencies = 
    [   MemoryDep('buf247', 25600*c0 + c2 + 512*I, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf247', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf248', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None)]
op249_op250_op252_op253.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg137_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg138_1', c1, {c0: 400, c1: 512}, None)]
op249_op250_op252_op253.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf252.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op249_op250_op252_op253.snodes[0] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 400}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf247', 25600*c0 + c2 + 512*I, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf247', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf248', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None)]
op249.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (400, 512)
op249.sizes = ([8, 50], [512])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op249_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2 + 512*I
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 50*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf249', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf247', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf247', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op249_op250_op252_op253.snodes[1] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 400}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf247', 25600*c0 + c2 + 512*I, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf247', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf248', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None)]
op250.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (400, 512)
op250.sizes = ([8, 50], [512])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2 + 512*I
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 50*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf250', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf247', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf247', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op249_op250_op252_op253.snodes[2] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 204800}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf247', 25600*c0 + c2 + 512*I, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf247', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf248', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf249', c0, {c0: 400}, None),
        MemoryDep('buf250', c0, {c0: 400}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg137_1', c1, {c0: 400, c1: 512}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf252.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (204800, 1)
op252.sizes = ([8, 50, 512], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2 + 512*I
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 50*z0 + z1
    index6 = 25600*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf249', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf250', get_index_5)
        constant_4 = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg137_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf252', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf247', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf247', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op249_op250_op252_op253.snodes[3] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 204800}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 204800}, None)]
op253.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 400, c1: 512}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (204800, 1)
op253.sizes = ([400, 512], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op253_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf253', get_index_2, add, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg139_1', mode=None), StarDep(name='arg140_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op254.node.kernel = extern_kernels.addmm


op255_op256: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op255_op256.writes = 
    [   MemoryDep('buf255', c0, {c0: 4096}, None),
        MemoryDep('buf256', c0, {c0: 4096}, None)]
op255_op256.unmet_dependencies = [   MemoryDep('buf254', 76800*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 50}, None)]
op255_op256.met_dependencies = []
op255_op256.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255_op256.snodes[0] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 4096}, None)]
op255.unmet_dependencies = [   MemoryDep('buf254', 76800*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 50}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (4096, 50)
op255.sizes = ([8, 512], [50])
buf254_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 50}
    index0 = 76800*z0 + z1 + 1536*z2 + 512
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf255', get_index_1, reduction)
        return store_reduction
op255_op256.snodes[1] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 4096}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf254', 76800*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 50}, None),
        MemoryDep('buf255', c0, {c0: 4096}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (4096, 50)
op256.sizes = ([8, 512], [50])
buf254_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
class op256_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 50}
    index0 = 76800*z0 + z1 + 1536*z2 + 512
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf255', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_2, reduction)
        return store_reduction


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 204800}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf254', 76800*c0 + 64*c1 + 1536*c2 + c3 + 512, {c0: 8, c1: 8, c2: 50, c3: 64}, None),
        MemoryDep('buf255', 64*c0 + c2, {c0: 64, c1: 50, c2: 64}, None),
        MemoryDep('buf256', 64*c0 + c2, {c0: 64, c1: 50, c2: 64}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (204800, 1)
op257.sizes = ([8, 8, 50, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 64], stride=[512, 64, 4096, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 50, z3: 64}
    index0 = 76800*z0 + 64*z1 + 1536*z2 + z3 + 512
    index1 = 512*z0 + 64*z1 + z3
    index2 = 25600*z0 + 3200*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf255', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf256', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf257', get_index_3, truediv, None)
        return store


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 204800}, None)]
op258.unmet_dependencies = [   MemoryDep('buf254', 76800*c0 + 64*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 8, c2: 50, c3: 64}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (204800, 1)
op258.sizes = ([8, 8, 50, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
class op258_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 50, z3: 64}
    index0 = 76800*z0 + 64*z1 + 1536*z2 + z3 + 1024
    index1 = 25600*z0 + 3200*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf258', get_index_1, load, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf257', mode=None), StarDep(name='buf258', mode=None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 64], stride=[4096, 64, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.node.kernel = extern_kernels.bmm


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 204800}, None)]
op260.unmet_dependencies = [   MemoryDep('buf254', 76800*c0 + 64*c1 + 1536*c2 + c3, {c0: 8, c1: 8, c2: 50, c3: 64}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (204800, 1)
op260.sizes = ([8, 8, 50, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 3200, 64, 1])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 50, z3: 64}
    index0 = 76800*z0 + 64*z1 + 1536*z2 + z3
    index1 = 25600*z0 + 3200*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf260', get_index_1, load, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf259', mode=None), StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[64, 50, 64], stride=[3200, 64, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = extern_kernels.bmm


op262: ExternKernelSchedulerNode(ExternKernelAlloc)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op262.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelAlloc
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
    buf262.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op262.node.kernel = extern_kernels.convolution


op263: ExternKernelSchedulerNode(ExternKernelAlloc)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op263.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelAlloc
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.node.kernel = extern_kernels.convolution


op264: ExternKernelSchedulerNode(ExternKernelAlloc)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op264.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelAlloc
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.convolution


op265_op266: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op265_op266.writes = 
    [   MemoryDep('buf265', c0, {c0: 204800}, None),
        MemoryDep('buf266', c0, {c0: 204800}, None)]
op265_op266.unmet_dependencies = 
    [   MemoryDep('buf254', 1536*c0 + c1, {c0: 400, c1: 512}, None),
        MemoryDep('buf261', 25600*c0 + 64*c1 + 3200*c2 + c3, {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf262', 6272*c0 + I + 128*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf263', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf264', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None)]
op265_op266.met_dependencies = 
    [   MemoryDep('arg124_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg126_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg128_1', I, {c0: 400, c1: 8, c2: 64}, None)]
op265_op266.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 8, 64], stride=[25600, 512, 64, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265_op266.snodes[0] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 204800}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf254', 1536*c0 + c1, {c0: 400, c1: 512}, None),
        MemoryDep('buf262', 6272*c0 + I + 128*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf263', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf264', 9408*c0 + I + 192*ModularIndexing(c1 - 1, 1, 49), {c0: 8, c1: 50, c2: 8, c3: 64}, None)]
op265.met_dependencies = 
    [   MemoryDep('arg124_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg126_1', I, {c0: 400, c1: 8, c2: 64}, None),
        MemoryDep('arg128_1', I, {c0: 400, c1: 8, c2: 64}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (204800, 1)
op265.sizes = ([8, 50, 8, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[400, 1536], stride=[1536, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
class op265_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 8, z3: 64}
    index0 = z1 - 1
    index1 = 76800*z0 + 1536*z1 + 64*z2 + z3
    index2 = 64*z2 + z3
    index3 = 6272*z0 + I + 128*ModularIndexing(z1 - 1, 1, 49)
    index4 = I
    index5 = 9408*z0 + I + 192*ModularIndexing(z1 - 1, 1, 49)
    index6 = I
    index7 = 9408*z0 + I + 192*ModularIndexing(z1 - 1, 1, 49)
    index8 = I
    index9 = 25600*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index9')
        store = ops.store('buf265', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg124_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(320, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock3 = self.masked_subblock3(and_, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(320, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(512, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock4 = self.masked_subblock4(ge_2, 0.0)
        where = ops.where(and_, masked_subblock3, masked_subblock4)
        where_1 = ops.where(lt, masked_subblock2, where)
        mul = ops.mul(load, where_1)
        return mul
op265_op266.snodes[1] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 204800}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf261', 25600*c0 + 64*c1 + 3200*c2 + c3, {c0: 8, c1: 50, c2: 8, c3: 64}, None),
        MemoryDep('buf265', c0, {c0: 204800}, None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 8, 64], stride=[25600, 512, 64, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (204800, 1)
op266.sizes = ([8, 50, 8, 64], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[64, 50, 64], stride=[3200, 64, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 50, 64], stride=[25600, 64, 512, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 8, 64], stride=[25600, 512, 64, 1])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 8, z3: 64}
    index0 = 25600*z0 + 64*z1 + 3200*z2 + z3
    index1 = 25600*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf265', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf266', get_index_2, add, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False)]
]
op267.node.kernel = extern_kernels.mm


op268_op269_op270_op272: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op268_op269_op270_op272.writes = 
    [   MemoryDep('buf268', c0, {c0: 204800}, None),
        MemoryDep('buf269', c0, {c0: 400}, None),
        MemoryDep('buf270', c0, {c0: 400}, None),
        MemoryDep('buf272', c0, {c0: 204800}, None)]
op268_op269_op270_op272.unmet_dependencies = 
    [   MemoryDep('buf247', 25600*c0 + c2 + 512*I, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf247', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf248', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf267', c0, {c0: 204800}, None)]
op268_op269_op270_op272.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg142_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg143_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg144_1', c1, {c0: 400, c1: 512}, None)]
op268_op269_op270_op272.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf269.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op268_op269_op270_op272.snodes[0] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 204800}, None)]
op268.unmet_dependencies = 
    [   MemoryDep('buf247', 25600*c0 + c2 + 512*I, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf247', 25600*c0 + c2 + 512*ModularIndexing(I, 1, 49) + 512, {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf248', 25088*c0 + c2 + 512*ModularIndexing(I, 1, 49), {c0: 8, c1: 50, c2: 512}, None),
        MemoryDep('buf267', c0, {c0: 204800}, None)]
op268.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg142_1', c1, {c0: 400, c1: 512}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op268.group.device = cuda:0
op268.group.iteration = (204800, 1)
op268.sizes = ([8, 50, 512], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op268_loop_body:
    var_ranges = {z0: 8, z1: 50, z2: 512}
    index0 = z1
    index1 = 25600*z0 + z2 + 512*I
    index2 = 25088*z0 + z2 + 512*ModularIndexing(I, 1, 49)
    index3 = z2
    index4 = 25600*z0 + z2 + 512*ModularIndexing(I, 1, 49) + 512
    index5 = 25600*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf267', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg142_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf268', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf247', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf247', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1
op268_op269_op270_op272.snodes[1] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 400}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 204800}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf269.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (400, 512)
op269.sizes = ([400], [512])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op269_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem)
        return store_reduction
op268_op269_op270_op272.snodes[2] =
op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 400}, None)]
op270.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 204800}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (400, 512)
op270.sizes = ([400], [512])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op270_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf270', get_index_1, getitem_1)
        return store_reduction
op268_op269_op270_op272.snodes[3] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 204800}, None)]
op272.unmet_dependencies = 
    [   MemoryDep('buf268', c0, {c0: 204800}, None),
        MemoryDep('buf269', c0, {c0: 400}, None),
        MemoryDep('buf270', c0, {c0: 400}, None)]
op272.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 400, c1: 512}, None),
        MemoryDep('arg144_1', c1, {c0: 400, c1: 512}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (204800, 1)
op272.sizes = ([400, 512], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
class op272_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf270', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg143_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg144_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf272', get_index_5, add_1, None)
        return store


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None)]
op273.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[400, 2048], stride=[2048, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False)]
]
op273.node.kernel = extern_kernels.mm


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 819200}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 819200}, None)]
op274.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 400, c1: 2048}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 2048], stride=[102400, 2048, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (819200, 1)
op274.sizes = ([400, 2048], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[400, 2048], stride=[2048, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 2048], stride=[102400, 2048, 1])
class op274_loop_body:
    var_ranges = {z0: 400, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf274', get_index_4, mul_2, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op275.node.kernel = extern_kernels.mm


op276_op277: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op276_op277.writes = 
    [   MemoryDep('buf276', c0, {c0: 400}, None),
        MemoryDep('buf277', c0, {c0: 400}, None)]
op276_op277.unmet_dependencies = 
    [   MemoryDep('buf268', c0, {c0: 204800}, None),
        MemoryDep('buf275', c0, {c0: 204800}, None)]
op276_op277.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 400, c1: 512}, None)]
op276_op277.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op276_op277.snodes[0] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 400}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf268', c0, {c0: 204800}, None),
        MemoryDep('buf275', c0, {c0: 204800}, None)]
op276.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 400, c1: 512}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (400, 512)
op276.sizes = ([400], [512])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op276_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem)
        return store_reduction
op276_op277.snodes[1] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 400}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf268', c0, {c0: 204800}, None),
        MemoryDep('buf275', c0, {c0: 204800}, None)]
op277.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 400, c1: 512}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (400, 512)
op277.sizes = ([400], [512])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
class op277_loop_body:
    var_ranges = {z0: 400, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf277', get_index_3, getitem_1)
        return store_reduction


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 4096}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf268', 25600*c0 + c1, {c0: 8, c1: 512}, None),
        MemoryDep('buf275', 25600*c0 + c1, {c0: 8, c1: 512}, None),
        MemoryDep('buf276', 50*c0, {c0: 8}, None),
        MemoryDep('buf277', 50*c0, {c0: 8}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 512}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (4096, 1)
op279.sizes = ([8, 512], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 512], stride=[25600, 512, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[400, 512], stride=[512, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 1], stride=[50, 1, 400])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 25600*z0 + z1
    index1 = z1
    index2 = 50*z0
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf276', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf277', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg149_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg150_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf279', get_index_7, add_3, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg151_1', mode=None), StarDep(name='arg152_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf280.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.addmm



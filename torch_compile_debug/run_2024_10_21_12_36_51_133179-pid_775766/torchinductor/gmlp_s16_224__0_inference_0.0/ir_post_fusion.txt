op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1_op2_op3: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op3.writes = 
    [   MemoryDep('buf1', c0, {c0: 3136}, None),
        MemoryDep('buf2', c0, {c0: 3136}, None),
        MemoryDep('buf3', c0, {c0: 3136}, None)]
op1_op2_op3.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 16, c1: 196, c2: 128}, None)]
op1_op2_op3.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 2, c2: 196, c3: 128}, None)]
op1_op2_op3.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1_op2_op3.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 3136}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 16, c1: 196, c2: 128}, None)]
op1.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 2, c2: 196, c3: 128}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (3136, 128)
op1.sizes = ([8, 2, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 196, z3: 128}
    index0 = 50176*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 392*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1', get_index_2, getitem)
        return store_reduction
op1_op2_op3.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 3136}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 16, c1: 196, c2: 128}, None)]
op2.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 2, c2: 196, c3: 128}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (3136, 128)
op2.sizes = ([8, 2, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 196, z3: 128}
    index0 = 50176*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 392*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf2', get_index_2, getitem_1)
        return store_reduction
op1_op2_op3.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3136}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 16, c1: 196, c2: 128}, None)]
op3.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 2, c2: 196, c3: 128}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (3136, 128)
op3.sizes = ([8, 2, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 196, z3: 128}
    index0 = 50176*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 392*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem_2)
        return store_reduction


op4_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op4_op5.writes = 
    [   MemoryDep('buf4', c0, {c0: 1568}, None),
        MemoryDep('buf5', c0, {c0: 1568}, None)]
op4_op5.unmet_dependencies = 
    [   MemoryDep('buf1', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None),
        MemoryDep('buf2', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None),
        MemoryDep('buf3', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None)]
op4_op5.met_dependencies = []
op4_op5.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4_op5.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1568}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None),
        MemoryDep('buf2', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None),
        MemoryDep('buf3', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1568, 2)
op4.sizes = ([8, 196], [2])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 2}
    index0 = 392*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction
op4_op5.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1568}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None),
        MemoryDep('buf2', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None),
        MemoryDep('buf3', 392*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 2}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1568, 2)
op5.sizes = ([8, 196], [2])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 1, 3136, 196])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 2}
    index0 = 392*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 401408}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf4', c0, {c0: 1568}, None),
        MemoryDep('buf5', c0, {c0: 1568}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg3_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg4_1', c1, {c0: 1568, c1: 256}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (401408, 1)
op7.sizes = ([8, 196, 256], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 256}
    index0 = 50176*z0 + z1 + 196*z2
    index1 = z2
    index2 = 196*z0 + z1
    index3 = 50176*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf5', get_index_3)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf7', get_index_6, add_2, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.mm


op9_op10_op12: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op9_op10_op12.writes = 
    [   MemoryDep('buf10', c0, {c0: 1568}, None),
        MemoryDep('buf12', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None),
        MemoryDep('buf9', c0, {c0: 1568}, None)]
op9_op10_op12.unmet_dependencies = [MemoryDep('buf8', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op9_op10_op12.met_dependencies = 
    [   MemoryDep('arg6_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg8_1', c1, {c0: 1568, c1: 768}, None)]
op9_op10_op12.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op9_op10_op12.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 1568}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op9.met_dependencies = [MemoryDep('arg6_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (1568, 768)
op9.sizes = ([1568], [768])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op9_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf9', get_index_4, getitem)
        return store_reduction
op9_op10_op12.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 1568}, None)]
op10.unmet_dependencies = [MemoryDep('buf8', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op10.met_dependencies = [MemoryDep('arg6_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1568, 768)
op10.sizes = ([1568], [768])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op10_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf10', get_index_4, getitem_1)
        return store_reduction
op9_op10_op12.snodes[2] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 1568}, None),
        MemoryDep('buf8', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf9', c0, {c0: 1568}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg6_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg8_1', c1, {c0: 1568, c1: 768}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (1204224, 1)
op12.sizes = ([8, 196, 768], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf9', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf10', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg7_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg8_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf12', get_index_8, add_4, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1204224}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf13', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None),
        MemoryDep('buf8', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 196}, None),
        MemoryDep('arg6_1', c1, {c0: 1568, c1: 768}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1204224, 1)
op14.sizes = ([8, 196, 768], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf13', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg10_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf14', get_index_6, mul_3, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op17_op18: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op16_op17_op18.writes = 
    [   MemoryDep('buf16', c0, {c0: 3136}, None),
        MemoryDep('buf17', c0, {c0: 3136}, None),
        MemoryDep('buf18', c0, {c0: 3136}, None)]
op16_op17_op18.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None)]
op16_op17_op18.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op16_op17_op18.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
]
op16_op17_op18.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 3136}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (3136, 128)
op16.sizes = ([8, 196, 2], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 2, z3: 128}
    index0 = 50176*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 50176*z0 + 256*z1 + 128*z2 + z3
    index3 = 392*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf16', get_index_4, getitem)
        return store_reduction
op16_op17_op18.snodes[1] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 3136}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (3136, 128)
op17.sizes = ([8, 196, 2], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 2, z3: 128}
    index0 = 50176*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 50176*z0 + 256*z1 + 128*z2 + z3
    index3 = 392*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf17', get_index_4, getitem_1)
        return store_reduction
op16_op17_op18.snodes[2] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 3136}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (3136, 128)
op18.sizes = ([8, 196, 2], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
class op18_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 2, z3: 128}
    index0 = 50176*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 50176*z0 + 256*z1 + 128*z2 + z3
    index3 = 392*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf18', get_index_4, getitem_2)
        return store_reduction


op19_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op19_op20.writes = 
    [   MemoryDep('buf19', c0, {c0: 1568}, None),
        MemoryDep('buf20', c0, {c0: 1568}, None)]
op19_op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 3136}, None),
        MemoryDep('buf17', c0, {c0: 3136}, None),
        MemoryDep('buf18', c0, {c0: 3136}, None)]
op19_op20.met_dependencies = []
op19_op20.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf19.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op19_op20.snodes[0] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 1568}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 3136}, None),
        MemoryDep('buf17', c0, {c0: 3136}, None),
        MemoryDep('buf18', c0, {c0: 3136}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf19.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1568, 2)
op19.sizes = ([1568], [2])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op19_loop_body:
    var_ranges = {z0: 1568, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem)
        return store_reduction
op19_op20.snodes[1] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1568}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 3136}, None),
        MemoryDep('buf17', c0, {c0: 3136}, None),
        MemoryDep('buf18', c0, {c0: 3136}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (1568, 2)
op20.sizes = ([1568], [2])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 2], stride=[392, 2, 3136, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op20_loop_body:
    var_ranges = {z0: 1568, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_3, getitem_1)
        return store_reduction


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 401408}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None),
        MemoryDep('buf19', c0, {c0: 1568}, None),
        MemoryDep('buf20', c0, {c0: 1568}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg13_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg14_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (401408, 1)
op22.sizes = ([8, 196, 256], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op22_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 256}
    index0 = 50176*z0 + z1 + 196*z2
    index1 = z2
    index2 = 50176*z0 + 256*z1 + z2
    index3 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf19', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf20', get_index_5)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg13_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg14_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf22', get_index_8, add_4, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op23.node.kernel = extern_kernels.mm


op24_op25_op27: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op24_op25_op27.writes = 
    [   MemoryDep('buf24', c0, {c0: 1568}, None),
        MemoryDep('buf25', c0, {c0: 1568}, None),
        MemoryDep('buf27', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op24_op25_op27.unmet_dependencies = [MemoryDep('buf23', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op24_op25_op27.met_dependencies = 
    [   MemoryDep('arg16_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 1568, c1: 768}, None)]
op24_op25_op27.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op24_op25_op27.snodes[0] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1568}, None)]
op24.unmet_dependencies = [MemoryDep('buf23', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op24.met_dependencies = [MemoryDep('arg16_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1568, 768)
op24.sizes = ([1568], [768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op24_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_4, getitem)
        return store_reduction
op24_op25_op27.snodes[1] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1568}, None)]
op25.unmet_dependencies = [MemoryDep('buf23', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op25.met_dependencies = [MemoryDep('arg16_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (1568, 768)
op25.sizes = ([1568], [768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op25_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_4, getitem_1)
        return store_reduction
op24_op25_op27.snodes[2] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf23', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf24', c0, {c0: 1568}, None),
        MemoryDep('buf25', c0, {c0: 1568}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg16_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 1568, c1: 768}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1204224, 1)
op27.sizes = ([8, 196, 768], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op27_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf25', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg17_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg18_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf27', get_index_8, add_4, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.mm


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1204224}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf23', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf28', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg20_1', c1, {c0: 8, c1: 196}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1204224, 1)
op29.sizes = ([8, 196, 768], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op29_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf28', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg20_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf29', get_index_6, mul_3, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31_op32_op33_op35: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op31_op32_op33_op35.writes = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf32', c0, {c0: 1568}, None),
        MemoryDep('buf33', c0, {c0: 1568}, None),
        MemoryDep('buf35', c0, {c0: 401408}, None)]
op31_op32_op33_op35.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None),
        MemoryDep('buf30', c0, {c0: 401408}, None)]
op31_op32_op33_op35.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg22_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg23_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg24_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op31_op32_op33_op35.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op31_op32_op33_op35.snodes[0] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 401408}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf0', 50176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 401408}, None),
        MemoryDep('buf30', c0, {c0: 401408}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg22_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg2_1', c1, {c0: 1568, c1: 256}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (401408, 1)
op31.sizes = ([8, 196, 256], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 256}
    index0 = 50176*z0 + z1 + 196*z2
    index1 = z2
    index2 = 50176*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf30', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg22_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        add_4 = ops.add(add_2, add_3)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf31', get_index_6, add_4, None)
        return store
op31_op32_op33_op35.snodes[1] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1568}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 401408}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (1568, 256)
op32.sizes = ([1568], [256])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op32_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf32', get_index_1, getitem)
        return store_reduction
op31_op32_op33_op35.snodes[2] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1568}, None)]
op33.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 401408}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1568, 256)
op33.sizes = ([1568], [256])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op33_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_1, getitem_1)
        return store_reduction
op31_op32_op33_op35.snodes[3] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 401408}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf32', c0, {c0: 1568}, None),
        MemoryDep('buf33', c0, {c0: 1568}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg24_1', c1, {c0: 1568, c1: 256}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (401408, 1)
op35.sizes = ([1568, 256], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op35_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf33', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg23_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg24_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, add_1, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.mm


op37_op38_op40: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op37_op38_op40.writes = 
    [   MemoryDep('buf37', c0, {c0: 1568}, None),
        MemoryDep('buf38', c0, {c0: 1568}, None),
        MemoryDep('buf40', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op37_op38_op40.unmet_dependencies = [MemoryDep('buf36', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op37_op38_op40.met_dependencies = 
    [   MemoryDep('arg26_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg27_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg28_1', c1, {c0: 1568, c1: 768}, None)]
op37_op38_op40.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf38.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op37_op38_op40.snodes[0] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1568}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op37.met_dependencies = [MemoryDep('arg26_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1568, 768)
op37.sizes = ([1568], [768])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op37_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_4, getitem)
        return store_reduction
op37_op38_op40.snodes[1] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 1568}, None)]
op38.unmet_dependencies = [MemoryDep('buf36', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op38.met_dependencies = [MemoryDep('arg26_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf38.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (1568, 768)
op38.sizes = ([1568], [768])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op38_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf38', get_index_4, getitem_1)
        return store_reduction
op37_op38_op40.snodes[2] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf36', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf37', c0, {c0: 1568}, None),
        MemoryDep('buf38', c0, {c0: 1568}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg26_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg27_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg28_1', c1, {c0: 1568, c1: 768}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1204224, 1)
op40.sizes = ([8, 196, 768], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf37', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf38', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg27_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg28_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf40', get_index_8, add_4, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1204224}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf36', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf41', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg30_1', c1, {c0: 8, c1: 196}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (1204224, 1)
op42.sizes = ([8, 196, 768], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf41', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg30_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf42', get_index_6, mul_3, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op43.node.kernel = extern_kernels.mm


op44_op45_op47: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op44_op45_op47.writes = 
    [   MemoryDep('buf44', c0, {c0: 1568}, None),
        MemoryDep('buf45', c0, {c0: 1568}, None),
        MemoryDep('buf47', c0, {c0: 401408}, None)]
op44_op45_op47.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf43', c0, {c0: 401408}, None)]
op44_op45_op47.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 1568, c1: 256}, None)]
op44_op45_op47.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op44_op45_op47.snodes[0] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 1568}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf43', c0, {c0: 401408}, None)]
op44.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 1568, c1: 256}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (1568, 256)
op44.sizes = ([1568], [256])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op44_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem)
        return store_reduction
op44_op45_op47.snodes[1] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 1568}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf43', c0, {c0: 401408}, None)]
op45.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 1568, c1: 256}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1568, 256)
op45.sizes = ([1568], [256])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op45_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf45', get_index_3, getitem_1)
        return store_reduction
op44_op45_op47.snodes[2] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 401408}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf43', c0, {c0: 401408}, None),
        MemoryDep('buf44', c0, {c0: 1568}, None),
        MemoryDep('buf45', c0, {c0: 1568}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 1568, c1: 256}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (401408, 1)
op47.sizes = ([1568, 256], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op47_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf44', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf45', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg33_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg34_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf47', get_index_7, add_3, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = extern_kernels.mm


op49_op50_op52: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op49_op50_op52.writes = 
    [   MemoryDep('buf49', c0, {c0: 1568}, None),
        MemoryDep('buf50', c0, {c0: 1568}, None),
        MemoryDep('buf52', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op49_op50_op52.unmet_dependencies = [MemoryDep('buf48', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op49_op50_op52.met_dependencies = 
    [   MemoryDep('arg36_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg37_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg38_1', c1, {c0: 1568, c1: 768}, None)]
op49_op50_op52.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf49.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf50.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op49_op50_op52.snodes[0] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 1568}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op49.met_dependencies = [MemoryDep('arg36_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf49.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (1568, 768)
op49.sizes = ([1568], [768])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op49_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf49', get_index_4, getitem)
        return store_reduction
op49_op50_op52.snodes[1] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 1568}, None)]
op50.unmet_dependencies = [MemoryDep('buf48', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op50.met_dependencies = [MemoryDep('arg36_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf50.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (1568, 768)
op50.sizes = ([1568], [768])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op50_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_4, getitem_1)
        return store_reduction
op49_op50_op52.snodes[2] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf48', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf49', c0, {c0: 1568}, None),
        MemoryDep('buf50', c0, {c0: 1568}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg36_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg37_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg38_1', c1, {c0: 1568, c1: 768}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1204224, 1)
op52.sizes = ([8, 196, 768], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf49', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf50', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg37_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg38_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf52', get_index_8, add_4, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1204224}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf48', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf53', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg40_1', c1, {c0: 8, c1: 196}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1204224, 1)
op54.sizes = ([8, 196, 768], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op54_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf53', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg40_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf54', get_index_6, mul_3, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56_op57_op58_op60: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op56_op57_op58_op60.writes = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf57', c0, {c0: 1568}, None),
        MemoryDep('buf58', c0, {c0: 1568}, None),
        MemoryDep('buf60', c0, {c0: 401408}, None)]
op56_op57_op58_op60.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf43', c0, {c0: 401408}, None),
        MemoryDep('buf55', c0, {c0: 401408}, None)]
op56_op57_op58_op60.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg42_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg43_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 1568, c1: 256}, None)]
op56_op57_op58_op60.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf57.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf58.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op56_op57_op58_op60.snodes[0] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 401408}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 401408}, None),
        MemoryDep('buf43', c0, {c0: 401408}, None),
        MemoryDep('buf55', c0, {c0: 401408}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg42_1', c1, {c0: 1568, c1: 256}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (401408, 1)
op56.sizes = ([1568, 256], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op56_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf55', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg42_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf56', get_index_5, add_3, None)
        return store
op56_op57_op58_op60.snodes[1] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 1568}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 401408}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf57.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (1568, 256)
op57.sizes = ([1568], [256])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op57_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, getitem)
        return store_reduction
op56_op57_op58_op60.snodes[2] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1568}, None)]
op58.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 401408}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf58.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1568, 256)
op58.sizes = ([1568], [256])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op58_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf58', get_index_1, getitem_1)
        return store_reduction
op56_op57_op58_op60.snodes[3] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 401408}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf57', c0, {c0: 1568}, None),
        MemoryDep('buf58', c0, {c0: 1568}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg43_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 1568, c1: 256}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (401408, 1)
op60.sizes = ([1568, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op60_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf58', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg43_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg44_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf60', get_index_5, add_1, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62_op63_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op62_op63_op65.writes = 
    [   MemoryDep('buf62', c0, {c0: 1568}, None),
        MemoryDep('buf63', c0, {c0: 1568}, None),
        MemoryDep('buf65', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op62_op63_op65.unmet_dependencies = [MemoryDep('buf61', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op62_op63_op65.met_dependencies = 
    [   MemoryDep('arg46_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg47_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 1568, c1: 768}, None)]
op62_op63_op65.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op62_op63_op65.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1568}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op62.met_dependencies = [MemoryDep('arg46_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1568, 768)
op62.sizes = ([1568], [768])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op62_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_4, getitem)
        return store_reduction
op62_op63_op65.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1568}, None)]
op63.unmet_dependencies = [MemoryDep('buf61', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op63.met_dependencies = [MemoryDep('arg46_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1568, 768)
op63.sizes = ([1568], [768])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op63_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_4, getitem_1)
        return store_reduction
op62_op63_op65.snodes[2] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf61', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf62', c0, {c0: 1568}, None),
        MemoryDep('buf63', c0, {c0: 1568}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg46_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg47_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 1568, c1: 768}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1204224, 1)
op65.sizes = ([8, 196, 768], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op65_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf62', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf63', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg47_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg48_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf65', get_index_8, add_4, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1204224}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf61', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf66', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg50_1', c1, {c0: 8, c1: 196}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1204224, 1)
op67.sizes = ([8, 196, 768], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg50_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf67', get_index_6, mul_3, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op68.node.kernel = extern_kernels.mm


op69_op70_op72: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op72.writes = 
    [   MemoryDep('buf69', c0, {c0: 1568}, None),
        MemoryDep('buf70', c0, {c0: 1568}, None),
        MemoryDep('buf72', c0, {c0: 401408}, None)]
op69_op70_op72.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf68', c0, {c0: 401408}, None)]
op69_op70_op72.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg54_1', c1, {c0: 1568, c1: 256}, None)]
op69_op70_op72.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op69_op70_op72.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1568}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf68', c0, {c0: 401408}, None)]
op69.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 1568, c1: 256}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (1568, 256)
op69.sizes = ([1568], [256])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op69_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf69', get_index_3, getitem)
        return store_reduction
op69_op70_op72.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1568}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf68', c0, {c0: 401408}, None)]
op70.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 1568, c1: 256}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1568, 256)
op70.sizes = ([1568], [256])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op70_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf70', get_index_3, getitem_1)
        return store_reduction
op69_op70_op72.snodes[2] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 401408}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf68', c0, {c0: 401408}, None),
        MemoryDep('buf69', c0, {c0: 1568}, None),
        MemoryDep('buf70', c0, {c0: 1568}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg54_1', c1, {c0: 1568, c1: 256}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (401408, 1)
op72.sizes = ([1568, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op72_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf69', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf70', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg53_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg54_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf72', get_index_7, add_3, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74_op75_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op74_op75_op77.writes = 
    [   MemoryDep('buf74', c0, {c0: 1568}, None),
        MemoryDep('buf75', c0, {c0: 1568}, None),
        MemoryDep('buf77', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op74_op75_op77.unmet_dependencies = [MemoryDep('buf73', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op74_op75_op77.met_dependencies = 
    [   MemoryDep('arg56_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg58_1', c1, {c0: 1568, c1: 768}, None)]
op74_op75_op77.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op74_op75_op77.snodes[0] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1568}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op74.met_dependencies = [MemoryDep('arg56_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1568, 768)
op74.sizes = ([1568], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op74_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_4, getitem)
        return store_reduction
op74_op75_op77.snodes[1] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1568}, None)]
op75.unmet_dependencies = [MemoryDep('buf73', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op75.met_dependencies = [MemoryDep('arg56_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1568, 768)
op75.sizes = ([1568], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op75_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_4, getitem_1)
        return store_reduction
op74_op75_op77.snodes[2] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf73', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf74', c0, {c0: 1568}, None),
        MemoryDep('buf75', c0, {c0: 1568}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg56_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg58_1', c1, {c0: 1568, c1: 768}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (1204224, 1)
op77.sizes = ([8, 196, 768], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf74', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf75', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg57_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg58_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf77', get_index_8, add_4, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1204224}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf73', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf78', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 8, c1: 196}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1204224, 1)
op79.sizes = ([8, 196, 768], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op79_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf78', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg60_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf79', get_index_6, mul_3, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81_op82_op83_op85: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op81_op82_op83_op85.writes = 
    [   MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf82', c0, {c0: 1568}, None),
        MemoryDep('buf83', c0, {c0: 1568}, None),
        MemoryDep('buf85', c0, {c0: 401408}, None)]
op81_op82_op83_op85.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf68', c0, {c0: 401408}, None),
        MemoryDep('buf80', c0, {c0: 401408}, None)]
op81_op82_op83_op85.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg63_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg64_1', c1, {c0: 1568, c1: 256}, None)]
op81_op82_op83_op85.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
    ]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf82.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf83.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op81_op82_op83_op85.snodes[0] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 401408}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 401408}, None),
        MemoryDep('buf68', c0, {c0: 401408}, None),
        MemoryDep('buf80', c0, {c0: 401408}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 1568, c1: 256}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (401408, 1)
op81.sizes = ([1568, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op81_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf80', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg62_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, add_3, None)
        return store
op81_op82_op83_op85.snodes[1] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1568}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 401408}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf82.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1568, 256)
op82.sizes = ([1568], [256])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op82_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf82', get_index_1, getitem)
        return store_reduction
op81_op82_op83_op85.snodes[2] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 1568}, None)]
op83.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 401408}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf83.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (1568, 256)
op83.sizes = ([1568], [256])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op83_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf83', get_index_1, getitem_1)
        return store_reduction
op81_op82_op83_op85.snodes[3] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 401408}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf82', c0, {c0: 1568}, None),
        MemoryDep('buf83', c0, {c0: 1568}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg64_1', c1, {c0: 1568, c1: 256}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (401408, 1)
op85.sizes = ([1568, 256], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op85_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf82', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf83', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg63_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg64_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, add_1, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.mm


op87_op88_op90: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op87_op88_op90.writes = 
    [   MemoryDep('buf87', c0, {c0: 1568}, None),
        MemoryDep('buf88', c0, {c0: 1568}, None),
        MemoryDep('buf90', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op87_op88_op90.unmet_dependencies = [MemoryDep('buf86', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op87_op88_op90.met_dependencies = 
    [   MemoryDep('arg66_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg68_1', c1, {c0: 1568, c1: 768}, None)]
op87_op88_op90.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op87_op88_op90.snodes[0] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1568}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op87.met_dependencies = [MemoryDep('arg66_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (1568, 768)
op87.sizes = ([1568], [768])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op87_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf87', get_index_4, getitem)
        return store_reduction
op87_op88_op90.snodes[1] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1568}, None)]
op88.unmet_dependencies = [MemoryDep('buf86', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op88.met_dependencies = [MemoryDep('arg66_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1568, 768)
op88.sizes = ([1568], [768])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op88_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf88', get_index_4, getitem_1)
        return store_reduction
op87_op88_op90.snodes[2] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf86', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf87', c0, {c0: 1568}, None),
        MemoryDep('buf88', c0, {c0: 1568}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg66_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg68_1', c1, {c0: 1568, c1: 768}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1204224, 1)
op90.sizes = ([8, 196, 768], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf87', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf88', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg67_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg68_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf90', get_index_8, add_4, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1204224}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf86', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf91', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg70_1', c1, {c0: 8, c1: 196}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (1204224, 1)
op92.sizes = ([8, 196, 768], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf91', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg70_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf92', get_index_6, mul_3, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
    ]
]
op93.node.kernel = extern_kernels.mm


op94_op95_op97: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op94_op95_op97.writes = 
    [   MemoryDep('buf94', c0, {c0: 1568}, None),
        MemoryDep('buf95', c0, {c0: 1568}, None),
        MemoryDep('buf97', c0, {c0: 401408}, None)]
op94_op95_op97.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf93', c0, {c0: 401408}, None)]
op94_op95_op97.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg73_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 1568, c1: 256}, None)]
op94_op95_op97.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op94_op95_op97.snodes[0] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 1568}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf93', c0, {c0: 401408}, None)]
op94.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 1568, c1: 256}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (1568, 256)
op94.sizes = ([1568], [256])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op94_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg72_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_3, getitem)
        return store_reduction
op94_op95_op97.snodes[1] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1568}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf93', c0, {c0: 401408}, None)]
op95.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 1568, c1: 256}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1568, 256)
op95.sizes = ([1568], [256])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op95_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg72_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem_1)
        return store_reduction
op94_op95_op97.snodes[2] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 401408}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf93', c0, {c0: 401408}, None),
        MemoryDep('buf94', c0, {c0: 1568}, None),
        MemoryDep('buf95', c0, {c0: 1568}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg73_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 1568, c1: 256}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (401408, 1)
op97.sizes = ([1568, 256], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op97_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg72_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf94', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf95', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg73_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg74_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf97', get_index_7, add_3, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.mm


op99_op100_op102: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op99_op100_op102.writes = 
    [   MemoryDep('buf100', c0, {c0: 1568}, None),
        MemoryDep('buf102', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None),
        MemoryDep('buf99', c0, {c0: 1568}, None)]
op99_op100_op102.unmet_dependencies = [MemoryDep('buf98', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op99_op100_op102.met_dependencies = 
    [   MemoryDep('arg76_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg78_1', c1, {c0: 1568, c1: 768}, None)]
op99_op100_op102.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf99.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op99_op100_op102.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 1568}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op99.met_dependencies = [MemoryDep('arg76_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf99.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (1568, 768)
op99.sizes = ([1568], [768])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op99_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf98', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf99', get_index_4, getitem)
        return store_reduction
op99_op100_op102.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 1568}, None)]
op100.unmet_dependencies = [MemoryDep('buf98', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op100.met_dependencies = [MemoryDep('arg76_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (1568, 768)
op100.sizes = ([1568], [768])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op100_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf98', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_4, getitem_1)
        return store_reduction
op99_op100_op102.snodes[2] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 1568}, None),
        MemoryDep('buf98', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf99', c0, {c0: 1568}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg76_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg78_1', c1, {c0: 1568, c1: 768}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (1204224, 1)
op102.sizes = ([8, 196, 768], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op102_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf98', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf100', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg77_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg78_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf102', get_index_8, add_4, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 1204224}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf103', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None),
        MemoryDep('buf98', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg80_1', c1, {c0: 8, c1: 196}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (1204224, 1)
op104.sizes = ([8, 196, 768], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op104_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf98', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf103', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg80_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf104', get_index_6, mul_3, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106_op107_op108_op110: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op106_op107_op108_op110.writes = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf107', c0, {c0: 1568}, None),
        MemoryDep('buf108', c0, {c0: 1568}, None),
        MemoryDep('buf110', c0, {c0: 401408}, None)]
op106_op107_op108_op110.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 401408}, None),
        MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf93', c0, {c0: 401408}, None)]
op106_op107_op108_op110.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg82_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg83_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg84_1', c1, {c0: 1568, c1: 256}, None)]
op106_op107_op108_op110.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op106_op107_op108_op110.snodes[0] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 401408}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 401408}, None),
        MemoryDep('buf81', c0, {c0: 401408}, None),
        MemoryDep('buf93', c0, {c0: 401408}, None)]
op106.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg82_1', c1, {c0: 1568, c1: 256}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (401408, 1)
op106.sizes = ([1568, 256], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op106_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg72_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf105', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg82_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf106', get_index_5, add_3, None)
        return store
op106_op107_op108_op110.snodes[1] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 1568}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 401408}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (1568, 256)
op107.sizes = ([1568], [256])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op107_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_1, getitem)
        return store_reduction
op106_op107_op108_op110.snodes[2] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 1568}, None)]
op108.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 401408}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (1568, 256)
op108.sizes = ([1568], [256])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op108_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_1, getitem_1)
        return store_reduction
op106_op107_op108_op110.snodes[3] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 401408}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf107', c0, {c0: 1568}, None),
        MemoryDep('buf108', c0, {c0: 1568}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg84_1', c1, {c0: 1568, c1: 256}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (401408, 1)
op110.sizes = ([1568, 256], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op110_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg83_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg84_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf110', get_index_5, add_1, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op112_op113_op115: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op112_op113_op115.writes = 
    [   MemoryDep('buf112', c0, {c0: 1568}, None),
        MemoryDep('buf113', c0, {c0: 1568}, None),
        MemoryDep('buf115', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op112_op113_op115.unmet_dependencies = [MemoryDep('buf111', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op112_op113_op115.met_dependencies = 
    [   MemoryDep('arg86_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg87_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg88_1', c1, {c0: 1568, c1: 768}, None)]
op112_op113_op115.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op112_op113_op115.snodes[0] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 1568}, None)]
op112.unmet_dependencies = [MemoryDep('buf111', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op112.met_dependencies = [MemoryDep('arg86_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (1568, 768)
op112.sizes = ([1568], [768])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op112_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_4, getitem)
        return store_reduction
op112_op113_op115.snodes[1] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 1568}, None)]
op113.unmet_dependencies = [MemoryDep('buf111', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op113.met_dependencies = [MemoryDep('arg86_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (1568, 768)
op113.sizes = ([1568], [768])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op113_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_4, getitem_1)
        return store_reduction
op112_op113_op115.snodes[2] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf111', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf112', c0, {c0: 1568}, None),
        MemoryDep('buf113', c0, {c0: 1568}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg86_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg87_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg88_1', c1, {c0: 1568, c1: 768}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (1204224, 1)
op115.sizes = ([8, 196, 768], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op115_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf112', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf113', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg87_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg88_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf115', get_index_8, add_4, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1204224}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf111', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf116', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg90_1', c1, {c0: 8, c1: 196}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (1204224, 1)
op117.sizes = ([8, 196, 768], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf116', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg90_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf117', get_index_6, mul_3, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op118.node.kernel = extern_kernels.mm


op119_op120_op122: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op119_op120_op122.writes = 
    [   MemoryDep('buf119', c0, {c0: 1568}, None),
        MemoryDep('buf120', c0, {c0: 1568}, None),
        MemoryDep('buf122', c0, {c0: 401408}, None)]
op119_op120_op122.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf118', c0, {c0: 401408}, None)]
op119_op120_op122.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg93_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg94_1', c1, {c0: 1568, c1: 256}, None)]
op119_op120_op122.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op119_op120_op122.snodes[0] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1568}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf118', c0, {c0: 401408}, None)]
op119.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 1568, c1: 256}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1568, 256)
op119.sizes = ([1568], [256])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op119_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction
op119_op120_op122.snodes[1] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1568}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf118', c0, {c0: 401408}, None)]
op120.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 1568, c1: 256}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1568, 256)
op120.sizes = ([1568], [256])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op120_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction
op119_op120_op122.snodes[2] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 401408}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf118', c0, {c0: 401408}, None),
        MemoryDep('buf119', c0, {c0: 1568}, None),
        MemoryDep('buf120', c0, {c0: 1568}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg93_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg94_1', c1, {c0: 1568, c1: 256}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (401408, 1)
op122.sizes = ([1568, 256], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op122_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
    ]
]
op123.node.kernel = extern_kernels.mm


op124_op125_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op124_op125_op127.writes = 
    [   MemoryDep('buf124', c0, {c0: 1568}, None),
        MemoryDep('buf125', c0, {c0: 1568}, None),
        MemoryDep('buf127', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op124_op125_op127.unmet_dependencies = [MemoryDep('buf123', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op124_op125_op127.met_dependencies = 
    [   MemoryDep('arg96_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg98_1', c1, {c0: 1568, c1: 768}, None)]
op124_op125_op127.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op124_op125_op127.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 1568}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op124.met_dependencies = [MemoryDep('arg96_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (1568, 768)
op124.sizes = ([1568], [768])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op124_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf124', get_index_4, getitem)
        return store_reduction
op124_op125_op127.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 1568}, None)]
op125.unmet_dependencies = [MemoryDep('buf123', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op125.met_dependencies = [MemoryDep('arg96_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (1568, 768)
op125.sizes = ([1568], [768])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op125_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_4, getitem_1)
        return store_reduction
op124_op125_op127.snodes[2] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf123', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf124', c0, {c0: 1568}, None),
        MemoryDep('buf125', c0, {c0: 1568}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg96_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg98_1', c1, {c0: 1568, c1: 768}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (1204224, 1)
op127.sizes = ([8, 196, 768], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf124', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf125', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg97_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg98_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf127', get_index_8, add_4, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 1204224}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf123', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf128', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8, c1: 196}, None),
        MemoryDep('arg96_1', c1, {c0: 1568, c1: 768}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (1204224, 1)
op129.sizes = ([8, 196, 768], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf128', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg100_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf129', get_index_6, mul_3, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131_op132_op133_op135: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op131_op132_op133_op135.writes = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf132', c0, {c0: 1568}, None),
        MemoryDep('buf133', c0, {c0: 1568}, None),
        MemoryDep('buf135', c0, {c0: 401408}, None)]
op131_op132_op133_op135.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf118', c0, {c0: 401408}, None),
        MemoryDep('buf130', c0, {c0: 401408}, None)]
op131_op132_op133_op135.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg103_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg104_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg92_1', c1, {c0: 1568, c1: 256}, None)]
op131_op132_op133_op135.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op131_op132_op133_op135.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 401408}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 401408}, None),
        MemoryDep('buf118', c0, {c0: 401408}, None),
        MemoryDep('buf130', c0, {c0: 401408}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg92_1', c1, {c0: 1568, c1: 256}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (401408, 1)
op131.sizes = ([1568, 256], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op131_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf130', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg102_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf131', get_index_5, add_3, None)
        return store
op131_op132_op133_op135.snodes[1] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 1568}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 401408}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (1568, 256)
op132.sizes = ([1568], [256])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op132_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, getitem)
        return store_reduction
op131_op132_op133_op135.snodes[2] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 1568}, None)]
op133.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 401408}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (1568, 256)
op133.sizes = ([1568], [256])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op133_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, getitem_1)
        return store_reduction
op131_op132_op133_op135.snodes[3] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 401408}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf132', c0, {c0: 1568}, None),
        MemoryDep('buf133', c0, {c0: 1568}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg104_1', c1, {c0: 1568, c1: 256}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (401408, 1)
op135.sizes = ([1568, 256], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op135_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg103_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg104_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, add_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137_op138_op140: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op137_op138_op140.writes = 
    [   MemoryDep('buf137', c0, {c0: 1568}, None),
        MemoryDep('buf138', c0, {c0: 1568}, None),
        MemoryDep('buf140', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op137_op138_op140.unmet_dependencies = [MemoryDep('buf136', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op137_op138_op140.met_dependencies = 
    [   MemoryDep('arg106_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg107_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 1568, c1: 768}, None)]
op137_op138_op140.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op137_op138_op140.snodes[0] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 1568}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op137.met_dependencies = [MemoryDep('arg106_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (1568, 768)
op137.sizes = ([1568], [768])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op137_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_4, getitem)
        return store_reduction
op137_op138_op140.snodes[1] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1568}, None)]
op138.unmet_dependencies = [MemoryDep('buf136', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op138.met_dependencies = [MemoryDep('arg106_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1568, 768)
op138.sizes = ([1568], [768])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op138_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_4, getitem_1)
        return store_reduction
op137_op138_op140.snodes[2] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf136', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf137', c0, {c0: 1568}, None),
        MemoryDep('buf138', c0, {c0: 1568}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg106_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg107_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 1568, c1: 768}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (1204224, 1)
op140.sizes = ([8, 196, 768], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf137', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf138', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg107_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg108_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf140', get_index_8, add_4, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 1204224}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf136', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf141', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg110_1', c1, {c0: 8, c1: 196}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (1204224, 1)
op142.sizes = ([8, 196, 768], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op142_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf141', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg110_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf142', get_index_6, mul_3, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op143.node.kernel = extern_kernels.mm


op144_op145_op147: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op144_op145_op147.writes = 
    [   MemoryDep('buf144', c0, {c0: 1568}, None),
        MemoryDep('buf145', c0, {c0: 1568}, None),
        MemoryDep('buf147', c0, {c0: 401408}, None)]
op144_op145_op147.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf143', c0, {c0: 401408}, None)]
op144_op145_op147.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg113_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg114_1', c1, {c0: 1568, c1: 256}, None)]
op144_op145_op147.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op144_op145_op147.snodes[0] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1568}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf143', c0, {c0: 401408}, None)]
op144.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 1568, c1: 256}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1568, 256)
op144.sizes = ([1568], [256])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op144_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem)
        return store_reduction
op144_op145_op147.snodes[1] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 1568}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf143', c0, {c0: 401408}, None)]
op145.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 1568, c1: 256}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (1568, 256)
op145.sizes = ([1568], [256])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf145', get_index_3, getitem_1)
        return store_reduction
op144_op145_op147.snodes[2] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 401408}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf143', c0, {c0: 401408}, None),
        MemoryDep('buf144', c0, {c0: 1568}, None),
        MemoryDep('buf145', c0, {c0: 1568}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg113_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg114_1', c1, {c0: 1568, c1: 256}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (401408, 1)
op147.sizes = ([1568, 256], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op147_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf144', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf145', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg113_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg114_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf147', get_index_7, add_3, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149_op150_op152: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op149_op150_op152.writes = 
    [   MemoryDep('buf149', c0, {c0: 1568}, None),
        MemoryDep('buf150', c0, {c0: 1568}, None),
        MemoryDep('buf152', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op149_op150_op152.unmet_dependencies = [MemoryDep('buf148', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op149_op150_op152.met_dependencies = 
    [   MemoryDep('arg116_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 768}, None)]
op149_op150_op152.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op149_op150_op152.snodes[0] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1568}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op149.met_dependencies = [MemoryDep('arg116_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (1568, 768)
op149.sizes = ([1568], [768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op149_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf148', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_4, getitem)
        return store_reduction
op149_op150_op152.snodes[1] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1568}, None)]
op150.unmet_dependencies = [MemoryDep('buf148', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op150.met_dependencies = [MemoryDep('arg116_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1568, 768)
op150.sizes = ([1568], [768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op150_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf148', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_4, getitem_1)
        return store_reduction
op149_op150_op152.snodes[2] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf148', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf149', c0, {c0: 1568}, None),
        MemoryDep('buf150', c0, {c0: 1568}, None)]
op152.met_dependencies = 
    [   MemoryDep('arg116_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 768}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (1204224, 1)
op152.sizes = ([8, 196, 768], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf148', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf149', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf150', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg117_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg118_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf152', get_index_8, add_4, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = extern_kernels.mm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1204224}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf148', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf153', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 8, c1: 196}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1204224, 1)
op154.sizes = ([8, 196, 768], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf148', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf153', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg120_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf154', get_index_6, mul_3, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156_op157_op158_op160: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op156_op157_op158_op160.writes = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf157', c0, {c0: 1568}, None),
        MemoryDep('buf158', c0, {c0: 1568}, None),
        MemoryDep('buf160', c0, {c0: 401408}, None)]
op156_op157_op158_op160.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf143', c0, {c0: 401408}, None),
        MemoryDep('buf155', c0, {c0: 401408}, None)]
op156_op157_op158_op160.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg124_1', c1, {c0: 1568, c1: 256}, None)]
op156_op157_op158_op160.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf156.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
    ]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf157.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf158.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op156_op157_op158_op160.snodes[0] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 401408}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 401408}, None),
        MemoryDep('buf143', c0, {c0: 401408}, None),
        MemoryDep('buf155', c0, {c0: 401408}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 256}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf156.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
    ]
]
op156.group.device = cuda:0
op156.group.iteration = (401408, 1)
op156.sizes = ([1568, 256], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op156_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf155', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf156', get_index_5, add_3, None)
        return store
op156_op157_op158_op160.snodes[1] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1568}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 401408}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf157.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1568, 256)
op157.sizes = ([1568], [256])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op157_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, getitem)
        return store_reduction
op156_op157_op158_op160.snodes[2] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1568}, None)]
op158.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 401408}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf158.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1568, 256)
op158.sizes = ([1568], [256])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op158_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf158', get_index_1, getitem_1)
        return store_reduction
op156_op157_op158_op160.snodes[3] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 401408}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf157', c0, {c0: 1568}, None),
        MemoryDep('buf158', c0, {c0: 1568}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg124_1', c1, {c0: 1568, c1: 256}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (401408, 1)
op160.sizes = ([1568, 256], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op160_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf157', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf158', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_1, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.mm


op162_op163_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op162_op163_op165.writes = 
    [   MemoryDep('buf162', c0, {c0: 1568}, None),
        MemoryDep('buf163', c0, {c0: 1568}, None),
        MemoryDep('buf165', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op162_op163_op165.unmet_dependencies = [MemoryDep('buf161', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op162_op163_op165.met_dependencies = 
    [   MemoryDep('arg126_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg127_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 768}, None)]
op162_op163_op165.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op162_op163_op165.snodes[0] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 1568}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op162.met_dependencies = [MemoryDep('arg126_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (1568, 768)
op162.sizes = ([1568], [768])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op162_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_4, getitem)
        return store_reduction
op162_op163_op165.snodes[1] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 1568}, None)]
op163.unmet_dependencies = [MemoryDep('buf161', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op163.met_dependencies = [MemoryDep('arg126_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (1568, 768)
op163.sizes = ([1568], [768])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op163_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_4, getitem_1)
        return store_reduction
op162_op163_op165.snodes[2] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf161', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf162', c0, {c0: 1568}, None),
        MemoryDep('buf163', c0, {c0: 1568}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg126_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg127_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 768}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1204224, 1)
op165.sizes = ([8, 196, 768], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op165_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf163', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg127_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg128_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf165', get_index_8, add_4, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 1204224}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf161', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf166', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 196}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (1204224, 1)
op167.sizes = ([8, 196, 768], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op167_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf166', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg130_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf167', get_index_6, mul_3, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
    ]
]
op168.node.kernel = extern_kernels.mm


op169_op170_op172: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op169_op170_op172.writes = 
    [   MemoryDep('buf169', c0, {c0: 1568}, None),
        MemoryDep('buf170', c0, {c0: 1568}, None),
        MemoryDep('buf172', c0, {c0: 401408}, None)]
op169_op170_op172.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf168', c0, {c0: 401408}, None)]
op169_op170_op172.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 256}, None)]
op169_op170_op172.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf169.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf170.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op169_op170_op172.snodes[0] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1568}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf168', c0, {c0: 401408}, None)]
op169.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 1568, c1: 256}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf169.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1568, 256)
op169.sizes = ([1568], [256])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op169_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf168', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf169', get_index_3, getitem)
        return store_reduction
op169_op170_op172.snodes[1] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 1568}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf168', c0, {c0: 401408}, None)]
op170.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 1568, c1: 256}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf170.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (1568, 256)
op170.sizes = ([1568], [256])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op170_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf168', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf170', get_index_3, getitem_1)
        return store_reduction
op169_op170_op172.snodes[2] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 401408}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf168', c0, {c0: 401408}, None),
        MemoryDep('buf169', c0, {c0: 1568}, None),
        MemoryDep('buf170', c0, {c0: 1568}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 256}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (401408, 1)
op172.sizes = ([1568, 256], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op172_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf168', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf169', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf170', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg133_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg134_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf172', get_index_7, add_3, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op173.node.kernel = extern_kernels.mm


op174_op175_op177: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op174_op175_op177.writes = 
    [   MemoryDep('buf174', c0, {c0: 1568}, None),
        MemoryDep('buf175', c0, {c0: 1568}, None),
        MemoryDep('buf177', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op174_op175_op177.unmet_dependencies = [MemoryDep('buf173', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op174_op175_op177.met_dependencies = 
    [   MemoryDep('arg136_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg138_1', c1, {c0: 1568, c1: 768}, None)]
op174_op175_op177.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf174.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf175.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op174_op175_op177.snodes[0] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 1568}, None)]
op174.unmet_dependencies = [MemoryDep('buf173', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op174.met_dependencies = [MemoryDep('arg136_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf174.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (1568, 768)
op174.sizes = ([1568], [768])
buf173_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op174_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_4, getitem)
        return store_reduction
op174_op175_op177.snodes[1] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 1568}, None)]
op175.unmet_dependencies = [MemoryDep('buf173', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op175.met_dependencies = [MemoryDep('arg136_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf175.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (1568, 768)
op175.sizes = ([1568], [768])
buf173_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op175_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_4, getitem_1)
        return store_reduction
op174_op175_op177.snodes[2] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf173', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf174', c0, {c0: 1568}, None),
        MemoryDep('buf175', c0, {c0: 1568}, None)]
op177.met_dependencies = 
    [   MemoryDep('arg136_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg138_1', c1, {c0: 1568, c1: 768}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (1204224, 1)
op177.sizes = ([8, 196, 768], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf174', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf175', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg137_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg138_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf177', get_index_8, add_4, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 1204224}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf173', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf178', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg140_1', c1, {c0: 8, c1: 196}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (1204224, 1)
op179.sizes = ([8, 196, 768], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op179_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf178', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg140_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf179', get_index_6, mul_3, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.mm


op181_op182_op183_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op181_op182_op183_op185.writes = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf182', c0, {c0: 1568}, None),
        MemoryDep('buf183', c0, {c0: 1568}, None),
        MemoryDep('buf185', c0, {c0: 401408}, None)]
op181_op182_op183_op185.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf168', c0, {c0: 401408}, None),
        MemoryDep('buf180', c0, {c0: 401408}, None)]
op181_op182_op183_op185.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 256}, None)]
op181_op182_op183_op185.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf182.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op181_op182_op183_op185.snodes[0] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 401408}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 401408}, None),
        MemoryDep('buf168', c0, {c0: 401408}, None),
        MemoryDep('buf180', c0, {c0: 401408}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 256}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (401408, 1)
op181.sizes = ([1568, 256], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op181_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf168', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg142_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf181', get_index_5, add_3, None)
        return store
op181_op182_op183_op185.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1568}, None)]
op182.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 401408}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf182.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1568, 256)
op182.sizes = ([1568], [256])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op182_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_1, getitem)
        return store_reduction
op181_op182_op183_op185.snodes[2] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 1568}, None)]
op183.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 401408}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (1568, 256)
op183.sizes = ([1568], [256])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op183_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf183', get_index_1, getitem_1)
        return store_reduction
op181_op182_op183_op185.snodes[3] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 401408}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf182', c0, {c0: 1568}, None),
        MemoryDep('buf183', c0, {c0: 1568}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 256}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (401408, 1)
op185.sizes = ([1568, 256], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op185_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf182', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf183', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg143_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg144_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf185', get_index_5, add_1, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187_op188_op190: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op187_op188_op190.writes = 
    [   MemoryDep('buf187', c0, {c0: 1568}, None),
        MemoryDep('buf188', c0, {c0: 1568}, None),
        MemoryDep('buf190', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op187_op188_op190.unmet_dependencies = [MemoryDep('buf186', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op187_op188_op190.met_dependencies = 
    [   MemoryDep('arg146_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg148_1', c1, {c0: 1568, c1: 768}, None)]
op187_op188_op190.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op187_op188_op190.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1568}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op187.met_dependencies = [MemoryDep('arg146_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (1568, 768)
op187.sizes = ([1568], [768])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op187_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_4, getitem)
        return store_reduction
op187_op188_op190.snodes[1] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 1568}, None)]
op188.unmet_dependencies = [MemoryDep('buf186', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op188.met_dependencies = [MemoryDep('arg146_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (1568, 768)
op188.sizes = ([1568], [768])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op188_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf188', get_index_4, getitem_1)
        return store_reduction
op187_op188_op190.snodes[2] =
op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op190.unmet_dependencies = 
    [   MemoryDep('buf186', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf187', c0, {c0: 1568}, None),
        MemoryDep('buf188', c0, {c0: 1568}, None)]
op190.met_dependencies = 
    [   MemoryDep('arg146_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg148_1', c1, {c0: 1568, c1: 768}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (1204224, 1)
op190.sizes = ([8, 196, 768], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op190_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf187', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf188', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg147_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg148_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf190', get_index_8, add_4, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1204224}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf186', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf191', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 196}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1204224, 1)
op192.sizes = ([8, 196, 768], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf191', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg150_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf192', get_index_6, mul_3, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194_op195_op197: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op194_op195_op197.writes = 
    [   MemoryDep('buf194', c0, {c0: 1568}, None),
        MemoryDep('buf195', c0, {c0: 1568}, None),
        MemoryDep('buf197', c0, {c0: 401408}, None)]
op194_op195_op197.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf193', c0, {c0: 401408}, None)]
op194_op195_op197.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg153_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg154_1', c1, {c0: 1568, c1: 256}, None)]
op194_op195_op197.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op194_op195_op197.snodes[0] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 1568}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf193', c0, {c0: 401408}, None)]
op194.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 1568, c1: 256}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (1568, 256)
op194.sizes = ([1568], [256])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op194_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction
op194_op195_op197.snodes[1] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 1568}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf193', c0, {c0: 401408}, None)]
op195.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 1568, c1: 256}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (1568, 256)
op195.sizes = ([1568], [256])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op195_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction
op194_op195_op197.snodes[2] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 401408}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf193', c0, {c0: 401408}, None),
        MemoryDep('buf194', c0, {c0: 1568}, None),
        MemoryDep('buf195', c0, {c0: 1568}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg153_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg154_1', c1, {c0: 1568, c1: 256}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (401408, 1)
op197.sizes = ([1568, 256], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op197_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg153_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg154_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf197', get_index_7, add_3, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op198.node.kernel = extern_kernels.mm


op199_op200_op202: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op199_op200_op202.writes = 
    [   MemoryDep('buf199', c0, {c0: 1568}, None),
        MemoryDep('buf200', c0, {c0: 1568}, None),
        MemoryDep('buf202', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op199_op200_op202.unmet_dependencies = [MemoryDep('buf198', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op199_op200_op202.met_dependencies = 
    [   MemoryDep('arg156_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 768}, None)]
op199_op200_op202.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op199_op200_op202.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1568}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op199.met_dependencies = [MemoryDep('arg156_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (1568, 768)
op199.sizes = ([1568], [768])
buf198_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op199_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf199', get_index_4, getitem)
        return store_reduction
op199_op200_op202.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 1568}, None)]
op200.unmet_dependencies = [MemoryDep('buf198', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op200.met_dependencies = [MemoryDep('arg156_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (1568, 768)
op200.sizes = ([1568], [768])
buf198_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op200_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_4, getitem_1)
        return store_reduction
op199_op200_op202.snodes[2] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf198', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf199', c0, {c0: 1568}, None),
        MemoryDep('buf200', c0, {c0: 1568}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg156_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 768}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (1204224, 1)
op202.sizes = ([8, 196, 768], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf199', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf200', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg157_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg158_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf202', get_index_8, add_4, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 1204224}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf198', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf203', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg160_1', c1, {c0: 8, c1: 196}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (1204224, 1)
op204.sizes = ([8, 196, 768], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf203', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg160_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf204', get_index_6, mul_3, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206_op207_op208_op210: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op206_op207_op208_op210.writes = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf207', c0, {c0: 1568}, None),
        MemoryDep('buf208', c0, {c0: 1568}, None),
        MemoryDep('buf210', c0, {c0: 401408}, None)]
op206_op207_op208_op210.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf193', c0, {c0: 401408}, None),
        MemoryDep('buf205', c0, {c0: 401408}, None)]
op206_op207_op208_op210.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 256}, None)]
op206_op207_op208_op210.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf207.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf208.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op206_op207_op208_op210.snodes[0] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 401408}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 401408}, None),
        MemoryDep('buf193', c0, {c0: 401408}, None),
        MemoryDep('buf205', c0, {c0: 401408}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 256}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (401408, 1)
op206.sizes = ([1568, 256], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op206_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf206', get_index_5, add_3, None)
        return store
op206_op207_op208_op210.snodes[1] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 1568}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 401408}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf207.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (1568, 256)
op207.sizes = ([1568], [256])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op207_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_1, getitem)
        return store_reduction
op206_op207_op208_op210.snodes[2] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 1568}, None)]
op208.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 401408}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf208.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (1568, 256)
op208.sizes = ([1568], [256])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op208_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf208', get_index_1, getitem_1)
        return store_reduction
op206_op207_op208_op210.snodes[3] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 401408}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf207', c0, {c0: 1568}, None),
        MemoryDep('buf208', c0, {c0: 1568}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 256}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (401408, 1)
op210.sizes = ([1568, 256], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op210_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf207', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf208', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg163_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg164_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, add_1, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212_op213_op215: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op212_op213_op215.writes = 
    [   MemoryDep('buf212', c0, {c0: 1568}, None),
        MemoryDep('buf213', c0, {c0: 1568}, None),
        MemoryDep('buf215', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op212_op213_op215.unmet_dependencies = [MemoryDep('buf211', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op212_op213_op215.met_dependencies = 
    [   MemoryDep('arg166_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg167_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg168_1', c1, {c0: 1568, c1: 768}, None)]
op212_op213_op215.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op212_op213_op215.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 1568}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op212.met_dependencies = [MemoryDep('arg166_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (1568, 768)
op212.sizes = ([1568], [768])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op212_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_4, getitem)
        return store_reduction
op212_op213_op215.snodes[1] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 1568}, None)]
op213.unmet_dependencies = [MemoryDep('buf211', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op213.met_dependencies = [MemoryDep('arg166_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (1568, 768)
op213.sizes = ([1568], [768])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op213_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_4, getitem_1)
        return store_reduction
op212_op213_op215.snodes[2] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf211', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf212', c0, {c0: 1568}, None),
        MemoryDep('buf213', c0, {c0: 1568}, None)]
op215.met_dependencies = 
    [   MemoryDep('arg166_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg167_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg168_1', c1, {c0: 1568, c1: 768}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (1204224, 1)
op215.sizes = ([8, 196, 768], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf212', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf213', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg167_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg168_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf215', get_index_8, add_4, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 1204224}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf211', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf216', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg170_1', c1, {c0: 8, c1: 196}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (1204224, 1)
op217.sizes = ([8, 196, 768], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf216', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg170_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf217', get_index_6, mul_3, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op218.node.kernel = extern_kernels.mm


op219_op220_op222: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op219_op220_op222.writes = 
    [   MemoryDep('buf219', c0, {c0: 1568}, None),
        MemoryDep('buf220', c0, {c0: 1568}, None),
        MemoryDep('buf222', c0, {c0: 401408}, None)]
op219_op220_op222.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf218', c0, {c0: 401408}, None)]
op219_op220_op222.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 256}, None)]
op219_op220_op222.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf219.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op219_op220_op222.snodes[0] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 1568}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf218', c0, {c0: 401408}, None)]
op219.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 1568, c1: 256}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf219.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (1568, 256)
op219.sizes = ([1568], [256])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op219_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf218', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf219', get_index_3, getitem)
        return store_reduction
op219_op220_op222.snodes[1] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 1568}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf218', c0, {c0: 401408}, None)]
op220.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 1568, c1: 256}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (1568, 256)
op220.sizes = ([1568], [256])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op220_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf218', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf220', get_index_3, getitem_1)
        return store_reduction
op219_op220_op222.snodes[2] =
op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 401408}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf218', c0, {c0: 401408}, None),
        MemoryDep('buf219', c0, {c0: 1568}, None),
        MemoryDep('buf220', c0, {c0: 1568}, None)]
op222.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 256}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (401408, 1)
op222.sizes = ([1568, 256], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op222_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf218', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf219', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf220', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg173_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg174_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf222', get_index_7, add_3, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
]
op223.node.kernel = extern_kernels.mm


op224_op225_op227: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op224_op225_op227.writes = 
    [   MemoryDep('buf224', c0, {c0: 1568}, None),
        MemoryDep('buf225', c0, {c0: 1568}, None),
        MemoryDep('buf227', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op224_op225_op227.unmet_dependencies = [MemoryDep('buf223', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op224_op225_op227.met_dependencies = 
    [   MemoryDep('arg176_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg177_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 768}, None)]
op224_op225_op227.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op224_op225_op227.snodes[0] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 1568}, None)]
op224.unmet_dependencies = [MemoryDep('buf223', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op224.met_dependencies = [MemoryDep('arg176_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (1568, 768)
op224.sizes = ([1568], [768])
buf223_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op224_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf224', get_index_4, getitem)
        return store_reduction
op224_op225_op227.snodes[1] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1568}, None)]
op225.unmet_dependencies = [MemoryDep('buf223', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op225.met_dependencies = [MemoryDep('arg176_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1568, 768)
op225.sizes = ([1568], [768])
buf223_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op225_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_4, getitem_1)
        return store_reduction
op224_op225_op227.snodes[2] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf223', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf224', c0, {c0: 1568}, None),
        MemoryDep('buf225', c0, {c0: 1568}, None)]
op227.met_dependencies = 
    [   MemoryDep('arg176_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg177_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 768}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (1204224, 1)
op227.sizes = ([8, 196, 768], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf224', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf225', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg177_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg178_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf227', get_index_8, add_4, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 1204224}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf223', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf228', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg180_1', c1, {c0: 8, c1: 196}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (1204224, 1)
op229.sizes = ([8, 196, 768], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op229_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf228', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg180_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf229', get_index_6, mul_3, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231_op232_op233_op235: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op231_op232_op233_op235.writes = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf232', c0, {c0: 1568}, None),
        MemoryDep('buf233', c0, {c0: 1568}, None),
        MemoryDep('buf235', c0, {c0: 401408}, None)]
op231_op232_op233_op235.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf218', c0, {c0: 401408}, None),
        MemoryDep('buf230', c0, {c0: 401408}, None)]
op231_op232_op233_op235.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 256}, None)]
op231_op232_op233_op235.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
    ]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op231_op232_op233_op235.snodes[0] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 401408}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 401408}, None),
        MemoryDep('buf218', c0, {c0: 401408}, None),
        MemoryDep('buf230', c0, {c0: 401408}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 256}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (401408, 1)
op231.sizes = ([1568, 256], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op231_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf218', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg182_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, add_3, None)
        return store
op231_op232_op233_op235.snodes[1] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 1568}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 401408}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (1568, 256)
op232.sizes = ([1568], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op232_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_1, getitem)
        return store_reduction
op231_op232_op233_op235.snodes[2] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 1568}, None)]
op233.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 401408}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (1568, 256)
op233.sizes = ([1568], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op233_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem_1)
        return store_reduction
op231_op232_op233_op235.snodes[3] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 401408}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf232', c0, {c0: 1568}, None),
        MemoryDep('buf233', c0, {c0: 1568}, None)]
op235.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 256}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (401408, 1)
op235.sizes = ([1568, 256], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op235_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf233', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg183_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg184_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf235', get_index_5, add_1, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]
op236.node.kernel = extern_kernels.mm


op237_op238_op240: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op237_op238_op240.writes = 
    [   MemoryDep('buf237', c0, {c0: 1568}, None),
        MemoryDep('buf238', c0, {c0: 1568}, None),
        MemoryDep('buf240', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op237_op238_op240.unmet_dependencies = [MemoryDep('buf236', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op237_op238_op240.met_dependencies = 
    [   MemoryDep('arg186_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg187_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 768}, None)]
op237_op238_op240.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf237.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf238.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op237_op238_op240.snodes[0] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1568}, None)]
op237.unmet_dependencies = [MemoryDep('buf236', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op237.met_dependencies = [MemoryDep('arg186_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf237.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (1568, 768)
op237.sizes = ([1568], [768])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op237_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf237', get_index_4, getitem)
        return store_reduction
op237_op238_op240.snodes[1] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 1568}, None)]
op238.unmet_dependencies = [MemoryDep('buf236', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op238.met_dependencies = [MemoryDep('arg186_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf238.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (1568, 768)
op238.sizes = ([1568], [768])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op238_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf238', get_index_4, getitem_1)
        return store_reduction
op237_op238_op240.snodes[2] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf236', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf237', c0, {c0: 1568}, None),
        MemoryDep('buf238', c0, {c0: 1568}, None)]
op240.met_dependencies = 
    [   MemoryDep('arg186_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg187_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 768}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (1204224, 1)
op240.sizes = ([8, 196, 768], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op240_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf237', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf238', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg187_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg188_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf240', get_index_8, add_4, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 1204224}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf236', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf241', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg190_1', c1, {c0: 8, c1: 196}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (1204224, 1)
op242.sizes = ([8, 196, 768], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op242_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf241', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg190_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf242', get_index_6, mul_3, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.mm


op244_op245_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op244_op245_op247.writes = 
    [   MemoryDep('buf244', c0, {c0: 1568}, None),
        MemoryDep('buf245', c0, {c0: 1568}, None),
        MemoryDep('buf247', c0, {c0: 401408}, None)]
op244_op245_op247.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf243', c0, {c0: 401408}, None)]
op244_op245_op247.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 256}, None)]
op244_op245_op247.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op244_op245_op247.snodes[0] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 1568}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf243', c0, {c0: 401408}, None)]
op244.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 1568, c1: 256}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (1568, 256)
op244.sizes = ([1568], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op244_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg192_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, getitem)
        return store_reduction
op244_op245_op247.snodes[1] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1568}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf243', c0, {c0: 401408}, None)]
op245.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 1568, c1: 256}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (1568, 256)
op245.sizes = ([1568], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op245_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg192_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_3, getitem_1)
        return store_reduction
op244_op245_op247.snodes[2] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 401408}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf243', c0, {c0: 401408}, None),
        MemoryDep('buf244', c0, {c0: 1568}, None),
        MemoryDep('buf245', c0, {c0: 1568}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 256}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (401408, 1)
op247.sizes = ([1568, 256], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op247_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg192_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf244', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf245', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg193_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg194_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf247', get_index_7, add_3, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg195_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.mm


op249_op250_op252: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op249_op250_op252.writes = 
    [   MemoryDep('buf249', c0, {c0: 1568}, None),
        MemoryDep('buf250', c0, {c0: 1568}, None),
        MemoryDep('buf252', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op249_op250_op252.unmet_dependencies = [MemoryDep('buf248', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op249_op250_op252.met_dependencies = 
    [   MemoryDep('arg196_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg197_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 768}, None)]
op249_op250_op252.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op249_op250_op252.snodes[0] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 1568}, None)]
op249.unmet_dependencies = [MemoryDep('buf248', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op249.met_dependencies = [MemoryDep('arg196_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (1568, 768)
op249.sizes = ([1568], [768])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op249_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf248', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf249', get_index_4, getitem)
        return store_reduction
op249_op250_op252.snodes[1] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 1568}, None)]
op250.unmet_dependencies = [MemoryDep('buf248', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op250.met_dependencies = [MemoryDep('arg196_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (1568, 768)
op250.sizes = ([1568], [768])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op250_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf248', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_4, getitem_1)
        return store_reduction
op249_op250_op252.snodes[2] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf248', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf249', c0, {c0: 1568}, None),
        MemoryDep('buf250', c0, {c0: 1568}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg196_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg197_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 768}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (1204224, 1)
op252.sizes = ([8, 196, 768], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf248', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf249', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf250', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg197_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg198_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf252', get_index_8, add_4, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.mm


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 1204224}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf248', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf253', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg196_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg200_1', c1, {c0: 8, c1: 196}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (1204224, 1)
op254.sizes = ([8, 196, 768], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op254_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf248', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf253', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg200_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf254', get_index_6, mul_3, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op255.node.kernel = extern_kernels.mm


op256_op257_op258_op260: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op256_op257_op258_op260.writes = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf257', c0, {c0: 1568}, None),
        MemoryDep('buf258', c0, {c0: 1568}, None),
        MemoryDep('buf260', c0, {c0: 401408}, None)]
op256_op257_op258_op260.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf243', c0, {c0: 401408}, None),
        MemoryDep('buf255', c0, {c0: 401408}, None)]
op256_op257_op258_op260.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg202_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg203_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 256}, None)]
op256_op257_op258_op260.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
    ]
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf257.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf258.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op256_op257_op258_op260.snodes[0] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 401408}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 401408}, None),
        MemoryDep('buf243', c0, {c0: 401408}, None),
        MemoryDep('buf255', c0, {c0: 401408}, None)]
op256.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg202_1', c1, {c0: 1568, c1: 256}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (401408, 1)
op256.sizes = ([1568, 256], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op256_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg192_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf255', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg202_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf256', get_index_5, add_3, None)
        return store
op256_op257_op258_op260.snodes[1] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1568}, None)]
op257.unmet_dependencies = [MemoryDep('buf256', c0, {c0: 401408}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf257.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1568, 256)
op257.sizes = ([1568], [256])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op257_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_1, getitem)
        return store_reduction
op256_op257_op258_op260.snodes[2] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 1568}, None)]
op258.unmet_dependencies = [MemoryDep('buf256', c0, {c0: 401408}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf258.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (1568, 256)
op258.sizes = ([1568], [256])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op258_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf258', get_index_1, getitem_1)
        return store_reduction
op256_op257_op258_op260.snodes[3] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 401408}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf257', c0, {c0: 1568}, None),
        MemoryDep('buf258', c0, {c0: 1568}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg203_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 256}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (401408, 1)
op260.sizes = ([1568, 256], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op260_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf257', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf258', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg203_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg204_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf260', get_index_5, add_1, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.mm


op262_op263_op265: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op262_op263_op265.writes = 
    [   MemoryDep('buf262', c0, {c0: 1568}, None),
        MemoryDep('buf263', c0, {c0: 1568}, None),
        MemoryDep('buf265', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op262_op263_op265.unmet_dependencies = [MemoryDep('buf261', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op262_op263_op265.met_dependencies = 
    [   MemoryDep('arg206_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg207_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg208_1', c1, {c0: 1568, c1: 768}, None)]
op262_op263_op265.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf262.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op262_op263_op265.snodes[0] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 1568}, None)]
op262.unmet_dependencies = [MemoryDep('buf261', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op262.met_dependencies = [MemoryDep('arg206_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf262.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (1568, 768)
op262.sizes = ([1568], [768])
buf261_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op262_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf261', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf262', get_index_4, getitem)
        return store_reduction
op262_op263_op265.snodes[1] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 1568}, None)]
op263.unmet_dependencies = [MemoryDep('buf261', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op263.met_dependencies = [MemoryDep('arg206_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (1568, 768)
op263.sizes = ([1568], [768])
buf261_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op263_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf261', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_4, getitem_1)
        return store_reduction
op262_op263_op265.snodes[2] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf261', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf262', c0, {c0: 1568}, None),
        MemoryDep('buf263', c0, {c0: 1568}, None)]
op265.met_dependencies = 
    [   MemoryDep('arg206_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg207_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg208_1', c1, {c0: 1568, c1: 768}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (1204224, 1)
op265.sizes = ([8, 196, 768], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op265_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf261', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf262', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf263', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg207_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg208_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf265', get_index_8, add_4, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 1204224}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf261', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf266', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg210_1', c1, {c0: 8, c1: 196}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (1204224, 1)
op267.sizes = ([8, 196, 768], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op267_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf261', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf266', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg210_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf267', get_index_6, mul_3, None)
        return store


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
    ]
]
op268.node.kernel = extern_kernels.mm


op269_op270_op272: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op269_op270_op272.writes = 
    [   MemoryDep('buf269', c0, {c0: 1568}, None),
        MemoryDep('buf270', c0, {c0: 1568}, None),
        MemoryDep('buf272', c0, {c0: 401408}, None)]
op269_op270_op272.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf268', c0, {c0: 401408}, None)]
op269_op270_op272.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg214_1', c1, {c0: 1568, c1: 256}, None)]
op269_op270_op272.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf269.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op269_op270_op272.snodes[0] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 1568}, None)]
op269.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf268', c0, {c0: 401408}, None)]
op269.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf269.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (1568, 256)
op269.sizes = ([1568], [256])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op269_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf268', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf269', get_index_3, getitem)
        return store_reduction
op269_op270_op272.snodes[1] =
op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 1568}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf268', c0, {c0: 401408}, None)]
op270.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (1568, 256)
op270.sizes = ([1568], [256])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op270_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf268', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf270', get_index_3, getitem_1)
        return store_reduction
op269_op270_op272.snodes[2] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 401408}, None)]
op272.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf268', c0, {c0: 401408}, None),
        MemoryDep('buf269', c0, {c0: 1568}, None),
        MemoryDep('buf270', c0, {c0: 1568}, None)]
op272.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg214_1', c1, {c0: 1568, c1: 256}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (401408, 1)
op272.sizes = ([1568, 256], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op272_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf268', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf269', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf270', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg213_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg214_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf272', get_index_7, add_3, None)
        return store


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None)]
op273.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op273.node.kernel = extern_kernels.mm


op274_op275_op277: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op274_op275_op277.writes = 
    [   MemoryDep('buf274', c0, {c0: 1568}, None),
        MemoryDep('buf275', c0, {c0: 1568}, None),
        MemoryDep('buf277', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op274_op275_op277.unmet_dependencies = [MemoryDep('buf273', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op274_op275_op277.met_dependencies = 
    [   MemoryDep('arg216_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 768}, None)]
op274_op275_op277.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op274_op275_op277.snodes[0] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 1568}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op274.met_dependencies = [MemoryDep('arg216_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (1568, 768)
op274.sizes = ([1568], [768])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op274_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf274', get_index_4, getitem)
        return store_reduction
op274_op275_op277.snodes[1] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 1568}, None)]
op275.unmet_dependencies = [MemoryDep('buf273', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op275.met_dependencies = [MemoryDep('arg216_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (1568, 768)
op275.sizes = ([1568], [768])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op275_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_4, getitem_1)
        return store_reduction
op274_op275_op277.snodes[2] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf273', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf274', c0, {c0: 1568}, None),
        MemoryDep('buf275', c0, {c0: 1568}, None)]
op277.met_dependencies = 
    [   MemoryDep('arg216_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 768}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (1204224, 1)
op277.sizes = ([8, 196, 768], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op277_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf274', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf275', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg217_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg218_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf277', get_index_8, add_4, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op278.met_dependencies = [StarDep(name='arg219_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 1204224}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf273', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf278', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg220_1', c1, {c0: 8, c1: 196}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (1204224, 1)
op279.sizes = ([8, 196, 768], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf278', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg220_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf279', get_index_6, mul_3, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281_op282_op283_op285: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op281_op282_op283_op285.writes = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf282', c0, {c0: 1568}, None),
        MemoryDep('buf283', c0, {c0: 1568}, None),
        MemoryDep('buf285', c0, {c0: 401408}, None)]
op281_op282_op283_op285.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf268', c0, {c0: 401408}, None),
        MemoryDep('buf280', c0, {c0: 401408}, None)]
op281_op282_op283_op285.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg222_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg223_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg224_1', c1, {c0: 1568, c1: 256}, None)]
op281_op282_op283_op285.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op281_op282_op283_op285.snodes[0] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 401408}, None)]
op281.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 401408}, None),
        MemoryDep('buf268', c0, {c0: 401408}, None),
        MemoryDep('buf280', c0, {c0: 401408}, None)]
op281.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg222_1', c1, {c0: 1568, c1: 256}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (401408, 1)
op281.sizes = ([1568, 256], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op281_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf268', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf280', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg222_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf281', get_index_5, add_3, None)
        return store
op281_op282_op283_op285.snodes[1] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 1568}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 401408}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (1568, 256)
op282.sizes = ([1568], [256])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op282_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf282', get_index_1, getitem)
        return store_reduction
op281_op282_op283_op285.snodes[2] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 1568}, None)]
op283.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 401408}, None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (1568, 256)
op283.sizes = ([1568], [256])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op283_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf283', get_index_1, getitem_1)
        return store_reduction
op281_op282_op283_op285.snodes[3] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 401408}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf282', c0, {c0: 1568}, None),
        MemoryDep('buf283', c0, {c0: 1568}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg224_1', c1, {c0: 1568, c1: 256}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (401408, 1)
op285.sizes = ([1568, 256], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op285_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf282', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf283', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg223_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg224_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf285', get_index_5, add_1, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.mm


op287_op288_op290: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op287_op288_op290.writes = 
    [   MemoryDep('buf287', c0, {c0: 1568}, None),
        MemoryDep('buf288', c0, {c0: 1568}, None),
        MemoryDep('buf290', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op287_op288_op290.unmet_dependencies = [MemoryDep('buf286', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op287_op288_op290.met_dependencies = 
    [   MemoryDep('arg226_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg227_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 768}, None)]
op287_op288_op290.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf287.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op287_op288_op290.snodes[0] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 1568}, None)]
op287.unmet_dependencies = [MemoryDep('buf286', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op287.met_dependencies = [MemoryDep('arg226_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf287.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (1568, 768)
op287.sizes = ([1568], [768])
buf286_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op287_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg226_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf287', get_index_4, getitem)
        return store_reduction
op287_op288_op290.snodes[1] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 1568}, None)]
op288.unmet_dependencies = [MemoryDep('buf286', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op288.met_dependencies = [MemoryDep('arg226_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (1568, 768)
op288.sizes = ([1568], [768])
buf286_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op288_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg226_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf288', get_index_4, getitem_1)
        return store_reduction
op287_op288_op290.snodes[2] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf286', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf287', c0, {c0: 1568}, None),
        MemoryDep('buf288', c0, {c0: 1568}, None)]
op290.met_dependencies = 
    [   MemoryDep('arg226_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg227_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 768}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (1204224, 1)
op290.sizes = ([8, 196, 768], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op290_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg226_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf287', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf288', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg227_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg228_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf290', get_index_8, add_4, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 1204224}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf286', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf291', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg230_1', c1, {c0: 8, c1: 196}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (1204224, 1)
op292.sizes = ([8, 196, 768], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op292_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg226_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf291', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg230_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf292', get_index_6, mul_3, None)
        return store


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op293.node.kernel = extern_kernels.mm


op294_op295_op297: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op294_op295_op297.writes = 
    [   MemoryDep('buf294', c0, {c0: 1568}, None),
        MemoryDep('buf295', c0, {c0: 1568}, None),
        MemoryDep('buf297', c0, {c0: 401408}, None)]
op294_op295_op297.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf293', c0, {c0: 401408}, None)]
op294_op295_op297.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg234_1', c1, {c0: 1568, c1: 256}, None)]
op294_op295_op297.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf294.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf295.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op294_op295_op297.snodes[0] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 1568}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf293', c0, {c0: 401408}, None)]
op294.met_dependencies = [MemoryDep('arg232_1', c1, {c0: 1568, c1: 256}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf294.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (1568, 256)
op294.sizes = ([1568], [256])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op294_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf293', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg232_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf294', get_index_3, getitem)
        return store_reduction
op294_op295_op297.snodes[1] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 1568}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf293', c0, {c0: 401408}, None)]
op295.met_dependencies = [MemoryDep('arg232_1', c1, {c0: 1568, c1: 256}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf295.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (1568, 256)
op295.sizes = ([1568], [256])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op295_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf293', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg232_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf295', get_index_3, getitem_1)
        return store_reduction
op294_op295_op297.snodes[2] =
op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 401408}, None)]
op297.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf293', c0, {c0: 401408}, None),
        MemoryDep('buf294', c0, {c0: 1568}, None),
        MemoryDep('buf295', c0, {c0: 1568}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg234_1', c1, {c0: 1568, c1: 256}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (401408, 1)
op297.sizes = ([1568, 256], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op297_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf293', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg232_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf294', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf295', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg233_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg234_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf297', get_index_7, add_3, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelOut)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op298.outputs = [
    buf298: ExternKernelOut
    buf298.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
]
op298.node.kernel = extern_kernels.mm


op299_op300_op302: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op299_op300_op302.writes = 
    [   MemoryDep('buf299', c0, {c0: 1568}, None),
        MemoryDep('buf300', c0, {c0: 1568}, None),
        MemoryDep('buf302', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op299_op300_op302.unmet_dependencies = [MemoryDep('buf298', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op299_op300_op302.met_dependencies = 
    [   MemoryDep('arg236_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg238_1', c1, {c0: 1568, c1: 768}, None)]
op299_op300_op302.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf299.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf300.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op299_op300_op302.snodes[0] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 1568}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op299.met_dependencies = [MemoryDep('arg236_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf299.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (1568, 768)
op299.sizes = ([1568], [768])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op299_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg236_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf299', get_index_4, getitem)
        return store_reduction
op299_op300_op302.snodes[1] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 1568}, None)]
op300.unmet_dependencies = [MemoryDep('buf298', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op300.met_dependencies = [MemoryDep('arg236_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf300.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (1568, 768)
op300.sizes = ([1568], [768])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op300_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg236_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_4, getitem_1)
        return store_reduction
op299_op300_op302.snodes[2] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf298', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf299', c0, {c0: 1568}, None),
        MemoryDep('buf300', c0, {c0: 1568}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg236_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg238_1', c1, {c0: 1568, c1: 768}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (1204224, 1)
op302.sizes = ([8, 196, 768], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg236_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf299', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf300', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg237_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg238_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf302', get_index_8, add_4, None)
        return store


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.node.kernel = extern_kernels.mm


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 1204224}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf298', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf303', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg236_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg240_1', c1, {c0: 8, c1: 196}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (1204224, 1)
op304.sizes = ([8, 196, 768], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg236_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf303', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg240_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf304', get_index_6, mul_3, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False)]
]
op305.node.kernel = extern_kernels.mm


op306_op307_op308_op310: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op306_op307_op308_op310.writes = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf307', c0, {c0: 1568}, None),
        MemoryDep('buf308', c0, {c0: 1568}, None),
        MemoryDep('buf310', c0, {c0: 401408}, None)]
op306_op307_op308_op310.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf293', c0, {c0: 401408}, None),
        MemoryDep('buf305', c0, {c0: 401408}, None)]
op306_op307_op308_op310.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg242_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg243_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg244_1', c1, {c0: 1568, c1: 256}, None)]
op306_op307_op308_op310.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf307.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op306_op307_op308_op310.snodes[0] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 401408}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 401408}, None),
        MemoryDep('buf293', c0, {c0: 401408}, None),
        MemoryDep('buf305', c0, {c0: 401408}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg242_1', c1, {c0: 1568, c1: 256}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (401408, 1)
op306.sizes = ([1568, 256], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op306_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf293', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg232_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf305', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg242_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf306', get_index_5, add_3, None)
        return store
op306_op307_op308_op310.snodes[1] =
op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 1568}, None)]
op307.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 401408}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf307.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (1568, 256)
op307.sizes = ([1568], [256])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op307_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf307', get_index_1, getitem)
        return store_reduction
op306_op307_op308_op310.snodes[2] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 1568}, None)]
op308.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 401408}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (1568, 256)
op308.sizes = ([1568], [256])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op308_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf308', get_index_1, getitem_1)
        return store_reduction
op306_op307_op308_op310.snodes[3] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 401408}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf307', c0, {c0: 1568}, None),
        MemoryDep('buf308', c0, {c0: 1568}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg243_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg244_1', c1, {c0: 1568, c1: 256}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (401408, 1)
op310.sizes = ([1568, 256], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op310_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf307', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf308', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg243_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg244_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf310', get_index_5, add_1, None)
        return store


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
    ]
]
op311.node.kernel = extern_kernels.mm


op312_op313_op315: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op312_op313_op315.writes = 
    [   MemoryDep('buf312', c0, {c0: 1568}, None),
        MemoryDep('buf313', c0, {c0: 1568}, None),
        MemoryDep('buf315', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op312_op313_op315.unmet_dependencies = [MemoryDep('buf311', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op312_op313_op315.met_dependencies = 
    [   MemoryDep('arg246_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg247_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 768}, None)]
op312_op313_op315.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf312.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op312_op313_op315.snodes[0] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 1568}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op312.met_dependencies = [MemoryDep('arg246_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf312.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (1568, 768)
op312.sizes = ([1568], [768])
buf311_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op312_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf311', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf312', get_index_4, getitem)
        return store_reduction
op312_op313_op315.snodes[1] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 1568}, None)]
op313.unmet_dependencies = [MemoryDep('buf311', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op313.met_dependencies = [MemoryDep('arg246_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (1568, 768)
op313.sizes = ([1568], [768])
buf311_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op313_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf311', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf313', get_index_4, getitem_1)
        return store_reduction
op312_op313_op315.snodes[2] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf311', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf312', c0, {c0: 1568}, None),
        MemoryDep('buf313', c0, {c0: 1568}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg246_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg247_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 768}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (1204224, 1)
op315.sizes = ([8, 196, 768], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op315_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf311', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf312', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf313', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg247_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg248_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf315', get_index_8, add_4, None)
        return store


op316: ExternKernelSchedulerNode(ExternKernelOut)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelOut
    buf316.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf316.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.node.kernel = extern_kernels.mm


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 1204224}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf311', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf316', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg246_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg250_1', c1, {c0: 8, c1: 196}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (1204224, 1)
op317.sizes = ([8, 196, 768], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op317_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf311', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf316', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg250_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf317', get_index_6, mul_3, None)
        return store


op318: ExternKernelSchedulerNode(ExternKernelOut)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelOut
    buf318.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op318.node.kernel = extern_kernels.mm


op319_op320_op322: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op319_op320_op322.writes = 
    [   MemoryDep('buf319', c0, {c0: 1568}, None),
        MemoryDep('buf320', c0, {c0: 1568}, None),
        MemoryDep('buf322', c0, {c0: 401408}, None)]
op319_op320_op322.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf318', c0, {c0: 401408}, None)]
op319_op320_op322.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 256}, None)]
op319_op320_op322.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf319.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf320.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op319_op320_op322.snodes[0] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 1568}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf318', c0, {c0: 401408}, None)]
op319.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 1568, c1: 256}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf319.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (1568, 256)
op319.sizes = ([1568], [256])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op319_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf319', get_index_3, getitem)
        return store_reduction
op319_op320_op322.snodes[1] =
op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1568}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf318', c0, {c0: 401408}, None)]
op320.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 1568, c1: 256}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf320.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (1568, 256)
op320.sizes = ([1568], [256])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op320_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf320', get_index_3, getitem_1)
        return store_reduction
op319_op320_op322.snodes[2] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 401408}, None)]
op322.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf318', c0, {c0: 401408}, None),
        MemoryDep('buf319', c0, {c0: 1568}, None),
        MemoryDep('buf320', c0, {c0: 1568}, None)]
op322.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 256}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (401408, 1)
op322.sizes = ([1568, 256], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op322_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf319', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf320', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg253_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg254_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf322', get_index_7, add_3, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
    ]
]
op323.node.kernel = extern_kernels.mm


op324_op325_op327: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op324_op325_op327.writes = 
    [   MemoryDep('buf324', c0, {c0: 1568}, None),
        MemoryDep('buf325', c0, {c0: 1568}, None),
        MemoryDep('buf327', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op324_op325_op327.unmet_dependencies = [MemoryDep('buf323', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op324_op325_op327.met_dependencies = 
    [   MemoryDep('arg256_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg257_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg258_1', c1, {c0: 1568, c1: 768}, None)]
op324_op325_op327.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf324.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf325.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op324_op325_op327.snodes[0] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 1568}, None)]
op324.unmet_dependencies = [MemoryDep('buf323', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op324.met_dependencies = [MemoryDep('arg256_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf324.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (1568, 768)
op324.sizes = ([1568], [768])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op324_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf324', get_index_4, getitem)
        return store_reduction
op324_op325_op327.snodes[1] =
op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 1568}, None)]
op325.unmet_dependencies = [MemoryDep('buf323', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op325.met_dependencies = [MemoryDep('arg256_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf325.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (1568, 768)
op325.sizes = ([1568], [768])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op325_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf325', get_index_4, getitem_1)
        return store_reduction
op324_op325_op327.snodes[2] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op327.unmet_dependencies = 
    [   MemoryDep('buf323', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf324', c0, {c0: 1568}, None),
        MemoryDep('buf325', c0, {c0: 1568}, None)]
op327.met_dependencies = 
    [   MemoryDep('arg256_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg257_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg258_1', c1, {c0: 1568, c1: 768}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (1204224, 1)
op327.sizes = ([8, 196, 768], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf324', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf325', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg257_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg258_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf327', get_index_8, add_4, None)
        return store


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.node.kernel = extern_kernels.mm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 1204224}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf323', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf328', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op329.met_dependencies = 
    [   MemoryDep('arg256_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg260_1', c1, {c0: 8, c1: 196}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (1204224, 1)
op329.sizes = ([8, 196, 768], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op329_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf328', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg260_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf329', get_index_6, mul_3, None)
        return store


op330: ExternKernelSchedulerNode(ExternKernelOut)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelOut
    buf330.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.mm


op331_op332_op333_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op331_op332_op333_op335.writes = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf332', c0, {c0: 1568}, None),
        MemoryDep('buf333', c0, {c0: 1568}, None),
        MemoryDep('buf335', c0, {c0: 401408}, None)]
op331_op332_op333_op335.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf318', c0, {c0: 401408}, None),
        MemoryDep('buf330', c0, {c0: 401408}, None)]
op331_op332_op333_op335.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg262_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg263_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 256}, None)]
op331_op332_op333_op335.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op331_op332_op333_op335.snodes[0] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 401408}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 401408}, None),
        MemoryDep('buf318', c0, {c0: 401408}, None),
        MemoryDep('buf330', c0, {c0: 401408}, None)]
op331.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg262_1', c1, {c0: 1568, c1: 256}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (401408, 1)
op331.sizes = ([1568, 256], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op331_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf330', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg262_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf331', get_index_5, add_3, None)
        return store
op331_op332_op333_op335.snodes[1] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1568}, None)]
op332.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 401408}, None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (1568, 256)
op332.sizes = ([1568], [256])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op332_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf332', get_index_1, getitem)
        return store_reduction
op331_op332_op333_op335.snodes[2] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 1568}, None)]
op333.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 401408}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (1568, 256)
op333.sizes = ([1568], [256])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op333_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_1, getitem_1)
        return store_reduction
op331_op332_op333_op335.snodes[3] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 401408}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf332', c0, {c0: 1568}, None),
        MemoryDep('buf333', c0, {c0: 1568}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg263_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 256}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (401408, 1)
op335.sizes = ([1568, 256], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op335_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf333', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg263_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg264_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf335', get_index_5, add_1, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op336.node.kernel = extern_kernels.mm


op337_op338_op340: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op337_op338_op340.writes = 
    [   MemoryDep('buf337', c0, {c0: 1568}, None),
        MemoryDep('buf338', c0, {c0: 1568}, None),
        MemoryDep('buf340', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op337_op338_op340.unmet_dependencies = [MemoryDep('buf336', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op337_op338_op340.met_dependencies = 
    [   MemoryDep('arg266_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg267_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg268_1', c1, {c0: 1568, c1: 768}, None)]
op337_op338_op340.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf337.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf338.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op337_op338_op340.snodes[0] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 1568}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op337.met_dependencies = [MemoryDep('arg266_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf337.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (1568, 768)
op337.sizes = ([1568], [768])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf337', get_index_4, getitem)
        return store_reduction
op337_op338_op340.snodes[1] =
op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1568}, None)]
op338.unmet_dependencies = [MemoryDep('buf336', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op338.met_dependencies = [MemoryDep('arg266_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf338.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (1568, 768)
op338.sizes = ([1568], [768])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op338_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf338', get_index_4, getitem_1)
        return store_reduction
op337_op338_op340.snodes[2] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf336', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf337', c0, {c0: 1568}, None),
        MemoryDep('buf338', c0, {c0: 1568}, None)]
op340.met_dependencies = 
    [   MemoryDep('arg266_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg267_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg268_1', c1, {c0: 1568, c1: 768}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1204224, 1)
op340.sizes = ([8, 196, 768], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op340_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf337', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf338', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg267_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg268_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf340', get_index_8, add_4, None)
        return store


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op341.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 1204224}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf336', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf341', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op342.met_dependencies = 
    [   MemoryDep('arg266_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg270_1', c1, {c0: 8, c1: 196}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (1204224, 1)
op342.sizes = ([8, 196, 768], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op342_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf341', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg270_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf342', get_index_6, mul_3, None)
        return store


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf342', mode=None)]
op343.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
]
op343.node.kernel = extern_kernels.mm


op344_op345_op347: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op344_op345_op347.writes = 
    [   MemoryDep('buf344', c0, {c0: 1568}, None),
        MemoryDep('buf345', c0, {c0: 1568}, None),
        MemoryDep('buf347', c0, {c0: 401408}, None)]
op344_op345_op347.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf343', c0, {c0: 401408}, None)]
op344_op345_op347.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg274_1', c1, {c0: 1568, c1: 256}, None)]
op344_op345_op347.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf344.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf345.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op344_op345_op347.snodes[0] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1568}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf343', c0, {c0: 401408}, None)]
op344.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 1568, c1: 256}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf344.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (1568, 256)
op344.sizes = ([1568], [256])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op344_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf344', get_index_3, getitem)
        return store_reduction
op344_op345_op347.snodes[1] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 1568}, None)]
op345.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf343', c0, {c0: 401408}, None)]
op345.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 1568, c1: 256}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf345.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (1568, 256)
op345.sizes = ([1568], [256])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op345_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf345', get_index_3, getitem_1)
        return store_reduction
op344_op345_op347.snodes[2] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 401408}, None)]
op347.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf343', c0, {c0: 401408}, None),
        MemoryDep('buf344', c0, {c0: 1568}, None),
        MemoryDep('buf345', c0, {c0: 1568}, None)]
op347.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg274_1', c1, {c0: 1568, c1: 256}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (401408, 1)
op347.sizes = ([1568, 256], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op347_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf344', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf345', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg273_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg274_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf347', get_index_7, add_3, None)
        return store


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg275_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
    ]
]
op348.node.kernel = extern_kernels.mm


op349_op350_op352: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op349_op350_op352.writes = 
    [   MemoryDep('buf349', c0, {c0: 1568}, None),
        MemoryDep('buf350', c0, {c0: 1568}, None),
        MemoryDep('buf352', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op349_op350_op352.unmet_dependencies = [MemoryDep('buf348', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op349_op350_op352.met_dependencies = 
    [   MemoryDep('arg276_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg277_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg278_1', c1, {c0: 1568, c1: 768}, None)]
op349_op350_op352.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf349.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf350.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op349_op350_op352.snodes[0] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 1568}, None)]
op349.unmet_dependencies = [MemoryDep('buf348', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op349.met_dependencies = [MemoryDep('arg276_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf349.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (1568, 768)
op349.sizes = ([1568], [768])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op349_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf349', get_index_4, getitem)
        return store_reduction
op349_op350_op352.snodes[1] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 1568}, None)]
op350.unmet_dependencies = [MemoryDep('buf348', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op350.met_dependencies = [MemoryDep('arg276_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf350.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (1568, 768)
op350.sizes = ([1568], [768])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op350_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf350', get_index_4, getitem_1)
        return store_reduction
op349_op350_op352.snodes[2] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf348', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf349', c0, {c0: 1568}, None),
        MemoryDep('buf350', c0, {c0: 1568}, None)]
op352.met_dependencies = 
    [   MemoryDep('arg276_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg277_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg278_1', c1, {c0: 1568, c1: 768}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (1204224, 1)
op352.sizes = ([8, 196, 768], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf349', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf350', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg277_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg278_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf352', get_index_8, add_4, None)
        return store


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 1204224}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf348', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf353', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg280_1', c1, {c0: 8, c1: 196}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (1204224, 1)
op354.sizes = ([8, 196, 768], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf353', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg280_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf354', get_index_6, mul_3, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False)]
]
op355.node.kernel = extern_kernels.mm


op356_op357_op358_op360: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op356_op357_op358_op360.writes = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf357', c0, {c0: 1568}, None),
        MemoryDep('buf358', c0, {c0: 1568}, None),
        MemoryDep('buf360', c0, {c0: 401408}, None)]
op356_op357_op358_op360.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf343', c0, {c0: 401408}, None),
        MemoryDep('buf355', c0, {c0: 401408}, None)]
op356_op357_op358_op360.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg282_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg283_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 256}, None)]
op356_op357_op358_op360.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf357.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf358.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op356_op357_op358_op360.snodes[0] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 401408}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 401408}, None),
        MemoryDep('buf343', c0, {c0: 401408}, None),
        MemoryDep('buf355', c0, {c0: 401408}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg282_1', c1, {c0: 1568, c1: 256}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (401408, 1)
op356.sizes = ([1568, 256], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op356_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf355', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg282_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf356', get_index_5, add_3, None)
        return store
op356_op357_op358_op360.snodes[1] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 1568}, None)]
op357.unmet_dependencies = [MemoryDep('buf356', c0, {c0: 401408}, None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf357.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1568, 256)
op357.sizes = ([1568], [256])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op357_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf357', get_index_1, getitem)
        return store_reduction
op356_op357_op358_op360.snodes[2] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 1568}, None)]
op358.unmet_dependencies = [MemoryDep('buf356', c0, {c0: 401408}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf358.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (1568, 256)
op358.sizes = ([1568], [256])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op358_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf358', get_index_1, getitem_1)
        return store_reduction
op356_op357_op358_op360.snodes[3] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 401408}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf357', c0, {c0: 1568}, None),
        MemoryDep('buf358', c0, {c0: 1568}, None)]
op360.met_dependencies = 
    [   MemoryDep('arg283_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 256}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (401408, 1)
op360.sizes = ([1568, 256], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op360_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf357', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf358', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg283_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg284_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf360', get_index_5, add_1, None)
        return store


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
    ]
]
op361.node.kernel = extern_kernels.mm


op362_op363_op365: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op362_op363_op365.writes = 
    [   MemoryDep('buf362', c0, {c0: 1568}, None),
        MemoryDep('buf363', c0, {c0: 1568}, None),
        MemoryDep('buf365', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op362_op363_op365.unmet_dependencies = [MemoryDep('buf361', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op362_op363_op365.met_dependencies = 
    [   MemoryDep('arg286_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg287_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg288_1', c1, {c0: 1568, c1: 768}, None)]
op362_op363_op365.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf362.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf363.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf365.users = [NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op362_op363_op365.snodes[0] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 1568}, None)]
op362.unmet_dependencies = [MemoryDep('buf361', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op362.met_dependencies = [MemoryDep('arg286_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf362.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (1568, 768)
op362.sizes = ([1568], [768])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op362_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf361', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg286_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf362', get_index_4, getitem)
        return store_reduction
op362_op363_op365.snodes[1] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 1568}, None)]
op363.unmet_dependencies = [MemoryDep('buf361', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op363.met_dependencies = [MemoryDep('arg286_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf363.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (1568, 768)
op363.sizes = ([1568], [768])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op363_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf361', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg286_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf363', get_index_4, getitem_1)
        return store_reduction
op362_op363_op365.snodes[2] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op365.unmet_dependencies = 
    [   MemoryDep('buf361', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf362', c0, {c0: 1568}, None),
        MemoryDep('buf363', c0, {c0: 1568}, None)]
op365.met_dependencies = 
    [   MemoryDep('arg286_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg287_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg288_1', c1, {c0: 1568, c1: 768}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf365.users = [NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (1204224, 1)
op365.sizes = ([8, 196, 768], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op365_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf361', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg286_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf362', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf363', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg287_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg288_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf365', get_index_8, add_4, None)
        return store


op366: ExternKernelSchedulerNode(ExternKernelOut)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op366.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op366.outputs = [
    buf366: ExternKernelOut
    buf366.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf366.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.node.kernel = extern_kernels.mm


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 1204224}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf361', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf366', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg290_1', c1, {c0: 8, c1: 196}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (1204224, 1)
op367.sizes = ([8, 196, 768], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op367_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf361', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg286_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf366', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg290_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf367', get_index_6, mul_3, None)
        return store


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
]
op368.node.kernel = extern_kernels.mm


op369_op370_op372: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op369_op370_op372.writes = 
    [   MemoryDep('buf369', c0, {c0: 1568}, None),
        MemoryDep('buf370', c0, {c0: 1568}, None),
        MemoryDep('buf372', c0, {c0: 401408}, None)]
op369_op370_op372.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf368', c0, {c0: 401408}, None)]
op369_op370_op372.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg293_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg294_1', c1, {c0: 1568, c1: 256}, None)]
op369_op370_op372.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf369.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf370.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op369_op370_op372.snodes[0] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 1568}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf368', c0, {c0: 401408}, None)]
op369.met_dependencies = [MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf369.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (1568, 256)
op369.sizes = ([1568], [256])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op369_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf368', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg292_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf369', get_index_3, getitem)
        return store_reduction
op369_op370_op372.snodes[1] =
op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 1568}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf368', c0, {c0: 401408}, None)]
op370.met_dependencies = [MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf370.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (1568, 256)
op370.sizes = ([1568], [256])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op370_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf368', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg292_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf370', get_index_3, getitem_1)
        return store_reduction
op369_op370_op372.snodes[2] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 401408}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf368', c0, {c0: 401408}, None),
        MemoryDep('buf369', c0, {c0: 1568}, None),
        MemoryDep('buf370', c0, {c0: 1568}, None)]
op372.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg293_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg294_1', c1, {c0: 1568, c1: 256}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (401408, 1)
op372.sizes = ([1568, 256], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op372_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf368', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg292_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf369', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf370', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg293_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg294_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf372', get_index_7, add_3, None)
        return store


op373: ExternKernelSchedulerNode(ExternKernelOut)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op373.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op373.outputs = [
    buf373: ExternKernelOut
    buf373.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
    ]
]
op373.node.kernel = extern_kernels.mm


op374_op375_op377: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op374_op375_op377.writes = 
    [   MemoryDep('buf374', c0, {c0: 1568}, None),
        MemoryDep('buf375', c0, {c0: 1568}, None),
        MemoryDep('buf377', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op374_op375_op377.unmet_dependencies = [MemoryDep('buf373', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op374_op375_op377.met_dependencies = 
    [   MemoryDep('arg296_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg297_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg298_1', c1, {c0: 1568, c1: 768}, None)]
op374_op375_op377.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf374.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf375.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op374_op375_op377.snodes[0] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 1568}, None)]
op374.unmet_dependencies = [MemoryDep('buf373', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op374.met_dependencies = [MemoryDep('arg296_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf374.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (1568, 768)
op374.sizes = ([1568], [768])
buf373_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op374_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf373', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg296_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf374', get_index_4, getitem)
        return store_reduction
op374_op375_op377.snodes[1] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 1568}, None)]
op375.unmet_dependencies = [MemoryDep('buf373', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None)]
op375.met_dependencies = [MemoryDep('arg296_1', c1 + 768, {c0: 1568, c1: 768}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf375.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (1568, 768)
op375.sizes = ([1568], [768])
buf373_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op375_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1 + 768
    index1 = z1 + 768
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf373', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg296_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf375', get_index_4, getitem_1)
        return store_reduction
op374_op375_op377.snodes[2] =
op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf373', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf374', c0, {c0: 1568}, None),
        MemoryDep('buf375', c0, {c0: 1568}, None)]
op377.met_dependencies = 
    [   MemoryDep('arg296_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg297_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg298_1', c1, {c0: 1568, c1: 768}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (1204224, 1)
op377.sizes = ([8, 196, 768], [])
buf373_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op377_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2 + 768
    index1 = z2 + 768
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 150528*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf373', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg296_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf374', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf375', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg297_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg298_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf377', get_index_8, add_4, None)
        return store


op378: ExternKernelSchedulerNode(ExternKernelOut)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf377', mode=None)]
op378.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op378.outputs = [
    buf378: ExternKernelOut
    buf378.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf378.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.node.kernel = extern_kernels.mm


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 1204224}, None)]
op379.unmet_dependencies = 
    [   MemoryDep('buf373', 1536*c0 + c1, {c0: 1568, c1: 768}, None),
        MemoryDep('buf378', 150528*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 768}, None)]
op379.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg300_1', c1, {c0: 8, c1: 196}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (1204224, 1)
op379.sizes = ([8, 196, 768], [])
buf373_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op379_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 768}
    index0 = 301056*z0 + 1536*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 196*z2
    index3 = z1
    index4 = 150528*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf373', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg296_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf378', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg300_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        mul_3 = ops.mul(mul_2, add_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf379', get_index_6, mul_3, None)
        return store


op380: ExternKernelSchedulerNode(ExternKernelOut)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf379', mode=None)]
op380.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op380.outputs = [
    buf380: ExternKernelOut
    buf380.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf380.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False)]
]
op380.node.kernel = extern_kernels.mm


op381_op382_op383: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op381_op382_op383.writes = 
    [   MemoryDep('buf381', c0, {c0: 401408}, None),
        MemoryDep('buf382', c0, {c0: 1568}, None),
        MemoryDep('buf383', c0, {c0: 1568}, None)]
op381_op382_op383.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf368', c0, {c0: 401408}, None),
        MemoryDep('buf380', c0, {c0: 401408}, None)]
op381_op382_op383.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg302_1', c1, {c0: 1568, c1: 256}, None)]
op381_op382_op383.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
    ]
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf382.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf383.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op381_op382_op383.snodes[0] =
op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 401408}, None)]
op381.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 401408}, None),
        MemoryDep('buf368', c0, {c0: 401408}, None),
        MemoryDep('buf380', c0, {c0: 401408}, None)]
op381.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg302_1', c1, {c0: 1568, c1: 256}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
    ]
]
op381.group.device = cuda:0
op381.group.iteration = (401408, 1)
op381.sizes = ([1568, 256], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op381_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf368', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg292_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf380', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg302_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf381', get_index_5, add_3, None)
        return store
op381_op382_op383.snodes[1] =
op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 1568}, None)]
op382.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 401408}, None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf382.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (1568, 256)
op382.sizes = ([1568], [256])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op382_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf382', get_index_1, getitem)
        return store_reduction
op381_op382_op383.snodes[2] =
op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 1568}, None)]
op383.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 401408}, None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf383.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (1568, 256)
op383.sizes = ([1568], [256])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op383_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf383', get_index_1, getitem_1)
        return store_reduction


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 4096}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf381', 25088*c0 + c1 + 256*c2, {c0: 16, c1: 256, c2: 98}, None),
        MemoryDep('buf382', 98*c0 + c2, {c0: 16, c1: 256, c2: 98}, None),
        MemoryDep('buf383', 98*c0 + c2, {c0: 16, c1: 256, c2: 98}, None)]
op385.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg304_1', c1, {c0: 16, c1: 256}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 2], stride=[512, 1, 256])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (4096, 98)
op385.sizes = ([16, 256], [98])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 2], stride=[512, 1, 256])
class op385_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 98}
    index0 = 25088*z0 + z1 + 256*z2
    index1 = 98*z0 + z2
    index2 = z1
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf382', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf383', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg303_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg304_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf385', get_index_5, reduction)
        return store_reduction


op386_op387: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op386_op387.writes = 
    [   MemoryDep('buf386', c0, {c0: 2048}, None),
        MemoryDep('buf387', c0, {c0: 2048}, None)]
op386_op387.unmet_dependencies = [MemoryDep('buf385', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op386_op387.met_dependencies = []
op386_op387.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op386_op387.snodes[0] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 2048}, None)]
op386.unmet_dependencies = [MemoryDep('buf385', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (2048, 2)
op386.sizes = ([8, 256], [2])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 2], stride=[512, 1, 256])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
class op386_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 2}
    index0 = 512*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf386', get_index_1, reduction)
        return store_reduction
op386_op387.snodes[1] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 2048}, None)]
op387.unmet_dependencies = [MemoryDep('buf386', c0, {c0: 2048}, None)]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (2048, 1)
op387.sizes = ([2048], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
class op387_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf387', get_index_1, truediv, None)
        return store


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg305_1', mode=None), StarDep(name='arg306_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf388.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op388.node.kernel = extern_kernels.addmm



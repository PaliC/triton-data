op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 196608*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 65536}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1572864}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1572864, 1)
op0.sizes = ([8, 3, 65536], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 65536}
    index0 = 196608*z0 + 65536*z1 + z2
    index1 = 196608*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 432}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (432, 1)
op1.sizes = ([16, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3_op4: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op3_op4.writes = 
    [   MemoryDep('buf3', c0, {c0: 2097152}, None),
        MemoryDep('buf4', c0, {c0: 2097152}, None)]
op3_op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 2097152}, None)]
op3_op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 16}, None)]
op3_op4.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3_op4.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 2097152}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 16}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (2097152, 1)
op3.sizes = ([131072, 16], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op3_loop_body:
    var_ranges = {z0: 131072, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store
op3_op4.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 2097152}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (2097152, 1)
op4.sizes = ([2097152], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op4_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6_op7: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op6_op7.writes = 
    [   MemoryDep('buf6', c0, {c0: 8388608}, None),
        MemoryDep('buf7', c0, {c0: 8388608}, None)]
op6_op7.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 8388608}, None)]
op6_op7.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 131072, c1: 64}, None)]
op6_op7.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6_op7.snodes[0] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 8388608}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 8388608}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 131072, c1: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (8388608, 1)
op6.sizes = ([131072, 64], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op6_loop_body:
    var_ranges = {z0: 131072, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, add_1, None)
        return store
op6_op7.snodes[1] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 8388608}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 8388608}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (8388608, 1)
op7.sizes = ([8388608], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op7_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf6', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf7', get_index_2, mul, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9_op10: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op9_op10.writes = 
    [   MemoryDep('buf10', c0, {c0: 8388608}, None),
        MemoryDep('buf9', c0, {c0: 8388608}, None)]
op9_op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 8388608}, None)]
op9_op10.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 131072, c1: 64}, None)]
op9_op10.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9_op10.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 8388608}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 8388608}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 131072, c1: 64}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (8388608, 1)
op9.sizes = ([131072, 64], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op9_loop_body:
    var_ranges = {z0: 131072, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf9', get_index_5, add_1, None)
        return store
op9_op10.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 8388608}, None)]
op10.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 8388608}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (8388608, 1)
op10.sizes = ([8388608], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op10_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf9', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf10', get_index_2, mul, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelAlloc)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelAlloc
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.node.kernel = extern_kernels.convolution


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 4194304}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 4194304}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg18_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg19_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg20_1', c1, {c0: 131072, c1: 32}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (4194304, 1)
op12.sizes = ([131072, 32], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
class op12_loop_body:
    var_ranges = {z0: 131072, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf12', get_index_5, add_1, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14_op15: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op14_op15.writes = 
    [   MemoryDep('buf14', c0, {c0: 16777216}, None),
        MemoryDep('buf15', c0, {c0: 16777216}, None)]
op14_op15.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 16777216}, None)]
op14_op15.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 131072, c1: 128}, None),
        MemoryDep('arg23_1', c1, {c0: 131072, c1: 128}, None),
        MemoryDep('arg24_1', c1, {c0: 131072, c1: 128}, None),
        MemoryDep('arg25_1', c1, {c0: 131072, c1: 128}, None)]
op14_op15.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14_op15.snodes[0] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 16777216}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 16777216}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 131072, c1: 128}, None),
        MemoryDep('arg23_1', c1, {c0: 131072, c1: 128}, None),
        MemoryDep('arg24_1', c1, {c0: 131072, c1: 128}, None),
        MemoryDep('arg25_1', c1, {c0: 131072, c1: 128}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (16777216, 1)
op14.sizes = ([131072, 128], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op14_loop_body:
    var_ranges = {z0: 131072, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf14', get_index_5, add_1, None)
        return store
op14_op15.snodes[1] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 16777216}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 16777216}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (16777216, 1)
op15.sizes = ([16777216], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op15_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf15', get_index_2, mul, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17_op18: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op17_op18.writes = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf18', c0, {c0: 4194304}, None)]
op17_op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4194304}, None)]
op17_op18.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg28_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg29_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg30_1', c1, {c0: 32768, c1: 128}, None)]
op17_op18.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17_op18.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4194304}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg28_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg29_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg30_1', c1, {c0: 32768, c1: 128}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (4194304, 1)
op17.sizes = ([32768, 128], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op17_loop_body:
    var_ranges = {z0: 32768, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf17', get_index_5, add_1, None)
        return store
op17_op18.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4194304}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (4194304, 1)
op18.sizes = ([4194304], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op18_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf18', get_index_2, mul, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 2097152}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 2097152}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg34_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg35_1', c1, {c0: 32768, c1: 64}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (2097152, 1)
op20.sizes = ([32768, 64], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op20_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, add_1, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22_op23: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op22_op23.writes = 
    [   MemoryDep('buf22', c0, {c0: 8388608}, None),
        MemoryDep('buf23', c0, {c0: 8388608}, None)]
op22_op23.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 8388608}, None)]
op22_op23.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 32768, c1: 256}, None)]
op22_op23.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22_op23.snodes[0] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 8388608}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 8388608}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 32768, c1: 256}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (8388608, 1)
op22.sizes = ([32768, 256], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op22_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, add_1, None)
        return store
op22_op23.snodes[1] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 8388608}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 8388608}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (8388608, 1)
op23.sizes = ([8388608], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op23_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, mul, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25_op26: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op25_op26.writes = 
    [   MemoryDep('buf25', c0, {c0: 8388608}, None),
        MemoryDep('buf26', c0, {c0: 8388608}, None)]
op25_op26.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 8388608}, None)]
op25_op26.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg43_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg45_1', c1, {c0: 32768, c1: 256}, None)]
op25_op26.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25_op26.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 8388608}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 8388608}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg43_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg45_1', c1, {c0: 32768, c1: 256}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (8388608, 1)
op25.sizes = ([32768, 256], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op25_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, add_1, None)
        return store
op25_op26.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 8388608}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 8388608}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (8388608, 1)
op26.sizes = ([8388608], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op26_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf25', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf26', get_index_2, mul, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 2097152}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 2097152}, None),
        MemoryDep('buf27', c0, {c0: 2097152}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg48_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg49_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg50_1', c1, {c0: 32768, c1: 64}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (2097152, 1)
op28.sizes = ([32768, 64], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op28_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf20', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf28', get_index_6, add_2, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30_op31: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op30_op31.writes = 
    [   MemoryDep('buf30', c0, {c0: 8388608}, None),
        MemoryDep('buf31', c0, {c0: 8388608}, None)]
op30_op31.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 8388608}, None)]
op30_op31.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg54_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg55_1', c1, {c0: 32768, c1: 256}, None)]
op30_op31.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30_op31.snodes[0] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 8388608}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 8388608}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg54_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg55_1', c1, {c0: 32768, c1: 256}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (8388608, 1)
op30.sizes = ([32768, 256], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op30_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf30', get_index_5, add_1, None)
        return store
op30_op31.snodes[1] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 8388608}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 8388608}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (8388608, 1)
op31.sizes = ([8388608], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op31_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf30', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf31', get_index_2, mul, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33_op34: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op33_op34.writes = 
    [   MemoryDep('buf33', c0, {c0: 8388608}, None),
        MemoryDep('buf34', c0, {c0: 8388608}, None)]
op33_op34.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 8388608}, None)]
op33_op34.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg59_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg60_1', c1, {c0: 32768, c1: 256}, None)]
op33_op34.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33_op34.snodes[0] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 8388608}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 8388608}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg59_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg60_1', c1, {c0: 32768, c1: 256}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (8388608, 1)
op33.sizes = ([32768, 256], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op33_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf33', get_index_5, add_1, None)
        return store
op33_op34.snodes[1] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 8388608}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 8388608}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (8388608, 1)
op34.sizes = ([8388608], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op34_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf34', get_index_2, mul, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 2097152}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 2097152}, None),
        MemoryDep('buf35', c0, {c0: 2097152}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg63_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg64_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg65_1', c1, {c0: 32768, c1: 64}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (2097152, 1)
op36.sizes = ([32768, 64], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op36_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf28', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf36', get_index_6, add_2, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38_op39: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op38_op39.writes = 
    [   MemoryDep('buf38', c0, {c0: 8388608}, None),
        MemoryDep('buf39', c0, {c0: 8388608}, None)]
op38_op39.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 8388608}, None)]
op38_op39.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg68_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg69_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg70_1', c1, {c0: 32768, c1: 256}, None)]
op38_op39.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38_op39.snodes[0] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 8388608}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 8388608}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg68_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg69_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg70_1', c1, {c0: 32768, c1: 256}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (8388608, 1)
op38.sizes = ([32768, 256], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op38_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, add_1, None)
        return store
op38_op39.snodes[1] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 8388608}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 8388608}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (8388608, 1)
op39.sizes = ([8388608], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op39_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf39', get_index_2, mul, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41_op42: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op41_op42.writes = 
    [   MemoryDep('buf41', c0, {c0: 2097152}, None),
        MemoryDep('buf42', c0, {c0: 2097152}, None)]
op41_op42.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 2097152}, None)]
op41_op42.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg73_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg75_1', c1, {c0: 8192, c1: 256}, None)]
op41_op42.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41_op42.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 2097152}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 2097152}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg73_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg75_1', c1, {c0: 8192, c1: 256}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (2097152, 1)
op41.sizes = ([8192, 256], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op41_loop_body:
    var_ranges = {z0: 8192, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf41', get_index_5, add_1, None)
        return store
op41_op42.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2097152}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 2097152}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (2097152, 1)
op42.sizes = ([2097152], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op42_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf41', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf42', get_index_2, mul, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelAlloc)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelAlloc
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.node.kernel = extern_kernels.convolution


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 786432}, None)]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 786432}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg78_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg79_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg80_1', c1, {c0: 8192, c1: 96}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf44.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (786432, 1)
op44.sizes = ([8192, 96], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
class op44_loop_body:
    var_ranges = {z0: 8192, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf44', get_index_5, add_1, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', 864*c0 + c1 + 96*c2, {c0: 96, c1: 96, c2: 9}, None)]
op45.unmet_dependencies = []
op45.met_dependencies = [MemoryDep('arg81_1', c0, {c0: 82944}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[96, 96, 3, 3], stride=[864, 1, 288, 96])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (82944, 1)
op45.sizes = ([96, 96, 9], [])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[96, 96, 3, 3], stride=[864, 9, 3, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[96, 96, 3, 3], stride=[864, 1, 288, 96])
class op45_loop_body:
    var_ranges = {z0: 96, z1: 96, z2: 9}
    index0 = 864*z0 + 9*z1 + z2
    index1 = 864*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg81_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47_op48: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op47_op48.writes = 
    [   MemoryDep('buf47', c0, {c0: 786432}, None),
        MemoryDep('buf48', c0, {c0: 786432}, None)]
op47_op48.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 786432}, None)]
op47_op48.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg83_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg84_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg85_1', c1, {c0: 8192, c1: 96}, None)]
op47_op48.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47_op48.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 786432}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 786432}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg83_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg84_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg85_1', c1, {c0: 8192, c1: 96}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (786432, 1)
op47.sizes = ([8192, 96], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
class op47_loop_body:
    var_ranges = {z0: 8192, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_1, None)
        return store
op47_op48.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 786432}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 786432}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (786432, 1)
op48.sizes = ([786432], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
class op48_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf47', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, mul, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.convolution


op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op53.writes = 
    [   MemoryDep('buf50', c0, {c0: 8192}, None),
        MemoryDep('buf51', c0, {c0: 8192}, None),
        MemoryDep('buf53', 144*c0 + 36864*c1 + c2, {c0: 256, c1: 32, c2: 144}, None)]
op50_op51_op53.unmet_dependencies = [   MemoryDep('buf49', c2 + 147456*((c1//4)) + 9216*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//32)) + ((64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c1, 1, 4)//2)) + 288*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 256, c1: 32, c2: 144}, None)]
op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg88_1', c1, {c0: 8192, c1: 144}, None)]
op50_op51_op53.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op50_op51_op53.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 8192}, None)]
op50.unmet_dependencies = [   MemoryDep('buf49', c2 + 147456*((c1//4)) + 9216*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//32)) + ((64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c1, 1, 4)//2)) + 288*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 256, c1: 32, c2: 144}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (8192, 144)
op50.sizes = ([256, 32], [144])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
class op50_loop_body:
    var_ranges = {z0: 256, z1: 32, z2: 144}
    index0 = z2 + 147456*((z1//4)) + 9216*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//32)) + ((64*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 32*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 32*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z1, 1, 4)//2)) + 288*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_1, getitem)
        return store_reduction
op50_op51_op53.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 8192}, None)]
op51.unmet_dependencies = [   MemoryDep('buf49', c2 + 147456*((c1//4)) + 9216*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//32)) + ((64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c1, 1, 4)//2)) + 288*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 256, c1: 32, c2: 144}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (8192, 144)
op51.sizes = ([256, 32], [144])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
class op51_loop_body:
    var_ranges = {z0: 256, z1: 32, z2: 144}
    index0 = z2 + 147456*((z1//4)) + 9216*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//32)) + ((64*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 32*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 32*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z1, 1, 4)//2)) + 288*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, getitem_1)
        return store_reduction
op50_op51_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', 144*c0 + 36864*c1 + c2, {c0: 256, c1: 32, c2: 144}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c1//4)) + 9216*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//32)) + ((64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c0 + ModularIndexing(c1, 1, 4))//64)) + 32*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c1, 1, 4)//2)) + 288*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 256, c1: 32, c2: 144}, None),
        MemoryDep('buf50', c0, {c0: 8192}, None),
        MemoryDep('buf51', c0, {c0: 8192}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg88_1', c1, {c0: 8192, c1: 144}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (1179648, 1)
op53.sizes = ([256, 32, 144], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[1, 32, 8192])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
class op53_loop_body:
    var_ranges = {z0: 256, z1: 32, z2: 144}
    index0 = z2 + 147456*((z1//4)) + 9216*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//32)) + ((64*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 32*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z0 + ModularIndexing(z1, 1, 4))//64)) + 32*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z1, 1, 4)//2)) + 288*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    index2 = z2
    index3 = 144*z0 + 36864*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf50', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf51', get_index_2)
        constant = ops.constant(144.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg87_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg88_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf53', get_index_5, add_1, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg89_1', mode=None), StarDep(name='arg90_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8192, 432], stride=[432, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.addmm


op55: ExternKernelSchedulerNode(FallbackKernel)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: FallbackKernel
    buf55.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op55.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op56: ExternKernelSchedulerNode(MultiOutput)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: MultiOutput
    buf56.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 256, 36], stride=[36864, 36, 144, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = None


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op60.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op60.node.kernel = extern_kernels.mm


op61_op62_op64: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op61_op62_op64.writes = 
    [   MemoryDep('buf61', c0, {c0: 8192}, None),
        MemoryDep('buf62', c0, {c0: 8192}, None),
        MemoryDep('buf64', c0, {c0: 1179648}, None)]
op61_op62_op64.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c0//4)) + 9216*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//32)) + ((64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c0, 1, 4)//2)) + 288*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 256, c2: 144}, None),
        MemoryDep('buf60', c0, {c0: 1179648}, None)]
op61_op62_op64.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg93_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg94_1', c1, {c0: 8192, c1: 144}, None)]
op61_op62_op64.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op61_op62_op64.snodes[0] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 8192}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c0//4)) + 9216*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//32)) + ((64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c0, 1, 4)//2)) + 288*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 256, c2: 144}, None),
        MemoryDep('buf60', c0, {c0: 1179648}, None)]
op61.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 8192, c1: 144}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (8192, 144)
op61.sizes = ([32, 256], [144])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op61_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 144}
    index0 = z2 + 147456*((z0//4)) + 9216*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//32)) + ((64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z0, 1, 4)//2)) + 288*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 36864*z0 + 144*z1 + z2
    index2 = z2
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf61', get_index_3, getitem)
        return store_reduction
op61_op62_op64.snodes[1] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 8192}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c0//4)) + 9216*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//32)) + ((64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c0, 1, 4)//2)) + 288*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 256, c2: 144}, None),
        MemoryDep('buf60', c0, {c0: 1179648}, None)]
op62.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 8192, c1: 144}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (8192, 144)
op62.sizes = ([32, 256], [144])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op62_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 144}
    index0 = z2 + 147456*((z0//4)) + 9216*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//32)) + ((64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z0, 1, 4)//2)) + 288*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 36864*z0 + 144*z1 + z2
    index2 = z2
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem_1)
        return store_reduction
op61_op62_op64.snodes[2] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 1179648}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c0//4)) + 9216*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//32)) + ((64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c0, 1, 4)//2)) + 288*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 256, c2: 144}, None),
        MemoryDep('buf60', c0, {c0: 1179648}, None),
        MemoryDep('buf61', c0, {c0: 8192}, None),
        MemoryDep('buf62', c0, {c0: 8192}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg93_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg94_1', c1, {c0: 8192, c1: 144}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (1179648, 1)
op64.sizes = ([32, 256, 144], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf62_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
class op64_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 144}
    index0 = z2 + 147456*((z0//4)) + 9216*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//32)) + ((64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z0, 1, 4)//2)) + 288*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 36864*z0 + 144*z1 + z2
    index2 = z2
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf61', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf62', get_index_4)
        constant = ops.constant(144.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf64', get_index_7, add_3, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8192, 288], stride=[288, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.mm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 2359296}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 2359296}, None)]
op66.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 8192, c1: 288}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 288], stride=[73728, 288, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (2359296, 1)
op66.sizes = ([8192, 288], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8192, 288], stride=[288, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[288], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 288], stride=[73728, 288, 1])
class op66_loop_body:
    var_ranges = {z0: 8192, z1: 288}
    index0 = 288*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf65', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf66', get_index_4, mul, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68_op69_op70_op72: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op68_op69_op70_op72.writes = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf69', c0, {c0: 8192}, None),
        MemoryDep('buf70', c0, {c0: 8192}, None),
        MemoryDep('buf72', c0, {c0: 1179648}, None)]
op68_op69_op70_op72.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c0//4)) + 9216*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//32)) + ((64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c0, 1, 4)//2)) + 288*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 256, c2: 144}, None),
        MemoryDep('buf60', c0, {c0: 1179648}, None),
        MemoryDep('buf67', c0, {c0: 1179648}, None)]
op68_op69_op70_op72.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg92_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg98_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg99_1', c1, {c0: 8192, c1: 144}, None)]
op68_op69_op70_op72.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op68_op69_op70_op72.snodes[0] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1179648}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf49', c2 + 147456*((c0//4)) + 9216*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//32)) + ((64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//1024) + 147456*(((1024*c2 + 64*(((4*c1 + ModularIndexing(c0, 1, 4))//64)) + 32*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(c0, 1, 4)//2)) + 288*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 256, c2: 144}, None),
        MemoryDep('buf60', c0, {c0: 1179648}, None),
        MemoryDep('buf67', c0, {c0: 1179648}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg98_1', c1, {c0: 8192, c1: 144}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (1179648, 1)
op68.sizes = ([32, 256, 144], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
class op68_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 144}
    index0 = z2 + 147456*((z0//4)) + 9216*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 4608*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//32)) + ((64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//1024) + 147456*(((1024*z2 + 64*(((4*z1 + ModularIndexing(z0, 1, 4))//64)) + 32*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//147456)) + 4608*((ModularIndexing(z0, 1, 4)//2)) + 288*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 16) + 144*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 36864*z0 + 144*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf67', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg98_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf68', get_index_5, add_3, None)
        return store
op68_op69_op70_op72.snodes[1] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 8192}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 1179648}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (8192, 144)
op69.sizes = ([8192], [144])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op69_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem)
        return store_reduction
op68_op69_op70_op72.snodes[2] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 8192}, None)]
op70.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 1179648}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (8192, 144)
op70.sizes = ([8192], [144])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op70_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, getitem_1)
        return store_reduction
op68_op69_op70_op72.snodes[3] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 1179648}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf69', c0, {c0: 8192}, None),
        MemoryDep('buf70', c0, {c0: 8192}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg99_1', c1, {c0: 8192, c1: 144}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (1179648, 1)
op72.sizes = ([8192, 144], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf70_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
class op72_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf69', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf70', get_index_2)
        constant = ops.constant(144.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, add_1, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg101_1', mode=None), StarDep(name='arg102_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8192, 432], stride=[432, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = extern_kernels.addmm


op74: ExternKernelSchedulerNode(FallbackKernel)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: FallbackKernel
    buf74.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
    ]
]
op74.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op75: ExternKernelSchedulerNode(MultiOutput)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: MultiOutput
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 256, 36], stride=[36864, 36, 144, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = None


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op79.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.mm


op80_op81_op83: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op80_op81_op83.writes = 
    [   MemoryDep('buf80', c0, {c0: 8192}, None),
        MemoryDep('buf81', c0, {c0: 8192}, None),
        MemoryDep('buf83', c0, {c0: 1179648}, None)]
op80_op81_op83.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf79', c0, {c0: 1179648}, None)]
op80_op81_op83.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg105_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg106_1', c1, {c0: 8192, c1: 144}, None)]
op80_op81_op83.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op80_op81_op83.snodes[0] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 8192}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf79', c0, {c0: 1179648}, None)]
op80.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 8192, c1: 144}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (8192, 144)
op80.sizes = ([8192], [144])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op80_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf80', get_index_3, getitem)
        return store_reduction
op80_op81_op83.snodes[1] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 8192}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf79', c0, {c0: 1179648}, None)]
op81.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 8192, c1: 144}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (8192, 144)
op81.sizes = ([8192], [144])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op81_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_3, getitem_1)
        return store_reduction
op80_op81_op83.snodes[2] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 1179648}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf79', c0, {c0: 1179648}, None),
        MemoryDep('buf80', c0, {c0: 8192}, None),
        MemoryDep('buf81', c0, {c0: 8192}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg105_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg106_1', c1, {c0: 8192, c1: 144}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (1179648, 1)
op83.sizes = ([8192, 144], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf81_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
class op83_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf80', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf81', get_index_4)
        constant = ops.constant(144.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg105_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg106_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf83', get_index_7, add_3, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8192, 288], stride=[288, 1])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2359296}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2359296}, None)]
op85.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 8192, c1: 288}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 288], stride=[73728, 288, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (2359296, 1)
op85.sizes = ([8192, 288], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8192, 288], stride=[288, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[288], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 288], stride=[73728, 288, 1])
class op85_loop_body:
    var_ranges = {z0: 8192, z1: 288}
    index0 = 288*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf85', get_index_4, mul, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87_op88_op89: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op87_op88_op89.writes = 
    [   MemoryDep('buf87', c0, {c0: 1179648}, None),
        MemoryDep('buf88', c0, {c0: 8192}, None),
        MemoryDep('buf89', c0, {c0: 8192}, None)]
op87_op88_op89.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf79', c0, {c0: 1179648}, None),
        MemoryDep('buf86', c0, {c0: 1179648}, None)]
op87_op88_op89.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg110_1', c1, {c0: 8192, c1: 144}, None)]
op87_op88_op89.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
    ]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op87_op88_op89.snodes[0] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1179648}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1179648}, None),
        MemoryDep('buf79', c0, {c0: 1179648}, None),
        MemoryDep('buf86', c0, {c0: 1179648}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8192, c1: 144}, None),
        MemoryDep('arg110_1', c1, {c0: 8192, c1: 144}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (1179648, 1)
op87.sizes = ([8192, 144], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8192, 144], stride=[144, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
class op87_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf86', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, add_3, None)
        return store
op87_op88_op89.snodes[1] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 8192}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 1179648}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (8192, 144)
op88.sizes = ([8192], [144])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op88_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_1, getitem)
        return store_reduction
op87_op88_op89.snodes[2] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 8192}, None)]
op89.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 1179648}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (8192, 144)
op89.sizes = ([8192], [144])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op89_loop_body:
    var_ranges = {z0: 8192, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_1, getitem_1)
        return store_reduction


op91: SchedulerNode(ComputedBuffer)
op91.writes = [   MemoryDep('buf91', 32*c0 + c1 + 64*c2 + 2*c3, {c0: 2, c1: 2, c2: 18432, c3: 16}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf87', 36864*c0 + 147456*(((c0 + 4*c1)//147456)) + 144*ModularIndexing(c0 + 4*c1, 4, 256) + ModularIndexing(c0 + 4*c1, 1024, 144), {c0: 4, c1: 294912}, None),
        MemoryDep('buf88', 256*c0 + 1024*(((c0 + 4*c1)//147456)) + ModularIndexing(c0 + 4*c1, 4, 256), {c0: 4, c1: 294912}, None),
        MemoryDep('buf89', 256*c0 + 1024*(((c0 + 4*c1)//147456)) + ModularIndexing(c0 + 4*c1, 4, 256), {c0: 4, c1: 294912}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg111_1', ModularIndexing(c0 + 4*c1, 1024, 144), {c0: 4, c1: 294912}, None),
        MemoryDep('arg112_1', ModularIndexing(c0 + 4*c1, 1024, 144), {c0: 4, c1: 294912}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[18432, 2, 16, 2], stride=[64, 32, 2, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (1179648, 1)
op91.sizes = ([2, 2, 18432, 16], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 144], stride=[36864, 144, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf89_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[18432, 2, 16, 2], stride=[64, 32, 2, 1])
class op91_loop_body:
    var_ranges = {z0: 2, z1: 2, z2: 18432, z3: 16}
    index0 = 73728*z0 + 36864*z1 + 147456*(((2*z0 + z1 + 64*z2 + 4*z3)//147456)) + 144*ModularIndexing(2*z0 + z1 + 64*z2 + 4*z3, 4, 256) + ModularIndexing(2*z0 + z1 + 64*z2 + 4*z3, 1024, 144)
    index1 = 512*z0 + 256*z1 + 1024*(((2*z0 + z1 + 64*z2 + 4*z3)//147456)) + ModularIndexing(2*z0 + z1 + 64*z2 + 4*z3, 4, 256)
    index2 = ModularIndexing(2*z0 + z1 + 64*z2 + 4*z3, 1024, 144)
    index3 = 32*z0 + z1 + 64*z2 + 2*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf89', get_index_2)
        constant = ops.constant(144.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf91', get_index_5, add_1, None)
        return store


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', 147456*c0 + c1 + 144*c2, {c0: 8, c1: 144, c2: 1024}, None)]
op92.unmet_dependencies = [   MemoryDep('buf91', 1024*c0 + c2 + 64*(((32*c1 + c2)//64)) + 32*ModularIndexing(c1, 1, 2), {c0: 1152, c1: 32, c2: 32}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (1179648, 1)
op92.sizes = ([8, 144, 32, 32], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[18432, 2, 16, 2], stride=[64, 32, 2, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 32, 32], stride=[147456, 1, 4608, 144])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 144, z2: 32, z3: 32}
    index0 = 147456*z0 + 1024*z1 + z3 + 64*(((32*z2 + z3)//64)) + 32*ModularIndexing(z2, 1, 2)
    index1 = 147456*z0 + z1 + 4608*z2 + 144*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf92', get_index_1, load, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelAlloc)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelAlloc
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.convolution


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 786432}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 786432}, None)]
op94.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg115_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg116_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg117_1', c1, {c0: 8192, c1: 96}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (786432, 1)
op94.sizes = ([8192, 96], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
class op94_loop_body:
    var_ranges = {z0: 8192, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg117_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf94', get_index_5, add_1, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1572864}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf44', 96*c0 + I, {c0: 8192, c1: 192}, None),
        MemoryDep('buf94', 96*c0 + I, {c0: 8192, c1: 192}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1572864, 1)
op95.sizes = ([8192, 192], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
class op95_loop_body:
    var_ranges = {z0: 8192, z1: 192}
    index0 = z1
    index1 = 96*z0 + I
    index2 = 96*z0 + I
    index3 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(96, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(96, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(192, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf95', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf44', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf94', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', 1728*c0 + c1 + 192*c2, {c0: 96, c1: 192, c2: 9}, None)]
op96.unmet_dependencies = []
op96.met_dependencies = [MemoryDep('arg118_1', c0, {c0: 165888}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[96, 192, 3, 3], stride=[1728, 1, 576, 192])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (165888, 1)
op96.sizes = ([96, 192, 9], [])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[96, 192, 3, 3], stride=[1728, 9, 3, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[96, 192, 3, 3], stride=[1728, 1, 576, 192])
class op96_loop_body:
    var_ranges = {z0: 96, z1: 192, z2: 9}
    index0 = 1728*z0 + 9*z1 + z2
    index1 = 1728*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg118_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf96', get_index_1, load, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf95', mode=None), StarDep(name='buf96', mode=None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98_op99: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op98_op99.writes = 
    [   MemoryDep('buf98', c0, {c0: 786432}, None),
        MemoryDep('buf99', c0, {c0: 786432}, None)]
op98_op99.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 786432}, None)]
op98_op99.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg120_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg122_1', c1, {c0: 8192, c1: 96}, None)]
op98_op99.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98_op99.snodes[0] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 786432}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 786432}, None)]
op98.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg120_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 96}, None),
        MemoryDep('arg122_1', c1, {c0: 8192, c1: 96}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (786432, 1)
op98.sizes = ([8192, 96], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
class op98_loop_body:
    var_ranges = {z0: 8192, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf98', get_index_5, add_1, None)
        return store
op98_op99.snodes[1] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 786432}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 786432}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (786432, 1)
op99.sizes = ([786432], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 32, 32], stride=[98304, 1, 3072, 96])
class op99_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf99', get_index_2, mul, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101_op102: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op101_op102.writes = 
    [   MemoryDep('buf101', c0, {c0: 3145728}, None),
        MemoryDep('buf102', c0, {c0: 3145728}, None)]
op101_op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 3145728}, None)]
op101_op102.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 8192, c1: 384}, None),
        MemoryDep('arg125_1', c1, {c0: 8192, c1: 384}, None),
        MemoryDep('arg126_1', c1, {c0: 8192, c1: 384}, None),
        MemoryDep('arg127_1', c1, {c0: 8192, c1: 384}, None)]
op101_op102.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101_op102.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 3145728}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 3145728}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 8192, c1: 384}, None),
        MemoryDep('arg125_1', c1, {c0: 8192, c1: 384}, None),
        MemoryDep('arg126_1', c1, {c0: 8192, c1: 384}, None),
        MemoryDep('arg127_1', c1, {c0: 8192, c1: 384}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (3145728, 1)
op101.sizes = ([8192, 384], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
class op101_loop_body:
    var_ranges = {z0: 8192, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg124_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store
op101_op102.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 3145728}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 3145728}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (3145728, 1)
op102.sizes = ([3145728], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
class op102_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf101', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf102', get_index_2, mul, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104_op105: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op104_op105.writes = 
    [   MemoryDep('buf104', c0, {c0: 786432}, None),
        MemoryDep('buf105', c0, {c0: 786432}, None)]
op104_op105.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 786432}, None)]
op104_op105.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 2048, c1: 384}, None),
        MemoryDep('arg130_1', c1, {c0: 2048, c1: 384}, None),
        MemoryDep('arg131_1', c1, {c0: 2048, c1: 384}, None),
        MemoryDep('arg132_1', c1, {c0: 2048, c1: 384}, None)]
op104_op105.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104_op105.snodes[0] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 786432}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 786432}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 2048, c1: 384}, None),
        MemoryDep('arg130_1', c1, {c0: 2048, c1: 384}, None),
        MemoryDep('arg131_1', c1, {c0: 2048, c1: 384}, None),
        MemoryDep('arg132_1', c1, {c0: 2048, c1: 384}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (786432, 1)
op104.sizes = ([2048, 384], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
class op104_loop_body:
    var_ranges = {z0: 2048, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf104', get_index_5, add_1, None)
        return store
op104_op105.snodes[1] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 786432}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 786432}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (786432, 1)
op105.sizes = ([786432], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
class op105_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf105', get_index_2, mul, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 262144}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 262144}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg135_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg136_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg137_1', c1, {c0: 2048, c1: 128}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf107.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (262144, 1)
op107.sizes = ([2048, 128], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
class op107_loop_body:
    var_ranges = {z0: 2048, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf107', get_index_5, add_1, None)
        return store


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op108.unmet_dependencies = []
op108.met_dependencies = [MemoryDep('arg138_1', c0, {c0: 147456}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (147456, 1)
op108.sizes = ([128, 128, 9], [])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op108_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg138_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf108', get_index_1, load, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelAlloc)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf107', mode=None), StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ExternKernelAlloc
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.convolution


op110_op111: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op110_op111.writes = 
    [   MemoryDep('buf110', c0, {c0: 262144}, None),
        MemoryDep('buf111', c0, {c0: 262144}, None)]
op110_op111.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 262144}, None)]
op110_op111.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg140_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg141_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg142_1', c1, {c0: 2048, c1: 128}, None)]
op110_op111.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110_op111.snodes[0] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 262144}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 262144}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg140_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg141_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg142_1', c1, {c0: 2048, c1: 128}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (262144, 1)
op110.sizes = ([2048, 128], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
class op110_loop_body:
    var_ranges = {z0: 2048, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg141_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg142_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf110', get_index_5, add_1, None)
        return store
op110_op111.snodes[1] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 262144}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 262144}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (262144, 1)
op111.sizes = ([262144], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
class op111_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf111', get_index_2, mul, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.convolution


op113_op114_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op113_op114_op116.writes = 
    [   MemoryDep('buf113', c0, {c0: 2048}, None),
        MemoryDep('buf114', c0, {c0: 2048}, None),
        MemoryDep('buf116', 192*c0 + 12288*c1 + c2, {c0: 64, c1: 32, c2: 192}, None)]
op113_op114_op116.unmet_dependencies = [   MemoryDep('buf112', c2 + 49152*((c1//4)) + 6144*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//16)) + ((32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c1, 1, 4)//2)) + 384*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 64, c1: 32, c2: 192}, None)]
op113_op114_op116.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 192}, None)]
op113_op114_op116.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op113_op114_op116.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 2048}, None)]
op113.unmet_dependencies = [   MemoryDep('buf112', c2 + 49152*((c1//4)) + 6144*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//16)) + ((32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c1, 1, 4)//2)) + 384*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 64, c1: 32, c2: 192}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (2048, 192)
op113.sizes = ([64, 32], [192])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf113_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
class op113_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 192}
    index0 = z2 + 49152*((z1//4)) + 6144*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//16)) + ((32*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 16*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 16*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z1, 1, 4)//2)) + 384*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf113', get_index_1, getitem)
        return store_reduction
op113_op114_op116.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 2048}, None)]
op114.unmet_dependencies = [   MemoryDep('buf112', c2 + 49152*((c1//4)) + 6144*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//16)) + ((32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c1, 1, 4)//2)) + 384*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 64, c1: 32, c2: 192}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (2048, 192)
op114.sizes = ([64, 32], [192])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf114_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
class op114_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 192}
    index0 = z2 + 49152*((z1//4)) + 6144*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//16)) + ((32*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 16*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 16*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z1, 1, 4)//2)) + 384*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf114', get_index_1, getitem_1)
        return store_reduction
op113_op114_op116.snodes[2] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', 192*c0 + 12288*c1 + c2, {c0: 64, c1: 32, c2: 192}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c1//4)) + 6144*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//16)) + ((32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c0 + ModularIndexing(c1, 1, 4))//32)) + 16*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c1, 1, 4)//2)) + 384*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 64, c1: 32, c2: 192}, None),
        MemoryDep('buf113', c0, {c0: 2048}, None),
        MemoryDep('buf114', c0, {c0: 2048}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 192}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (393216, 1)
op116.sizes = ([64, 32, 192], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf113_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
buf114_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[1, 32, 2048])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op116_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 192}
    index0 = z2 + 49152*((z1//4)) + 6144*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//16)) + ((32*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 16*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z0 + ModularIndexing(z1, 1, 4))//32)) + 16*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z1, 1, 4)//2)) + 384*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    index2 = z2
    index3 = 192*z0 + 12288*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf114', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf116', get_index_5, add_1, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg146_1', mode=None), StarDep(name='arg147_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[2048, 576], stride=[576, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.node.kernel = extern_kernels.addmm


op118: ExternKernelSchedulerNode(FallbackKernel)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: FallbackKernel
    buf118.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False),
    ]
]
op118.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op119: ExternKernelSchedulerNode(MultiOutput)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: MultiOutput
    buf119.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 64, 48], stride=[12288, 48, 192, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = None


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op123.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op123.node.kernel = extern_kernels.mm


op124_op125_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op124_op125_op127.writes = 
    [   MemoryDep('buf124', c0, {c0: 2048}, None),
        MemoryDep('buf125', c0, {c0: 2048}, None),
        MemoryDep('buf127', c0, {c0: 393216}, None)]
op124_op125_op127.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c0//4)) + 6144*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//16)) + ((32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c0, 1, 4)//2)) + 384*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 64, c2: 192}, None),
        MemoryDep('buf123', c0, {c0: 393216}, None)]
op124_op125_op127.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg150_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg151_1', c1, {c0: 2048, c1: 192}, None)]
op124_op125_op127.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op124_op125_op127.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2048}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c0//4)) + 6144*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//16)) + ((32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c0, 1, 4)//2)) + 384*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 64, c2: 192}, None),
        MemoryDep('buf123', c0, {c0: 393216}, None)]
op124.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 2048, c1: 192}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2048, 192)
op124.sizes = ([32, 64], [192])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op124_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 192}
    index0 = z2 + 49152*((z0//4)) + 6144*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//16)) + ((32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z0, 1, 4)//2)) + 384*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 12288*z0 + 192*z1 + z2
    index2 = z2
    index3 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf124', get_index_3, getitem)
        return store_reduction
op124_op125_op127.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2048}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c0//4)) + 6144*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//16)) + ((32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c0, 1, 4)//2)) + 384*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 64, c2: 192}, None),
        MemoryDep('buf123', c0, {c0: 393216}, None)]
op125.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 2048, c1: 192}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (2048, 192)
op125.sizes = ([32, 64], [192])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op125_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 192}
    index0 = z2 + 49152*((z0//4)) + 6144*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//16)) + ((32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z0, 1, 4)//2)) + 384*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 12288*z0 + 192*z1 + z2
    index2 = z2
    index3 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem_1)
        return store_reduction
op124_op125_op127.snodes[2] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 393216}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c0//4)) + 6144*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//16)) + ((32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c0, 1, 4)//2)) + 384*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 64, c2: 192}, None),
        MemoryDep('buf123', c0, {c0: 393216}, None),
        MemoryDep('buf124', c0, {c0: 2048}, None),
        MemoryDep('buf125', c0, {c0: 2048}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg150_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg151_1', c1, {c0: 2048, c1: 192}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (393216, 1)
op127.sizes = ([32, 64, 192], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op127_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 192}
    index0 = z2 + 49152*((z0//4)) + 6144*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//16)) + ((32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z0, 1, 4)//2)) + 384*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 12288*z0 + 192*z1 + z2
    index2 = z2
    index3 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf124', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf125', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg150_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg151_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf127', get_index_7, add_3, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 786432}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 786432}, None)]
op129.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 2048, c1: 384}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (786432, 1)
op129.sizes = ([2048, 384], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
class op129_loop_body:
    var_ranges = {z0: 2048, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf128', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg153_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf129', get_index_4, mul, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131_op132_op133_op135: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op131_op132_op133_op135.writes = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf132', c0, {c0: 2048}, None),
        MemoryDep('buf133', c0, {c0: 2048}, None),
        MemoryDep('buf135', c0, {c0: 393216}, None)]
op131_op132_op133_op135.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c0//4)) + 6144*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//16)) + ((32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c0, 1, 4)//2)) + 384*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 64, c2: 192}, None),
        MemoryDep('buf123', c0, {c0: 393216}, None),
        MemoryDep('buf130', c0, {c0: 393216}, None)]
op131_op132_op133_op135.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg155_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg156_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg157_1', c1, {c0: 2048, c1: 192}, None)]
op131_op132_op133_op135.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op131_op132_op133_op135.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 393216}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf112', c2 + 49152*((c0//4)) + 6144*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//16)) + ((32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//256) + 49152*(((256*c2 + 32*(((4*c1 + ModularIndexing(c0, 1, 4))//32)) + 16*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(c0, 1, 4)//2)) + 384*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 64, c2: 192}, None),
        MemoryDep('buf123', c0, {c0: 393216}, None),
        MemoryDep('buf130', c0, {c0: 393216}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg155_1', c1, {c0: 2048, c1: 192}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (393216, 1)
op131.sizes = ([32, 64, 192], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op131_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 192}
    index0 = z2 + 49152*((z0//4)) + 6144*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 3072*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//16)) + ((32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//256) + 49152*(((256*z2 + 32*(((4*z1 + ModularIndexing(z0, 1, 4))//32)) + 16*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//49152)) + 3072*((ModularIndexing(z0, 1, 4)//2)) + 384*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 8) + 192*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 12288*z0 + 192*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf130', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg155_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf131', get_index_5, add_3, None)
        return store
op131_op132_op133_op135.snodes[1] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 2048}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 393216}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (2048, 192)
op132.sizes = ([2048], [192])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op132_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, getitem)
        return store_reduction
op131_op132_op133_op135.snodes[2] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 2048}, None)]
op133.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 393216}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (2048, 192)
op133.sizes = ([2048], [192])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op133_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, getitem_1)
        return store_reduction
op131_op132_op133_op135.snodes[3] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 393216}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf132', c0, {c0: 2048}, None),
        MemoryDep('buf133', c0, {c0: 2048}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg157_1', c1, {c0: 2048, c1: 192}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (393216, 1)
op135.sizes = ([2048, 192], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf133_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op135_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg156_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg157_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, add_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg158_1', mode=None), StarDep(name='arg159_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[2048, 576], stride=[576, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.addmm


op137: ExternKernelSchedulerNode(FallbackKernel)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: FallbackKernel
    buf137.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
    ]
]
op137.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op138: ExternKernelSchedulerNode(MultiOutput)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: MultiOutput
    buf138.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 64, 48], stride=[12288, 48, 192, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op138.node.kernel = None


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op142.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.mm


op143_op144_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op143_op144_op146.writes = 
    [   MemoryDep('buf143', c0, {c0: 2048}, None),
        MemoryDep('buf144', c0, {c0: 2048}, None),
        MemoryDep('buf146', c0, {c0: 393216}, None)]
op143_op144_op146.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf142', c0, {c0: 393216}, None)]
op143_op144_op146.met_dependencies = 
    [   MemoryDep('arg161_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg162_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg163_1', c1, {c0: 2048, c1: 192}, None)]
op143_op144_op146.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op143_op144_op146.snodes[0] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 2048}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf142', c0, {c0: 393216}, None)]
op143.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 2048, c1: 192}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (2048, 192)
op143.sizes = ([2048], [192])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op143_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg161_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem)
        return store_reduction
op143_op144_op146.snodes[1] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 2048}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf142', c0, {c0: 393216}, None)]
op144.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 2048, c1: 192}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (2048, 192)
op144.sizes = ([2048], [192])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op144_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg161_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem_1)
        return store_reduction
op143_op144_op146.snodes[2] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 393216}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf142', c0, {c0: 393216}, None),
        MemoryDep('buf143', c0, {c0: 2048}, None),
        MemoryDep('buf144', c0, {c0: 2048}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg161_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg162_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg163_1', c1, {c0: 2048, c1: 192}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (393216, 1)
op146.sizes = ([2048, 192], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op146_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg161_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf143', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf144', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg162_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg163_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf146', get_index_7, add_3, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 786432}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 786432}, None)]
op148.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 2048, c1: 384}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (786432, 1)
op148.sizes = ([2048, 384], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
class op148_loop_body:
    var_ranges = {z0: 2048, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf148', get_index_4, mul, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.mm


op150_op151_op152_op154: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op152_op154.writes = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf151', c0, {c0: 2048}, None),
        MemoryDep('buf152', c0, {c0: 2048}, None),
        MemoryDep('buf154', c0, {c0: 393216}, None)]
op150_op151_op152_op154.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf142', c0, {c0: 393216}, None),
        MemoryDep('buf149', c0, {c0: 393216}, None)]
op150_op151_op152_op154.met_dependencies = 
    [   MemoryDep('arg161_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg167_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg168_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg169_1', c1, {c0: 2048, c1: 192}, None)]
op150_op151_op152_op154.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op150_op151_op152_op154.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 393216}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 393216}, None),
        MemoryDep('buf142', c0, {c0: 393216}, None),
        MemoryDep('buf149', c0, {c0: 393216}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg161_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg167_1', c1, {c0: 2048, c1: 192}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (393216, 1)
op150.sizes = ([2048, 192], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op150_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg161_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf149', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg167_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf150', get_index_5, add_3, None)
        return store
op150_op151_op152_op154.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 2048}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 393216}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (2048, 192)
op151.sizes = ([2048], [192])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op151_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_1, getitem)
        return store_reduction
op150_op151_op152_op154.snodes[2] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2048}, None)]
op152.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 393216}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (2048, 192)
op152.sizes = ([2048], [192])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op152_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_1, getitem_1)
        return store_reduction
op150_op151_op152_op154.snodes[3] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 393216}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf151', c0, {c0: 2048}, None),
        MemoryDep('buf152', c0, {c0: 2048}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg169_1', c1, {c0: 2048, c1: 192}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (393216, 1)
op154.sizes = ([2048, 192], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf152_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op154_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf151', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf152', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg168_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg169_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf154', get_index_5, add_1, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[2048, 576], stride=[576, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.addmm


op156: ExternKernelSchedulerNode(FallbackKernel)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: FallbackKernel
    buf156.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
    ]
]
op156.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op157: ExternKernelSchedulerNode(MultiOutput)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: MultiOutput
    buf157.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 64, 48], stride=[12288, 48, 192, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = None


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op161.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.mm


op162_op163_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op162_op163_op165.writes = 
    [   MemoryDep('buf162', c0, {c0: 2048}, None),
        MemoryDep('buf163', c0, {c0: 2048}, None),
        MemoryDep('buf165', c0, {c0: 393216}, None)]
op162_op163_op165.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf161', c0, {c0: 393216}, None)]
op162_op163_op165.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg174_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg175_1', c1, {c0: 2048, c1: 192}, None)]
op162_op163_op165.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op162_op163_op165.snodes[0] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 2048}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf161', c0, {c0: 393216}, None)]
op162.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 2048, c1: 192}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (2048, 192)
op162.sizes = ([2048], [192])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op162_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem)
        return store_reduction
op162_op163_op165.snodes[1] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 2048}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf161', c0, {c0: 393216}, None)]
op163.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 2048, c1: 192}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (2048, 192)
op163.sizes = ([2048], [192])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op163_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem_1)
        return store_reduction
op162_op163_op165.snodes[2] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 393216}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf161', c0, {c0: 393216}, None),
        MemoryDep('buf162', c0, {c0: 2048}, None),
        MemoryDep('buf163', c0, {c0: 2048}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg174_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg175_1', c1, {c0: 2048, c1: 192}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (393216, 1)
op165.sizes = ([2048, 192], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf163_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op165_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf162', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf163', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg174_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg175_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf165', get_index_7, add_3, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 786432}, None)]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 786432}, None)]
op167.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 2048, c1: 384}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (786432, 1)
op167.sizes = ([2048, 384], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
class op167_loop_body:
    var_ranges = {z0: 2048, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf167', get_index_4, mul, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.mm


op169_op170_op171_op173: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op169_op170_op171_op173.writes = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf170', c0, {c0: 2048}, None),
        MemoryDep('buf171', c0, {c0: 2048}, None),
        MemoryDep('buf173', c0, {c0: 393216}, None)]
op169_op170_op171_op173.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf161', c0, {c0: 393216}, None),
        MemoryDep('buf168', c0, {c0: 393216}, None)]
op169_op170_op171_op173.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg179_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg180_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 192}, None)]
op169_op170_op171_op173.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op169_op170_op171_op173.snodes[0] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 393216}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 393216}, None),
        MemoryDep('buf161', c0, {c0: 393216}, None),
        MemoryDep('buf168', c0, {c0: 393216}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg179_1', c1, {c0: 2048, c1: 192}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (393216, 1)
op169.sizes = ([2048, 192], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op169_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf168', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg179_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf169', get_index_5, add_3, None)
        return store
op169_op170_op171_op173.snodes[1] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 2048}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 393216}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (2048, 192)
op170.sizes = ([2048], [192])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op170_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_1, getitem)
        return store_reduction
op169_op170_op171_op173.snodes[2] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 2048}, None)]
op171.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 393216}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (2048, 192)
op171.sizes = ([2048], [192])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op171_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf171', get_index_1, getitem_1)
        return store_reduction
op169_op170_op171_op173.snodes[3] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 393216}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf170', c0, {c0: 2048}, None),
        MemoryDep('buf171', c0, {c0: 2048}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 192}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (393216, 1)
op173.sizes = ([2048, 192], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf171_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op173_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf171', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg180_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg181_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf173', get_index_5, add_1, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg182_1', mode=None), StarDep(name='arg183_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda', torch.float32, size=[2048, 576], stride=[576, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.addmm


op175: ExternKernelSchedulerNode(FallbackKernel)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: FallbackKernel
    buf175.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op175.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op176: ExternKernelSchedulerNode(MultiOutput)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: MultiOutput
    buf176.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 64, 48], stride=[12288, 48, 192, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = None


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op180.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.mm


op181_op182_op184: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op181_op182_op184.writes = 
    [   MemoryDep('buf181', c0, {c0: 2048}, None),
        MemoryDep('buf182', c0, {c0: 2048}, None),
        MemoryDep('buf184', c0, {c0: 393216}, None)]
op181_op182_op184.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf180', c0, {c0: 393216}, None)]
op181_op182_op184.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg186_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg187_1', c1, {c0: 2048, c1: 192}, None)]
op181_op182_op184.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op181_op182_op184.snodes[0] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 2048}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf180', c0, {c0: 393216}, None)]
op181.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 2048, c1: 192}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (2048, 192)
op181.sizes = ([2048], [192])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op181_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf181', get_index_3, getitem)
        return store_reduction
op181_op182_op184.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 2048}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf180', c0, {c0: 393216}, None)]
op182.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 2048, c1: 192}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (2048, 192)
op182.sizes = ([2048], [192])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op182_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf182', get_index_3, getitem_1)
        return store_reduction
op181_op182_op184.snodes[2] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 393216}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf180', c0, {c0: 393216}, None),
        MemoryDep('buf181', c0, {c0: 2048}, None),
        MemoryDep('buf182', c0, {c0: 2048}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg186_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg187_1', c1, {c0: 2048, c1: 192}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (393216, 1)
op184.sizes = ([2048, 192], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf182_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op184_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf181', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf182', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg186_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg187_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf184', get_index_7, add_3, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False)]
]
op185.node.kernel = extern_kernels.mm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 786432}, None)]
op186.unmet_dependencies = [MemoryDep('buf185', c0, {c0: 786432}, None)]
op186.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 2048, c1: 384}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (786432, 1)
op186.sizes = ([2048, 384], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 384], stride=[24576, 384, 1])
class op186_loop_body:
    var_ranges = {z0: 2048, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf185', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf186', get_index_4, mul, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False)]
]
op187.node.kernel = extern_kernels.mm


op188_op189_op190: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op188_op189_op190.writes = 
    [   MemoryDep('buf188', c0, {c0: 393216}, None),
        MemoryDep('buf189', c0, {c0: 2048}, None),
        MemoryDep('buf190', c0, {c0: 2048}, None)]
op188_op189_op190.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf180', c0, {c0: 393216}, None),
        MemoryDep('buf187', c0, {c0: 393216}, None)]
op188_op189_op190.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg191_1', c1, {c0: 2048, c1: 192}, None)]
op188_op189_op190.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
    ]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf189.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf190.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op188_op189_op190.snodes[0] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 393216}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 393216}, None),
        MemoryDep('buf180', c0, {c0: 393216}, None),
        MemoryDep('buf187', c0, {c0: 393216}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 2048, c1: 192}, None),
        MemoryDep('arg191_1', c1, {c0: 2048, c1: 192}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (393216, 1)
op188.sizes = ([2048, 192], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[2048, 192], stride=[192, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
class op188_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf187', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg191_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, add_3, None)
        return store
op188_op189_op190.snodes[1] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 2048}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 393216}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf189.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (2048, 192)
op189.sizes = ([2048], [192])
buf188_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op189_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf189', get_index_1, getitem)
        return store_reduction
op188_op189_op190.snodes[2] =
op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 2048}, None)]
op190.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 393216}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf190.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (2048, 192)
op190.sizes = ([2048], [192])
buf188_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op190_loop_body:
    var_ranges = {z0: 2048, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf190', get_index_1, getitem_1)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [   MemoryDep('buf192', 16*c0 + c1 + 32*c2 + 2*c3, {c0: 2, c1: 2, c2: 12288, c3: 8}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf188', 12288*c0 + 49152*(((c0 + 4*c1)//49152)) + 192*ModularIndexing(c0 + 4*c1, 4, 64) + ModularIndexing(c0 + 4*c1, 256, 192), {c0: 4, c1: 98304}, None),
        MemoryDep('buf189', 64*c0 + 256*(((c0 + 4*c1)//49152)) + ModularIndexing(c0 + 4*c1, 4, 64), {c0: 4, c1: 98304}, None),
        MemoryDep('buf190', 64*c0 + 256*(((c0 + 4*c1)//49152)) + ModularIndexing(c0 + 4*c1, 4, 64), {c0: 4, c1: 98304}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg192_1', ModularIndexing(c0 + 4*c1, 256, 192), {c0: 4, c1: 98304}, None),
        MemoryDep('arg193_1', ModularIndexing(c0 + 4*c1, 256, 192), {c0: 4, c1: 98304}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[12288, 2, 8, 2], stride=[32, 16, 2, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (393216, 1)
op192.sizes = ([2, 2, 12288, 8], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 192], stride=[12288, 192, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[12288, 2, 8, 2], stride=[32, 16, 2, 1])
class op192_loop_body:
    var_ranges = {z0: 2, z1: 2, z2: 12288, z3: 8}
    index0 = 24576*z0 + 12288*z1 + 49152*(((2*z0 + z1 + 32*z2 + 4*z3)//49152)) + 192*ModularIndexing(2*z0 + z1 + 32*z2 + 4*z3, 4, 64) + ModularIndexing(2*z0 + z1 + 32*z2 + 4*z3, 256, 192)
    index1 = 128*z0 + 64*z1 + 256*(((2*z0 + z1 + 32*z2 + 4*z3)//49152)) + ModularIndexing(2*z0 + z1 + 32*z2 + 4*z3, 4, 64)
    index2 = ModularIndexing(2*z0 + z1 + 32*z2 + 4*z3, 256, 192)
    index3 = 16*z0 + z1 + 32*z2 + 2*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf189', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf190', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg192_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg193_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf192', get_index_5, add_1, None)
        return store


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', 49152*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 256}, None)]
op193.unmet_dependencies = [   MemoryDep('buf192', 256*c0 + c2 + 32*(((16*c1 + c2)//32)) + 16*ModularIndexing(c1, 1, 2), {c0: 1536, c1: 16, c2: 16}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (393216, 1)
op193.sizes = ([8, 192, 16, 16], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[12288, 2, 8, 2], stride=[32, 16, 2, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 16, 16], stride=[49152, 1, 3072, 192])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16, z3: 16}
    index0 = 49152*z0 + 256*z1 + z3 + 32*(((16*z2 + z3)//32)) + 16*ModularIndexing(z2, 1, 2)
    index1 = 49152*z0 + z1 + 3072*z2 + 192*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf193', get_index_1, load, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 262144}, None)]
op195.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 262144}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg196_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg197_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg198_1', c1, {c0: 2048, c1: 128}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (262144, 1)
op195.sizes = ([2048, 128], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
class op195_loop_body:
    var_ranges = {z0: 2048, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg196_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg197_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg198_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, add_1, None)
        return store


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 524288}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf107', 128*c0 + I, {c0: 2048, c1: 256}, None),
        MemoryDep('buf195', 128*c0 + I, {c0: 2048, c1: 256}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (524288, 1)
op196.sizes = ([2048, 256], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op196_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = z1
    index1 = 128*z0 + I
    index2 = 128*z0 + I
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf196', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf107', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf195', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', 2304*c0 + c1 + 256*c2, {c0: 128, c1: 256, c2: 9}, None)]
op197.unmet_dependencies = []
op197.met_dependencies = [MemoryDep('arg199_1', c0, {c0: 294912}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[128, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (294912, 1)
op197.sizes = ([128, 256, 9], [])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[128, 256, 3, 3], stride=[2304, 9, 3, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[128, 256, 3, 3], stride=[2304, 1, 768, 256])
class op197_loop_body:
    var_ranges = {z0: 128, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg199_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf197', get_index_1, load, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf196', mode=None), StarDep(name='buf197', mode=None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op199_op200.writes = 
    [   MemoryDep('buf199', c0, {c0: 262144}, None),
        MemoryDep('buf200', c0, {c0: 262144}, None)]
op199_op200.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 262144}, None)]
op199_op200.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg201_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg202_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg203_1', c1, {c0: 2048, c1: 128}, None)]
op199_op200.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199_op200.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 262144}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 262144}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg201_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg202_1', c1, {c0: 2048, c1: 128}, None),
        MemoryDep('arg203_1', c1, {c0: 2048, c1: 128}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (262144, 1)
op199.sizes = ([2048, 128], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
class op199_loop_body:
    var_ranges = {z0: 2048, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg201_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg202_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg203_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, add_1, None)
        return store
op199_op200.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 262144}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 262144}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (262144, 1)
op200.sizes = ([262144], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 16, 16], stride=[32768, 1, 2048, 128])
class op200_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf200', get_index_2, mul, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op202_op203.writes = 
    [   MemoryDep('buf202', c0, {c0: 1048576}, None),
        MemoryDep('buf203', c0, {c0: 1048576}, None)]
op202_op203.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 1048576}, None)]
op202_op203.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg206_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg207_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg208_1', c1, {c0: 2048, c1: 512}, None)]
op202_op203.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202_op203.snodes[0] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 1048576}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 1048576}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg206_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg207_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg208_1', c1, {c0: 2048, c1: 512}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (1048576, 1)
op202.sizes = ([2048, 512], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op202_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg206_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg207_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg208_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf202', get_index_5, add_1, None)
        return store
op202_op203.snodes[1] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1048576}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 1048576}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (1048576, 1)
op203.sizes = ([1048576], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op203_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf203', get_index_2, mul, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelAlloc)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelAlloc
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.convolution


op205_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op205_op206.writes = 
    [   MemoryDep('buf205', c0, {c0: 262144}, None),
        MemoryDep('buf206', c0, {c0: 262144}, None)]
op205_op206.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 262144}, None)]
op205_op206.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg211_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg213_1', c1, {c0: 512, c1: 512}, None)]
op205_op206.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205_op206.snodes[0] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 262144}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 262144}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg211_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg213_1', c1, {c0: 512, c1: 512}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (262144, 1)
op205.sizes = ([512, 512], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op205_loop_body:
    var_ranges = {z0: 512, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg210_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg211_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg212_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg213_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf205', get_index_5, add_1, None)
        return store
op205_op206.snodes[1] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 262144}, None)]
op206.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 262144}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (262144, 1)
op206.sizes = ([262144], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op206_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf206', get_index_2, mul, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 81920}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 81920}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg216_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg217_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg218_1', c1, {c0: 512, c1: 160}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (81920, 1)
op208.sizes = ([512, 160], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
class op208_loop_body:
    var_ranges = {z0: 512, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg215_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg216_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg217_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg218_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, add_1, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg219_1', c0, {c0: 230400}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (230400, 1)
op209.sizes = ([160, 160, 9], [])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op209_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg219_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelAlloc)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelAlloc
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.convolution


op211_op212: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op211_op212.writes = 
    [   MemoryDep('buf211', c0, {c0: 81920}, None),
        MemoryDep('buf212', c0, {c0: 81920}, None)]
op211_op212.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 81920}, None)]
op211_op212.met_dependencies = 
    [   MemoryDep('arg220_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg221_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg222_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg223_1', c1, {c0: 512, c1: 160}, None)]
op211_op212.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211_op212.snodes[0] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 81920}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 81920}, None)]
op211.met_dependencies = 
    [   MemoryDep('arg220_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg221_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg222_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg223_1', c1, {c0: 512, c1: 160}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (81920, 1)
op211.sizes = ([512, 160], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
class op211_loop_body:
    var_ranges = {z0: 512, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg220_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg221_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg222_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg223_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf211', get_index_5, add_1, None)
        return store
op211_op212.snodes[1] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 81920}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 81920}, None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (81920, 1)
op212.sizes = ([81920], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
class op212_loop_body:
    var_ranges = {z0: 81920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf212', get_index_2, mul, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelAlloc)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelAlloc
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op213.node.kernel = extern_kernels.convolution


op214_op215_op217: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op214_op215_op217.writes = 
    [   MemoryDep('buf214', c0, {c0: 512}, None),
        MemoryDep('buf215', c0, {c0: 512}, None),
        MemoryDep('buf217', 240*c0 + 3840*c1 + c2, {c0: 16, c1: 32, c2: 240}, None)]
op214_op215_op217.unmet_dependencies = [   MemoryDep('buf213', c2 + 15360*((c1//4)) + 3840*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//8)) + ((16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c1, 1, 4)//2)) + 480*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 16, c1: 32, c2: 240}, None)]
op214_op215_op217.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg226_1', c1, {c0: 512, c1: 240}, None)]
op214_op215_op217.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op214_op215_op217.snodes[0] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 512}, None)]
op214.unmet_dependencies = [   MemoryDep('buf213', c2 + 15360*((c1//4)) + 3840*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//8)) + ((16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c1, 1, 4)//2)) + 480*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 16, c1: 32, c2: 240}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (512, 240)
op214.sizes = ([16, 32], [240])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf214_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
class op214_loop_body:
    var_ranges = {z0: 16, z1: 32, z2: 240}
    index0 = z2 + 15360*((z1//4)) + 3840*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//8)) + ((16*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 8*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 8*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z1, 1, 4)//2)) + 480*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_1, getitem)
        return store_reduction
op214_op215_op217.snodes[1] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 512}, None)]
op215.unmet_dependencies = [   MemoryDep('buf213', c2 + 15360*((c1//4)) + 3840*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//8)) + ((16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c1, 1, 4)//2)) + 480*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 16, c1: 32, c2: 240}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (512, 240)
op215.sizes = ([16, 32], [240])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf215_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
class op215_loop_body:
    var_ranges = {z0: 16, z1: 32, z2: 240}
    index0 = z2 + 15360*((z1//4)) + 3840*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//8)) + ((16*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 8*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 8*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z1, 1, 4)//2)) + 480*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf215', get_index_1, getitem_1)
        return store_reduction
op214_op215_op217.snodes[2] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', 240*c0 + 3840*c1 + c2, {c0: 16, c1: 32, c2: 240}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c1//4)) + 3840*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//8)) + ((16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c0 + ModularIndexing(c1, 1, 4))//16)) + 8*((ModularIndexing(c1, 1, 4)//2)) + 2*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c1, 1, 4)//2)) + 480*ModularIndexing(4*c0 + ModularIndexing(c1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c1, 1, 4), 1, 2), {c0: 16, c1: 32, c2: 240}, None),
        MemoryDep('buf214', c0, {c0: 512}, None),
        MemoryDep('buf215', c0, {c0: 512}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg226_1', c1, {c0: 512, c1: 240}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (122880, 1)
op217.sizes = ([16, 32, 240], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf214_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
buf215_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[1, 32, 512])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op217_loop_body:
    var_ranges = {z0: 16, z1: 32, z2: 240}
    index0 = z2 + 15360*((z1//4)) + 3840*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//8)) + ((16*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 8*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z0 + ModularIndexing(z1, 1, 4))//16)) + 8*((ModularIndexing(z1, 1, 4)//2)) + 2*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z1, 1, 4)//2)) + 480*ModularIndexing(4*z0 + ModularIndexing(z1, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z1, 1, 4), 1, 2)
    index1 = 32*z0 + z1
    index2 = z2
    index3 = 240*z0 + 3840*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf215', get_index_2)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg225_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg226_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf217', get_index_5, add_1, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg227_1', mode=None), StarDep(name='arg228_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[512, 720], stride=[720, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.addmm


op219: ExternKernelSchedulerNode(FallbackKernel)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: FallbackKernel
    buf219.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
    ]
]
op219.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op220: ExternKernelSchedulerNode(MultiOutput)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: MultiOutput
    buf220.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 16, 60], stride=[3840, 60, 240, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = None


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op224.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225_op226_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op225_op226_op228.writes = 
    [   MemoryDep('buf225', c0, {c0: 512}, None),
        MemoryDep('buf226', c0, {c0: 512}, None),
        MemoryDep('buf228', c0, {c0: 122880}, None)]
op225_op226_op228.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c0//4)) + 3840*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//8)) + ((16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c0, 1, 4)//2)) + 480*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 16, c2: 240}, None),
        MemoryDep('buf224', c0, {c0: 122880}, None)]
op225_op226_op228.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg231_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg232_1', c1, {c0: 512, c1: 240}, None)]
op225_op226_op228.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op225_op226_op228.snodes[0] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 512}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c0//4)) + 3840*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//8)) + ((16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c0, 1, 4)//2)) + 480*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 16, c2: 240}, None),
        MemoryDep('buf224', c0, {c0: 122880}, None)]
op225.met_dependencies = [MemoryDep('arg230_1', c1, {c0: 512, c1: 240}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (512, 240)
op225.sizes = ([32, 16], [240])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op225_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 240}
    index0 = z2 + 15360*((z0//4)) + 3840*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//8)) + ((16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z0, 1, 4)//2)) + 480*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 3840*z0 + 240*z1 + z2
    index2 = z2
    index3 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg230_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225_op226_op228.snodes[1] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 512}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c0//4)) + 3840*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//8)) + ((16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c0, 1, 4)//2)) + 480*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 16, c2: 240}, None),
        MemoryDep('buf224', c0, {c0: 122880}, None)]
op226.met_dependencies = [MemoryDep('arg230_1', c1, {c0: 512, c1: 240}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (512, 240)
op226.sizes = ([32, 16], [240])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op226_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 240}
    index0 = z2 + 15360*((z0//4)) + 3840*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//8)) + ((16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z0, 1, 4)//2)) + 480*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 3840*z0 + 240*z1 + z2
    index2 = z2
    index3 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg230_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op225_op226_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 122880}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c0//4)) + 3840*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//8)) + ((16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c0, 1, 4)//2)) + 480*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 16, c2: 240}, None),
        MemoryDep('buf224', c0, {c0: 122880}, None),
        MemoryDep('buf225', c0, {c0: 512}, None),
        MemoryDep('buf226', c0, {c0: 512}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg231_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg232_1', c1, {c0: 512, c1: 240}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (122880, 1)
op228.sizes = ([32, 16, 240], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op228_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 240}
    index0 = z2 + 15360*((z0//4)) + 3840*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//8)) + ((16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z0, 1, 4)//2)) + 480*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 3840*z0 + 240*z1 + z2
    index2 = z2
    index3 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg230_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg231_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg232_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[512, 480], stride=[480, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 245760}, None)]
op230.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 245760}, None)]
op230.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 512, c1: 480}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 480], stride=[7680, 480, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (245760, 1)
op230.sizes = ([512, 480], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[512, 480], stride=[480, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 480], stride=[7680, 480, 1])
class op230_loop_body:
    var_ranges = {z0: 512, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf230', get_index_4, mul, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op231.node.kernel = extern_kernels.mm


op232_op233_op234_op236: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op232_op233_op234_op236.writes = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf233', c0, {c0: 512}, None),
        MemoryDep('buf234', c0, {c0: 512}, None),
        MemoryDep('buf236', c0, {c0: 122880}, None)]
op232_op233_op234_op236.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c0//4)) + 3840*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//8)) + ((16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c0, 1, 4)//2)) + 480*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 16, c2: 240}, None),
        MemoryDep('buf224', c0, {c0: 122880}, None),
        MemoryDep('buf231', c0, {c0: 122880}, None)]
op232_op233_op234_op236.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg236_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg237_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg238_1', c1, {c0: 512, c1: 240}, None)]
op232_op233_op234_op236.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op232_op233_op234_op236.snodes[0] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 122880}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf213', c2 + 15360*((c0//4)) + 3840*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//8)) + ((16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//64) + 15360*(((64*c2 + 16*(((4*c1 + ModularIndexing(c0, 1, 4))//16)) + 8*((ModularIndexing(c0, 1, 4)//2)) + 2*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(c0, 1, 4)//2)) + 480*ModularIndexing(4*c1 + ModularIndexing(c0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(c0, 1, 4), 1, 2), {c0: 32, c1: 16, c2: 240}, None),
        MemoryDep('buf224', c0, {c0: 122880}, None),
        MemoryDep('buf231', c0, {c0: 122880}, None)]
op232.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg236_1', c1, {c0: 512, c1: 240}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (122880, 1)
op232.sizes = ([32, 16, 240], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op232_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 240}
    index0 = z2 + 15360*((z0//4)) + 3840*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 1920*(((2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//8)) + ((16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//64) + 15360*(((64*z2 + 16*(((4*z1 + ModularIndexing(z0, 1, 4))//16)) + 8*((ModularIndexing(z0, 1, 4)//2)) + 2*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2))//15360)) + 1920*((ModularIndexing(z0, 1, 4)//2)) + 480*ModularIndexing(4*z1 + ModularIndexing(z0, 1, 4), 4, 4) + 240*ModularIndexing(ModularIndexing(z0, 1, 4), 1, 2)
    index1 = 3840*z0 + 240*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg230_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf231', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg236_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf232', get_index_5, add_3, None)
        return store
op232_op233_op234_op236.snodes[1] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 512}, None)]
op233.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 122880}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (512, 240)
op233.sizes = ([512], [240])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op233_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem)
        return store_reduction
op232_op233_op234_op236.snodes[2] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 512}, None)]
op234.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 122880}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (512, 240)
op234.sizes = ([512], [240])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op234_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf234', get_index_1, getitem_1)
        return store_reduction
op232_op233_op234_op236.snodes[3] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 122880}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf233', c0, {c0: 512}, None),
        MemoryDep('buf234', c0, {c0: 512}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg238_1', c1, {c0: 512, c1: 240}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (122880, 1)
op236.sizes = ([512, 240], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
buf234_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op236_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf234', get_index_2)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg237_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg238_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, add_1, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg239_1', mode=None), StarDep(name='arg240_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[512, 720], stride=[720, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.addmm


op238: ExternKernelSchedulerNode(FallbackKernel)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: FallbackKernel
    buf238.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf238.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]
op238.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op239: ExternKernelSchedulerNode(MultiOutput)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: MultiOutput
    buf239.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 16, 60], stride=[3840, 60, 240, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = None


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op243.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.mm


op244_op245_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op244_op245_op247.writes = 
    [   MemoryDep('buf244', c0, {c0: 512}, None),
        MemoryDep('buf245', c0, {c0: 512}, None),
        MemoryDep('buf247', c0, {c0: 122880}, None)]
op244_op245_op247.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf243', c0, {c0: 122880}, None)]
op244_op245_op247.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg243_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg244_1', c1, {c0: 512, c1: 240}, None)]
op244_op245_op247.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op244_op245_op247.snodes[0] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 512}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf243', c0, {c0: 122880}, None)]
op244.met_dependencies = [MemoryDep('arg242_1', c1, {c0: 512, c1: 240}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (512, 240)
op244.sizes = ([512], [240])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op244_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, getitem)
        return store_reduction
op244_op245_op247.snodes[1] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 512}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf243', c0, {c0: 122880}, None)]
op245.met_dependencies = [MemoryDep('arg242_1', c1, {c0: 512, c1: 240}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (512, 240)
op245.sizes = ([512], [240])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op245_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_3, getitem_1)
        return store_reduction
op244_op245_op247.snodes[2] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 122880}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf243', c0, {c0: 122880}, None),
        MemoryDep('buf244', c0, {c0: 512}, None),
        MemoryDep('buf245', c0, {c0: 512}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg243_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg244_1', c1, {c0: 512, c1: 240}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (122880, 1)
op247.sizes = ([512, 240], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
buf245_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op247_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf244', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf245', get_index_4)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg243_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg244_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf247', get_index_7, add_3, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[512, 480], stride=[480, 1])
    buf248.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False)]
]
op248.node.kernel = extern_kernels.mm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 245760}, None)]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 245760}, None)]
op249.met_dependencies = [MemoryDep('arg246_1', c1, {c0: 512, c1: 480}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 480], stride=[7680, 480, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (245760, 1)
op249.sizes = ([512, 480], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[512, 480], stride=[480, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 480], stride=[7680, 480, 1])
class op249_loop_body:
    var_ranges = {z0: 512, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf248', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf249', get_index_4, mul, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op251_op252_op253_op255: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op251_op252_op253_op255.writes = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf252', c0, {c0: 512}, None),
        MemoryDep('buf253', c0, {c0: 512}, None),
        MemoryDep('buf255', c0, {c0: 122880}, None)]
op251_op252_op253_op255.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf243', c0, {c0: 122880}, None),
        MemoryDep('buf250', c0, {c0: 122880}, None)]
op251_op252_op253_op255.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg248_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg249_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg250_1', c1, {c0: 512, c1: 240}, None)]
op251_op252_op253_op255.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False),
    ]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf252.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op251_op252_op253_op255.snodes[0] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 122880}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 122880}, None),
        MemoryDep('buf243', c0, {c0: 122880}, None),
        MemoryDep('buf250', c0, {c0: 122880}, None)]
op251.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg248_1', c1, {c0: 512, c1: 240}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (122880, 1)
op251.sizes = ([512, 240], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op251_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf250', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg248_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf251', get_index_5, add_3, None)
        return store
op251_op252_op253_op255.snodes[1] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 512}, None)]
op252.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 122880}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf252.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (512, 240)
op252.sizes = ([512], [240])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op252_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf252', get_index_1, getitem)
        return store_reduction
op251_op252_op253_op255.snodes[2] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 512}, None)]
op253.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 122880}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (512, 240)
op253.sizes = ([512], [240])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op253_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, getitem_1)
        return store_reduction
op251_op252_op253_op255.snodes[3] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 122880}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf252', c0, {c0: 512}, None),
        MemoryDep('buf253', c0, {c0: 512}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg250_1', c1, {c0: 512, c1: 240}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (122880, 1)
op255.sizes = ([512, 240], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op255_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf252', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf253', get_index_2)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf255', get_index_5, add_1, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg251_1', mode=None), StarDep(name='arg252_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[512, 720], stride=[720, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.node.kernel = extern_kernels.addmm


op257: ExternKernelSchedulerNode(FallbackKernel)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: FallbackKernel
    buf257.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf257.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op257.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op258: ExternKernelSchedulerNode(MultiOutput)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: MultiOutput
    buf258.layout = FixedLayout('cuda', torch.float32, size=[32, 4, 16, 60], stride=[3840, 60, 240, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op258.node.kernel = None


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op262.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.mm


op263_op264_op266: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op263_op264_op266.writes = 
    [   MemoryDep('buf263', c0, {c0: 512}, None),
        MemoryDep('buf264', c0, {c0: 512}, None),
        MemoryDep('buf266', c0, {c0: 122880}, None)]
op263_op264_op266.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf262', c0, {c0: 122880}, None)]
op263_op264_op266.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg255_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg256_1', c1, {c0: 512, c1: 240}, None)]
op263_op264_op266.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op263_op264_op266.snodes[0] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 512}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf262', c0, {c0: 122880}, None)]
op263.met_dependencies = [MemoryDep('arg254_1', c1, {c0: 512, c1: 240}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (512, 240)
op263.sizes = ([512], [240])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op263_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg254_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem)
        return store_reduction
op263_op264_op266.snodes[1] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 512}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf262', c0, {c0: 122880}, None)]
op264.met_dependencies = [MemoryDep('arg254_1', c1, {c0: 512, c1: 240}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (512, 240)
op264.sizes = ([512], [240])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op264_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg254_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem_1)
        return store_reduction
op263_op264_op266.snodes[2] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 122880}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf262', c0, {c0: 122880}, None),
        MemoryDep('buf263', c0, {c0: 512}, None),
        MemoryDep('buf264', c0, {c0: 512}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg255_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg256_1', c1, {c0: 512, c1: 240}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (122880, 1)
op266.sizes = ([512, 240], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
buf264_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op266_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg254_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf263', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf264', get_index_4)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg255_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg256_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf266', get_index_7, add_3, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[512, 480], stride=[480, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False)]
]
op267.node.kernel = extern_kernels.mm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 245760}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 245760}, None)]
op268.met_dependencies = [MemoryDep('arg258_1', c1, {c0: 512, c1: 480}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 480], stride=[7680, 480, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (245760, 1)
op268.sizes = ([512, 480], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[512, 480], stride=[480, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 480], stride=[7680, 480, 1])
class op268_loop_body:
    var_ranges = {z0: 512, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg258_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf268', get_index_4, mul, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op270_op271_op272: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op270_op271_op272.writes = 
    [   MemoryDep('buf270', c0, {c0: 122880}, None),
        MemoryDep('buf271', c0, {c0: 512}, None),
        MemoryDep('buf272', c0, {c0: 512}, None)]
op270_op271_op272.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf262', c0, {c0: 122880}, None),
        MemoryDep('buf269', c0, {c0: 122880}, None)]
op270_op271_op272.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg260_1', c1, {c0: 512, c1: 240}, None)]
op270_op271_op272.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf270.users = [
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
    ]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf271.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf272.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op270_op271_op272.snodes[0] =
op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 122880}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 122880}, None),
        MemoryDep('buf262', c0, {c0: 122880}, None),
        MemoryDep('buf269', c0, {c0: 122880}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 512, c1: 240}, None),
        MemoryDep('arg260_1', c1, {c0: 512, c1: 240}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
    buf270.users = [
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
    ]
]
op270.group.device = cuda:0
op270.group.iteration = (122880, 1)
op270.sizes = ([512, 240], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[512, 240], stride=[240, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
class op270_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg254_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf269', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf270', get_index_5, add_3, None)
        return store
op270_op271_op272.snodes[1] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 512}, None)]
op271.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 122880}, None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf271.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (512, 240)
op271.sizes = ([512], [240])
buf270_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op271_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf271', get_index_1, getitem)
        return store_reduction
op270_op271_op272.snodes[2] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 512}, None)]
op272.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 122880}, None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
    buf272.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (512, 240)
op272.sizes = ([512], [240])
buf270_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
class op272_loop_body:
    var_ranges = {z0: 512, z1: 240}
    index0 = 240*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf272', get_index_1, getitem_1)
        return store_reduction


op274: SchedulerNode(ComputedBuffer)
op274.writes = [   MemoryDep('buf274', 8*c0 + c1 + 16*c2 + 2*c3, {c0: 2, c1: 2, c2: 7680, c3: 4}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf270', 3840*c0 + 15360*(((c0 + 4*c1)//15360)) + 240*ModularIndexing(c0 + 4*c1, 4, 16) + ModularIndexing(c0 + 4*c1, 64, 240), {c0: 4, c1: 30720}, None),
        MemoryDep('buf271', 16*c0 + 64*(((c0 + 4*c1)//15360)) + ModularIndexing(c0 + 4*c1, 4, 16), {c0: 4, c1: 30720}, None),
        MemoryDep('buf272', 16*c0 + 64*(((c0 + 4*c1)//15360)) + ModularIndexing(c0 + 4*c1, 4, 16), {c0: 4, c1: 30720}, None)]
op274.met_dependencies = 
    [   MemoryDep('arg261_1', ModularIndexing(c0 + 4*c1, 64, 240), {c0: 4, c1: 30720}, None),
        MemoryDep('arg262_1', ModularIndexing(c0 + 4*c1, 64, 240), {c0: 4, c1: 30720}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[7680, 2, 4, 2], stride=[16, 8, 2, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (122880, 1)
op274.sizes = ([2, 2, 7680, 4], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 240], stride=[3840, 240, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 1], stride=[16, 1, 512])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[7680, 2, 4, 2], stride=[16, 8, 2, 1])
class op274_loop_body:
    var_ranges = {z0: 2, z1: 2, z2: 7680, z3: 4}
    index0 = 7680*z0 + 3840*z1 + 15360*(((2*z0 + z1 + 16*z2 + 4*z3)//15360)) + 240*ModularIndexing(2*z0 + z1 + 16*z2 + 4*z3, 4, 16) + ModularIndexing(2*z0 + z1 + 16*z2 + 4*z3, 64, 240)
    index1 = 32*z0 + 16*z1 + 64*(((2*z0 + z1 + 16*z2 + 4*z3)//15360)) + ModularIndexing(2*z0 + z1 + 16*z2 + 4*z3, 4, 16)
    index2 = ModularIndexing(2*z0 + z1 + 16*z2 + 4*z3, 64, 240)
    index3 = 8*z0 + z1 + 16*z2 + 2*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf271', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf272', get_index_2)
        constant = ops.constant(240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg261_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg262_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf274', get_index_5, add_1, None)
        return store


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', 15360*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 64}, None)]
op275.unmet_dependencies = [   MemoryDep('buf274', 64*c0 + c2 + 16*(((8*c1 + c2)//16)) + 8*ModularIndexing(c1, 1, 2), {c0: 1920, c1: 8, c2: 8}, None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (122880, 1)
op275.sizes = ([8, 240, 8, 8], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[7680, 2, 4, 2], stride=[16, 8, 2, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 8, 8], stride=[15360, 1, 1920, 240])
class op275_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 8, z3: 8}
    index0 = 15360*z0 + 64*z1 + z3 + 16*(((8*z2 + z3)//16)) + 8*ModularIndexing(z2, 1, 2)
    index1 = 15360*z0 + z1 + 1920*z2 + 240*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf275', get_index_1, load, None)
        return store


op276: ExternKernelSchedulerNode(ExternKernelAlloc)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf275', mode=None)]
op276.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op276.outputs = [
    buf276: ExternKernelAlloc
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False)]
]
op276.node.kernel = extern_kernels.convolution


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 81920}, None)]
op277.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 81920}, None)]
op277.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg265_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg266_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg267_1', c1, {c0: 512, c1: 160}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (81920, 1)
op277.sizes = ([512, 160], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
class op277_loop_body:
    var_ranges = {z0: 512, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg267_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf277', get_index_5, add_1, None)
        return store


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 163840}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf208', 160*c0 + I, {c0: 512, c1: 320}, None),
        MemoryDep('buf277', 160*c0 + I, {c0: 512, c1: 320}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 8, 8], stride=[20480, 1, 2560, 320])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (163840, 1)
op278.sizes = ([512, 320], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 8, 8], stride=[20480, 1, 2560, 320])
class op278_loop_body:
    var_ranges = {z0: 512, z1: 320}
    index0 = z1
    index1 = 160*z0 + I
    index2 = 160*z0 + I
    index3 = 320*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(160, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(160, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(320, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf278', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf277', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', 2880*c0 + c1 + 320*c2, {c0: 160, c1: 320, c2: 9}, None)]
op279.unmet_dependencies = []
op279.met_dependencies = [MemoryDep('arg268_1', c0, {c0: 460800}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[160, 320, 3, 3], stride=[2880, 1, 960, 320])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (460800, 1)
op279.sizes = ([160, 320, 9], [])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[160, 320, 3, 3], stride=[2880, 9, 3, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[160, 320, 3, 3], stride=[2880, 1, 960, 320])
class op279_loop_body:
    var_ranges = {z0: 160, z1: 320, z2: 9}
    index0 = 2880*z0 + 9*z1 + z2
    index1 = 2880*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg268_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf279', get_index_1, load, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None), StarDep(name='buf279', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False)]
]
op280.node.kernel = extern_kernels.convolution


op281_op282: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op281_op282.writes = 
    [   MemoryDep('buf281', c0, {c0: 81920}, None),
        MemoryDep('buf282', c0, {c0: 81920}, None)]
op281_op282.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 81920}, None)]
op281_op282.met_dependencies = 
    [   MemoryDep('arg269_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg270_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg271_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg272_1', c1, {c0: 512, c1: 160}, None)]
op281_op282.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op281_op282.snodes[0] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 81920}, None)]
op281.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 81920}, None)]
op281.met_dependencies = 
    [   MemoryDep('arg269_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg270_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg271_1', c1, {c0: 512, c1: 160}, None),
        MemoryDep('arg272_1', c1, {c0: 512, c1: 160}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (81920, 1)
op281.sizes = ([512, 160], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
class op281_loop_body:
    var_ranges = {z0: 512, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg271_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg272_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf281', get_index_5, add_1, None)
        return store
op281_op282.snodes[1] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 81920}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 81920}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (81920, 1)
op282.sizes = ([81920], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 8, 8], stride=[10240, 1, 1280, 160])
class op282_loop_body:
    var_ranges = {z0: 81920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf282', get_index_2, mul, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelAlloc)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelAlloc
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op283.node.kernel = extern_kernels.convolution


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 327680}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 327680}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg275_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg276_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg277_1', c1, {c0: 512, c1: 640}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (327680, 1)
op284.sizes = ([512, 640], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op284_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf284', get_index_5, add_1, None)
        return store


op285_op286: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op285_op286.writes = 
    [   MemoryDep('buf285', c0, {c0: 5120}, None),
        MemoryDep('buf286', c0, {c0: 5120}, None)]
op285_op286.unmet_dependencies = [MemoryDep('buf284', 40960*c0 + c1 + 640*c2, {c0: 8, c1: 640, c2: 64}, None)]
op285_op286.met_dependencies = []
op285_op286.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285_op286.snodes[0] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 5120}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', 40960*c0 + c1 + 640*c2, {c0: 8, c1: 640, c2: 64}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (5120, 64)
op285.sizes = ([8, 640], [64])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
class op285_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + z1 + 640*z2
    index1 = 640*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf285', get_index_2, reduction)
        return store_reduction
op285_op286.snodes[1] =
op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 5120}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 5120}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (5120, 1)
op286.sizes = ([5120], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 1, 1], stride=[640, 1, 5120, 5120])
class op286_loop_body:
    var_ranges = {z0: 5120}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf286', get_index_1, truediv, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg278_1', mode=None), StarDep(name='arg279_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf287.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op287.node.kernel = extern_kernels.addmm



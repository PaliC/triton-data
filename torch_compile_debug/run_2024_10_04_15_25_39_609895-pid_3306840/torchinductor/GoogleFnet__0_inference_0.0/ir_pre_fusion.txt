op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 8192}, None),
        MemoryDep('arg1_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg2_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg3_1', c1 + 768*tmp0, {c0: 8192, c1: 768}, None),
        MemoryDep('arg4_1', c1 + 768*tmp2, {c0: 8192, c1: 768}, None),
        MemoryDep('arg5_1', c1 + 768*tmp5, {c0: 8192, c1: 768}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (6291456, 1)
op0.sizes = ([16, 512, 768], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[32000, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[4, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[512, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op0_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 768}
    index0 = 512*z0 + z1
    index1 = 768*indirect0 + z2
    index2 = z1
    index3 = 768*indirect1 + z2
    index4 = 768*indirect2 + z2
    index5 = 393216*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg4_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg2_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg5_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf0', get_index_6, add_1, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*i64', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 768)
        x0 = xindex % 768
        x1 = (xindex // 768) % 512
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp15 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 32000, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32000), "index out of bounds: 0 <= tmp4 < 32000")
        tmp6 = tl.load(in_ptr1 + (x0 + (768*tmp4)), None)
        tmp8 = tl.full([XBLOCK], 4, tl.int32)
        tmp9 = tmp7 + tmp8
        tmp10 = tmp7 < 0
        tmp11 = tl.where(tmp10, tmp9, tmp7)
        tl.device_assert((0 <= tmp11) & (tmp11 < 4), "index out of bounds: 0 <= tmp11 < 4")
        tmp13 = tl.load(in_ptr3 + (x0 + (768*tmp11)), None)
        tmp14 = tmp6 + tmp13
        tmp16 = tl.full([XBLOCK], 512, tl.int32)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp15 < 0
        tmp19 = tl.where(tmp18, tmp17, tmp15)
        tl.device_assert((0 <= tmp19) & (tmp19 < 512), "index out of bounds: 0 <= tmp19 < 512")
        tmp21 = tl.load(in_ptr5 + (x0 + (768*tmp19)), None)
        tmp22 = tmp14 + tmp21
        tl.store(out_ptr0 + (x4), tmp22, None)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8192}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (8192, 768)
op1.sizes = ([8192], [768])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op1_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1', get_index_1, getitem)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.where(rmask, tmp1, 0)
        tmp4 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp6 = tl.where(rmask, tmp4, 0)
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp8 = tl.full([1], 768, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp1 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = tl.where(rmask, tmp13, 0)
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 8192}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (8192, 768)
op2.sizes = ([8192], [768])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op2_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem_1)
        return store_reduction
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.where(rmask, tmp1, 0)
        tmp4 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp6 = tl.where(rmask, tmp4, 0)
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp8 = tl.full([1], 768, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp1 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = tl.where(rmask, tmp13, 0)
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp16, None)


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 6291456}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 6291456}, None),
        MemoryDep('buf1', c0, {c0: 8192}, None),
        MemoryDep('buf2', c0, {c0: 8192}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 8192, c1: 768}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (6291456, 1)
op4.sizes = ([8192, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op4_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf2', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf4', get_index_5, add_1, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 768.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-12
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.mm


op6: NopKernelSchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op6.unmet_dependencies = []
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 6291456}, None)]
op7.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 6291456}, None)]
op7.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 8192, c1: 768}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (6291456, 1)
op7.sizes = ([8192, 768], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
class op7_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf7', get_index_2, add, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x2), tmp2, None)


op8: ExternKernelSchedulerNode(InplaceCopyFallback)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: InplaceCopyFallback
    buf8.layout = <torch._inductor.ir.NoneLayout object at 0x7fe749831a50>
    buf8.mutations = ['buf6']
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = aten.copy_


op9: ExternKernelSchedulerNode(FallbackKernel)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: FallbackKernel
    buf9.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = torch.ops.aten._fft_c2c.default


op10: ExternKernelSchedulerNode(MultiOutput)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: MultiOutput
    buf10.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = None


op11: ExternKernelSchedulerNode(FallbackKernel)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: FallbackKernel
    buf11.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf11.aliases = ['buf10']
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op11.node.kernel = torch.ops.aten.view_as_real.default


op12: ExternKernelSchedulerNode(MultiOutput)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: MultiOutput
    buf12.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf12.aliases = ['buf11']
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op12.node.kernel = None


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 49152}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf12', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf7', c0, {c0: 6291456}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (49152, 128)
op13.sizes = ([49152], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op13_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf13', get_index_2, getitem)
        return store_reduction
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 49152}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf12', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf7', c0, {c0: 6291456}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (49152, 128)
op14.sizes = ([49152], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op14_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf14', get_index_2, getitem_1)
        return store_reduction
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 49152}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf12', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf7', c0, {c0: 6291456}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (49152, 128)
op15.sizes = ([49152], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op15_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_2, getitem_2)
        return store_reduction
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 8192}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 49152}, None),
        MemoryDep('buf14', c0, {c0: 49152}, None),
        MemoryDep('buf15', c0, {c0: 49152}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (8192, 6)
op16.sizes = ([8192], [6])
buf13_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op16_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem)
        return store_reduction
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 8192}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 49152}, None),
        MemoryDep('buf14', c0, {c0: 49152}, None),
        MemoryDep('buf15', c0, {c0: 49152}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (8192, 6)
op17.sizes = ([8192], [6])
buf13_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op17_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem_1)
        return store_reduction
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 6291456}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf12', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf16', c0, {c0: 8192}, None),
        MemoryDep('buf17', c0, {c0: 8192}, None),
        MemoryDep('buf7', c0, {c0: 6291456}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg11_1', c1, {c0: 8192, c1: 768}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (6291456, 1)
op19.sizes = ([8192, 768], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op19_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf16', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf17', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg10_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg11_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf19', get_index_6, add_2, None)
        return store
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 25165824}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 25165824}, None)]
op21.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 8192, c1: 3072}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (25165824, 1)
op21.sizes = ([8192, 3072], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op21_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf20', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg13_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf20', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg13_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf21', get_index_6, mul_5, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 8192}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 6291456}, None),
        MemoryDep('buf22', c0, {c0: 6291456}, None)]
op23.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 8192, c1: 768}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (8192, 768)
op23.sizes = ([8192], [768])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op23_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf23', get_index_3, getitem)
        return store_reduction
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 8192}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 6291456}, None),
        MemoryDep('buf22', c0, {c0: 6291456}, None)]
op24.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 8192, c1: 768}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (8192, 768)
op24.sizes = ([8192], [768])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op24_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem_1)
        return store_reduction
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 6291456}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 6291456}, None),
        MemoryDep('buf22', c0, {c0: 6291456}, None),
        MemoryDep('buf23', c0, {c0: 8192}, None),
        MemoryDep('buf24', c0, {c0: 8192}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg16_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 8192, c1: 768}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (6291456, 1)
op26.sizes = ([8192, 768], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op26_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf23', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf26', get_index_7, add_3, None)
        return store
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op27: NopKernelSchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op27.unmet_dependencies = []
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]


op28: ExternKernelSchedulerNode(InplaceCopyFallback)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None), StarDep(name='buf27', mode=None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: InplaceCopyFallback
    buf28.layout = <torch._inductor.ir.NoneLayout object at 0x7fe749894b80>
    buf28.mutations = ['buf27']
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = aten.copy_


op29: ExternKernelSchedulerNode(FallbackKernel)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: FallbackKernel
    buf29.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = torch.ops.aten._fft_c2c.default


op30: ExternKernelSchedulerNode(MultiOutput)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: MultiOutput
    buf30.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf30.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op30.node.kernel = None


op31: ExternKernelSchedulerNode(FallbackKernel)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: FallbackKernel
    buf31.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf31.aliases = ['buf30']
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op31.node.kernel = torch.ops.aten.view_as_real.default


op32: ExternKernelSchedulerNode(MultiOutput)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: MultiOutput
    buf32.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf32.aliases = ['buf31']
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op32.node.kernel = None


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 49152}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 6291456}, None),
        MemoryDep('buf32', 2*c0, {c0: 6291456}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (49152, 128)
op33.sizes = ([49152], [128])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op33_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf33', get_index_2, getitem)
        return store_reduction
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 49152}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 6291456}, None),
        MemoryDep('buf32', 2*c0, {c0: 6291456}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (49152, 128)
op34.sizes = ([49152], [128])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op34_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_2, getitem_1)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 49152}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 6291456}, None),
        MemoryDep('buf32', 2*c0, {c0: 6291456}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (49152, 128)
op35.sizes = ([49152], [128])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op35_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_2, getitem_2)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 8192}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 49152}, None),
        MemoryDep('buf34', c0, {c0: 49152}, None),
        MemoryDep('buf35', c0, {c0: 49152}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf36.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (8192, 6)
op36.sizes = ([8192], [6])
buf33_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op36_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf34', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf35', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_3, getitem)
        return store_reduction
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 8192}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 49152}, None),
        MemoryDep('buf34', c0, {c0: 49152}, None),
        MemoryDep('buf35', c0, {c0: 49152}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (8192, 6)
op37.sizes = ([8192], [6])
buf33_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op37_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf34', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf35', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem_1)
        return store_reduction
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 6291456}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 6291456}, None),
        MemoryDep('buf32', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf36', c0, {c0: 8192}, None),
        MemoryDep('buf37', c0, {c0: 8192}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg19_1', c1, {c0: 8192, c1: 768}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (6291456, 1)
op39.sizes = ([8192, 768], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op39_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf36', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf37', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg18_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg19_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf39', get_index_6, add_2, None)
        return store
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 25165824}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 25165824}, None)]
op41.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 8192, c1: 3072}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (25165824, 1)
op41.sizes = ([8192, 3072], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op41_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf40', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg21_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf41', get_index_6, mul_5, None)
        return store
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 8192}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 6291456}, None),
        MemoryDep('buf42', c0, {c0: 6291456}, None)]
op43.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (8192, 768)
op43.sizes = ([8192], [768])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op43_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem)
        return store_reduction
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 8192}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 6291456}, None),
        MemoryDep('buf42', c0, {c0: 6291456}, None)]
op44.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (8192, 768)
op44.sizes = ([8192], [768])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op44_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem_1)
        return store_reduction
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 6291456}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 6291456}, None),
        MemoryDep('buf42', c0, {c0: 6291456}, None),
        MemoryDep('buf43', c0, {c0: 8192}, None),
        MemoryDep('buf44', c0, {c0: 8192}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg25_1', c1, {c0: 8192, c1: 768}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (6291456, 1)
op46.sizes = ([8192, 768], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op46_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf43', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf44', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg24_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg25_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf46', get_index_7, add_3, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op47: NopKernelSchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op47.unmet_dependencies = []
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]


op48: ExternKernelSchedulerNode(InplaceCopyFallback)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf46', mode=None), StarDep(name='buf47', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: InplaceCopyFallback
    buf48.layout = <torch._inductor.ir.NoneLayout object at 0x7fe7498b2c80>
    buf48.mutations = ['buf47']
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = aten.copy_


op49: ExternKernelSchedulerNode(FallbackKernel)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: FallbackKernel
    buf49.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.node.kernel = torch.ops.aten._fft_c2c.default


op50: ExternKernelSchedulerNode(MultiOutput)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: MultiOutput
    buf50.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op50.node.kernel = None


op51: ExternKernelSchedulerNode(FallbackKernel)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: FallbackKernel
    buf51.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf51.aliases = ['buf50']
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op51.node.kernel = torch.ops.aten.view_as_real.default


op52: ExternKernelSchedulerNode(MultiOutput)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: MultiOutput
    buf52.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf52.aliases = ['buf51']
    buf52.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op52.node.kernel = None


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 49152}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 6291456}, None),
        MemoryDep('buf52', 2*c0, {c0: 6291456}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (49152, 128)
op53.sizes = ([49152], [128])
buf46_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op53_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf53', get_index_2, getitem)
        return store_reduction
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 49152}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 6291456}, None),
        MemoryDep('buf52', 2*c0, {c0: 6291456}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (49152, 128)
op54.sizes = ([49152], [128])
buf46_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op54_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf54', get_index_2, getitem_1)
        return store_reduction
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 49152}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 6291456}, None),
        MemoryDep('buf52', 2*c0, {c0: 6291456}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (49152, 128)
op55.sizes = ([49152], [128])
buf46_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op55_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_2, getitem_2)
        return store_reduction
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 8192}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 49152}, None),
        MemoryDep('buf54', c0, {c0: 49152}, None),
        MemoryDep('buf55', c0, {c0: 49152}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (8192, 6)
op56.sizes = ([8192], [6])
buf53_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op56_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_3, getitem)
        return store_reduction
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 8192}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 49152}, None),
        MemoryDep('buf54', c0, {c0: 49152}, None),
        MemoryDep('buf55', c0, {c0: 49152}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (8192, 6)
op57.sizes = ([8192], [6])
buf53_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op57_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_3, getitem_1)
        return store_reduction
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 6291456}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 6291456}, None),
        MemoryDep('buf52', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf56', c0, {c0: 8192}, None),
        MemoryDep('buf57', c0, {c0: 8192}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg27_1', c1, {c0: 8192, c1: 768}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (6291456, 1)
op59.sizes = ([8192, 768], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op59_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf56', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf57', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg26_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg27_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf59', get_index_6, add_2, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 25165824}, None)]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 25165824}, None)]
op61.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 8192, c1: 3072}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (25165824, 1)
op61.sizes = ([8192, 3072], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op61_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf60', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf60', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf61', get_index_6, mul_5, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
    ]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 8192}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 6291456}, None),
        MemoryDep('buf62', c0, {c0: 6291456}, None)]
op63.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 8192, c1: 768}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf63.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (8192, 768)
op63.sizes = ([8192], [768])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op63_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem)
        return store_reduction
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 8192}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 6291456}, None),
        MemoryDep('buf62', c0, {c0: 6291456}, None)]
op64.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 8192, c1: 768}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (8192, 768)
op64.sizes = ([8192], [768])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op64_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf64', get_index_3, getitem_1)
        return store_reduction
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 6291456}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 6291456}, None),
        MemoryDep('buf62', c0, {c0: 6291456}, None),
        MemoryDep('buf63', c0, {c0: 8192}, None),
        MemoryDep('buf64', c0, {c0: 8192}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg32_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg33_1', c1, {c0: 8192, c1: 768}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (6291456, 1)
op66.sizes = ([8192, 768], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op66_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf63', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf64', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf66', get_index_7, add_3, None)
        return store
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op67: NopKernelSchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op67.unmet_dependencies = []
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]


op68: ExternKernelSchedulerNode(InplaceCopyFallback)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf66', mode=None), StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: InplaceCopyFallback
    buf68.layout = <torch._inductor.ir.NoneLayout object at 0x7fe7498e34c0>
    buf68.mutations = ['buf67']
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.node.kernel = aten.copy_


op69: ExternKernelSchedulerNode(FallbackKernel)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: FallbackKernel
    buf69.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = torch.ops.aten._fft_c2c.default


op70: ExternKernelSchedulerNode(MultiOutput)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: MultiOutput
    buf70.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op70.node.kernel = None


op71: ExternKernelSchedulerNode(FallbackKernel)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: FallbackKernel
    buf71.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf71.aliases = ['buf70']
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op71.node.kernel = torch.ops.aten.view_as_real.default


op72: ExternKernelSchedulerNode(MultiOutput)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: MultiOutput
    buf72.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf72.aliases = ['buf71']
    buf72.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = None


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 49152}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 6291456}, None),
        MemoryDep('buf72', 2*c0, {c0: 6291456}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (49152, 128)
op73.sizes = ([49152], [128])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op73_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf73', get_index_2, getitem)
        return store_reduction
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 49152}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 6291456}, None),
        MemoryDep('buf72', 2*c0, {c0: 6291456}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (49152, 128)
op74.sizes = ([49152], [128])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op74_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_2, getitem_1)
        return store_reduction
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 49152}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 6291456}, None),
        MemoryDep('buf72', 2*c0, {c0: 6291456}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (49152, 128)
op75.sizes = ([49152], [128])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op75_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_2, getitem_2)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 8192}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 49152}, None),
        MemoryDep('buf74', c0, {c0: 49152}, None),
        MemoryDep('buf75', c0, {c0: 49152}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf76.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (8192, 6)
op76.sizes = ([8192], [6])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op76_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf75', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 8192}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 49152}, None),
        MemoryDep('buf74', c0, {c0: 49152}, None),
        MemoryDep('buf75', c0, {c0: 49152}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (8192, 6)
op77.sizes = ([8192], [6])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op77_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf75', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_3, getitem_1)
        return store_reduction
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 6291456}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 6291456}, None),
        MemoryDep('buf72', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf76', c0, {c0: 8192}, None),
        MemoryDep('buf77', c0, {c0: 8192}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg35_1', c1, {c0: 8192, c1: 768}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf79.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (6291456, 1)
op79.sizes = ([8192, 768], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op79_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf76', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf77', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg34_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg35_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf79', get_index_6, add_2, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 25165824}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 25165824}, None)]
op81.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 8192, c1: 3072}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (25165824, 1)
op81.sizes = ([8192, 3072], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op81_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf80', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf80', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg37_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf81', get_index_6, mul_5, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 8192}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 6291456}, None),
        MemoryDep('buf82', c0, {c0: 6291456}, None)]
op83.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 8192, c1: 768}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf83.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (8192, 768)
op83.sizes = ([8192], [768])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op83_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_3, getitem)
        return store_reduction
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 8192}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 6291456}, None),
        MemoryDep('buf82', c0, {c0: 6291456}, None)]
op84.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 8192, c1: 768}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (8192, 768)
op84.sizes = ([8192], [768])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op84_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, getitem_1)
        return store_reduction
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 6291456}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 6291456}, None),
        MemoryDep('buf82', c0, {c0: 6291456}, None),
        MemoryDep('buf83', c0, {c0: 8192}, None),
        MemoryDep('buf84', c0, {c0: 8192}, None)]
op86.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg40_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg41_1', c1, {c0: 8192, c1: 768}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (6291456, 1)
op86.sizes = ([8192, 768], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op86_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf83', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf84', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg40_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg41_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf86', get_index_7, add_3, None)
        return store
op86 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op87: NopKernelSchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op87.unmet_dependencies = []
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]


op88: ExternKernelSchedulerNode(InplaceCopyFallback)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: InplaceCopyFallback
    buf88.layout = <torch._inductor.ir.NoneLayout object at 0x7fe74970ca00>
    buf88.mutations = ['buf87']
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = aten.copy_


op89: ExternKernelSchedulerNode(FallbackKernel)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: FallbackKernel
    buf89.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = torch.ops.aten._fft_c2c.default


op90: ExternKernelSchedulerNode(MultiOutput)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: MultiOutput
    buf90.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op90.node.kernel = None


op91: ExternKernelSchedulerNode(FallbackKernel)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: FallbackKernel
    buf91.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf91.aliases = ['buf90']
    buf91.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op91.node.kernel = torch.ops.aten.view_as_real.default


op92: ExternKernelSchedulerNode(MultiOutput)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: MultiOutput
    buf92.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf92.aliases = ['buf91']
    buf92.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op92.node.kernel = None


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 49152}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 6291456}, None),
        MemoryDep('buf92', 2*c0, {c0: 6291456}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (49152, 128)
op93.sizes = ([49152], [128])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op93_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf93', get_index_2, getitem)
        return store_reduction
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 49152}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 6291456}, None),
        MemoryDep('buf92', 2*c0, {c0: 6291456}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (49152, 128)
op94.sizes = ([49152], [128])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op94_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_2, getitem_1)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 49152}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 6291456}, None),
        MemoryDep('buf92', 2*c0, {c0: 6291456}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (49152, 128)
op95.sizes = ([49152], [128])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op95_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_2, getitem_2)
        return store_reduction
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 8192}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 49152}, None),
        MemoryDep('buf94', c0, {c0: 49152}, None),
        MemoryDep('buf95', c0, {c0: 49152}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf96.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (8192, 6)
op96.sizes = ([8192], [6])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op96_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf95', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem)
        return store_reduction
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 8192}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 49152}, None),
        MemoryDep('buf94', c0, {c0: 49152}, None),
        MemoryDep('buf95', c0, {c0: 49152}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf97.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (8192, 6)
op97.sizes = ([8192], [6])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op97_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf95', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_3, getitem_1)
        return store_reduction
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 6291456}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 6291456}, None),
        MemoryDep('buf92', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf96', c0, {c0: 8192}, None),
        MemoryDep('buf97', c0, {c0: 8192}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg43_1', c1, {c0: 8192, c1: 768}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (6291456, 1)
op99.sizes = ([8192, 768], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op99_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf96', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf97', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg42_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg43_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf99', get_index_6, add_2, None)
        return store
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 25165824}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 25165824}, None)]
op101.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 8192, c1: 3072}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (25165824, 1)
op101.sizes = ([8192, 3072], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op101_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf100', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg45_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf100', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg45_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf101', get_index_6, mul_5, None)
        return store
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
    ]
]
op102.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 8192}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 6291456}, None),
        MemoryDep('buf99', c0, {c0: 6291456}, None)]
op103.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 8192, c1: 768}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf103.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (8192, 768)
op103.sizes = ([8192], [768])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op103_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf103', get_index_3, getitem)
        return store_reduction
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 8192}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 6291456}, None),
        MemoryDep('buf99', c0, {c0: 6291456}, None)]
op104.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 8192, c1: 768}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf104.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (8192, 768)
op104.sizes = ([8192], [768])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op104_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf104', get_index_3, getitem_1)
        return store_reduction
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 6291456}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 6291456}, None),
        MemoryDep('buf103', c0, {c0: 8192}, None),
        MemoryDep('buf104', c0, {c0: 8192}, None),
        MemoryDep('buf99', c0, {c0: 6291456}, None)]
op106.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (6291456, 1)
op106.sizes = ([8192, 768], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op106_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf103', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf104', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf106', get_index_7, add_3, None)
        return store
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op107: NopKernelSchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op107.unmet_dependencies = []
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]


op108: ExternKernelSchedulerNode(InplaceCopyFallback)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: InplaceCopyFallback
    buf108.layout = <torch._inductor.ir.NoneLayout object at 0x7fe749725ea0>
    buf108.mutations = ['buf107']
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = aten.copy_


op109: ExternKernelSchedulerNode(FallbackKernel)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: FallbackKernel
    buf109.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = torch.ops.aten._fft_c2c.default


op110: ExternKernelSchedulerNode(MultiOutput)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: MultiOutput
    buf110.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op110.node.kernel = None


op111: ExternKernelSchedulerNode(FallbackKernel)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: FallbackKernel
    buf111.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf111.aliases = ['buf110']
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op111.node.kernel = torch.ops.aten.view_as_real.default


op112: ExternKernelSchedulerNode(MultiOutput)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: MultiOutput
    buf112.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf112.aliases = ['buf111']
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = None


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 49152}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 6291456}, None),
        MemoryDep('buf112', 2*c0, {c0: 6291456}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (49152, 128)
op113.sizes = ([49152], [128])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op113_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_2, getitem)
        return store_reduction
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 49152}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 6291456}, None),
        MemoryDep('buf112', 2*c0, {c0: 6291456}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (49152, 128)
op114.sizes = ([49152], [128])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op114_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_2, getitem_1)
        return store_reduction
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 49152}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 6291456}, None),
        MemoryDep('buf112', 2*c0, {c0: 6291456}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (49152, 128)
op115.sizes = ([49152], [128])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op115_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_2, getitem_2)
        return store_reduction
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 8192}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 49152}, None),
        MemoryDep('buf114', c0, {c0: 49152}, None),
        MemoryDep('buf115', c0, {c0: 49152}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (8192, 6)
op116.sizes = ([8192], [6])
buf113_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op116_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 8192}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 49152}, None),
        MemoryDep('buf114', c0, {c0: 49152}, None),
        MemoryDep('buf115', c0, {c0: 49152}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (8192, 6)
op117.sizes = ([8192], [6])
buf113_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op117_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 6291456}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 6291456}, None),
        MemoryDep('buf112', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf116', c0, {c0: 8192}, None),
        MemoryDep('buf117', c0, {c0: 8192}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg51_1', c1, {c0: 8192, c1: 768}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf119.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (6291456, 1)
op119.sizes = ([8192, 768], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op119_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf116', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf117', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg50_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg51_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf119', get_index_6, add_2, None)
        return store
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 25165824}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 25165824}, None)]
op121.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 8192, c1: 3072}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (25165824, 1)
op121.sizes = ([8192, 3072], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op121_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg53_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf120', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg53_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf121', get_index_6, mul_5, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 8192}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 6291456}, None),
        MemoryDep('buf122', c0, {c0: 6291456}, None)]
op123.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf123.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (8192, 768)
op123.sizes = ([8192], [768])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op123_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_3, getitem)
        return store_reduction
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 8192}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 6291456}, None),
        MemoryDep('buf122', c0, {c0: 6291456}, None)]
op124.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (8192, 768)
op124.sizes = ([8192], [768])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op124_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf124', get_index_3, getitem_1)
        return store_reduction
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 6291456}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 6291456}, None),
        MemoryDep('buf122', c0, {c0: 6291456}, None),
        MemoryDep('buf123', c0, {c0: 8192}, None),
        MemoryDep('buf124', c0, {c0: 8192}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg56_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 8192, c1: 768}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (6291456, 1)
op126.sizes = ([8192, 768], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op126_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf123', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf124', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg56_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg57_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf126', get_index_7, add_3, None)
        return store
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op127: NopKernelSchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op127.unmet_dependencies = []
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]


op128: ExternKernelSchedulerNode(InplaceCopyFallback)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: InplaceCopyFallback
    buf128.layout = <torch._inductor.ir.NoneLayout object at 0x7fe74974b5b0>
    buf128.mutations = ['buf127']
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = aten.copy_


op129: ExternKernelSchedulerNode(FallbackKernel)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: FallbackKernel
    buf129.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = torch.ops.aten._fft_c2c.default


op130: ExternKernelSchedulerNode(MultiOutput)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: MultiOutput
    buf130.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf130.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
    ]
]
op130.node.kernel = None


op131: ExternKernelSchedulerNode(FallbackKernel)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: FallbackKernel
    buf131.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf131.aliases = ['buf130']
    buf131.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
    ]
]
op131.node.kernel = torch.ops.aten.view_as_real.default


op132: ExternKernelSchedulerNode(MultiOutput)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: MultiOutput
    buf132.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf132.aliases = ['buf131']
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = None


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 49152}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 6291456}, None),
        MemoryDep('buf132', 2*c0, {c0: 6291456}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (49152, 128)
op133.sizes = ([49152], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op133_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf133', get_index_2, getitem)
        return store_reduction
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 49152}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 6291456}, None),
        MemoryDep('buf132', 2*c0, {c0: 6291456}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (49152, 128)
op134.sizes = ([49152], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op134_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf134', get_index_2, getitem_1)
        return store_reduction
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 49152}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 6291456}, None),
        MemoryDep('buf132', 2*c0, {c0: 6291456}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (49152, 128)
op135.sizes = ([49152], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op135_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf135', get_index_2, getitem_2)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 8192}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 49152}, None),
        MemoryDep('buf134', c0, {c0: 49152}, None),
        MemoryDep('buf135', c0, {c0: 49152}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (8192, 6)
op136.sizes = ([8192], [6])
buf133_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op136_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf135', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf136', get_index_3, getitem)
        return store_reduction
op136 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 8192}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 49152}, None),
        MemoryDep('buf134', c0, {c0: 49152}, None),
        MemoryDep('buf135', c0, {c0: 49152}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (8192, 6)
op137.sizes = ([8192], [6])
buf133_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op137_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf135', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf137', get_index_3, getitem_1)
        return store_reduction
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 6291456}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 6291456}, None),
        MemoryDep('buf132', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf136', c0, {c0: 8192}, None),
        MemoryDep('buf137', c0, {c0: 8192}, None)]
op139.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg59_1', c1, {c0: 8192, c1: 768}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (6291456, 1)
op139.sizes = ([8192, 768], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op139_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf136', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf137', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg58_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg59_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf139', get_index_6, add_2, None)
        return store
op139 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.mm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 25165824}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 25165824}, None)]
op141.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 8192, c1: 3072}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (25165824, 1)
op141.sizes = ([8192, 3072], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op141_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg61_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf140', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg61_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf141', get_index_6, mul_5, None)
        return store
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 8192}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 6291456}, None),
        MemoryDep('buf142', c0, {c0: 6291456}, None)]
op143.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 8192, c1: 768}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (8192, 768)
op143.sizes = ([8192], [768])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op143_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 8192}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 6291456}, None),
        MemoryDep('buf142', c0, {c0: 6291456}, None)]
op144.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 8192, c1: 768}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (8192, 768)
op144.sizes = ([8192], [768])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op144_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem_1)
        return store_reduction
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 6291456}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 6291456}, None),
        MemoryDep('buf142', c0, {c0: 6291456}, None),
        MemoryDep('buf143', c0, {c0: 8192}, None),
        MemoryDep('buf144', c0, {c0: 8192}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg64_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg65_1', c1, {c0: 8192, c1: 768}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (6291456, 1)
op146.sizes = ([8192, 768], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op146_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf143', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf144', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf146', get_index_7, add_3, None)
        return store
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op147: NopKernelSchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op147.unmet_dependencies = []
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]


op148: ExternKernelSchedulerNode(InplaceCopyFallback)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None), StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: InplaceCopyFallback
    buf148.layout = <torch._inductor.ir.NoneLayout object at 0x7fe749778bb0>
    buf148.mutations = ['buf147']
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = aten.copy_


op149: ExternKernelSchedulerNode(FallbackKernel)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: FallbackKernel
    buf149.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = torch.ops.aten._fft_c2c.default


op150: ExternKernelSchedulerNode(MultiOutput)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: MultiOutput
    buf150.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf150.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
    ]
]
op150.node.kernel = None


op151: ExternKernelSchedulerNode(FallbackKernel)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: FallbackKernel
    buf151.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf151.aliases = ['buf150']
    buf151.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
    ]
]
op151.node.kernel = torch.ops.aten.view_as_real.default


op152: ExternKernelSchedulerNode(MultiOutput)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: MultiOutput
    buf152.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf152.aliases = ['buf151']
    buf152.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
    ]
]
op152.node.kernel = None


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 49152}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 6291456}, None),
        MemoryDep('buf152', 2*c0, {c0: 6291456}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (49152, 128)
op153.sizes = ([49152], [128])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op153_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf153', get_index_2, getitem)
        return store_reduction
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 49152}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 6291456}, None),
        MemoryDep('buf152', 2*c0, {c0: 6291456}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (49152, 128)
op154.sizes = ([49152], [128])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op154_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_2, getitem_1)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 49152}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 6291456}, None),
        MemoryDep('buf152', 2*c0, {c0: 6291456}, None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (49152, 128)
op155.sizes = ([49152], [128])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op155_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_2, getitem_2)
        return store_reduction
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 8192}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 49152}, None),
        MemoryDep('buf154', c0, {c0: 49152}, None),
        MemoryDep('buf155', c0, {c0: 49152}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf156.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (8192, 6)
op156.sizes = ([8192], [6])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op156_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf154', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf155', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_3, getitem)
        return store_reduction
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 8192}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 49152}, None),
        MemoryDep('buf154', c0, {c0: 49152}, None),
        MemoryDep('buf155', c0, {c0: 49152}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf157.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (8192, 6)
op157.sizes = ([8192], [6])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op157_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf154', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf155', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_3, getitem_1)
        return store_reduction
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 6291456}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 6291456}, None),
        MemoryDep('buf152', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf156', c0, {c0: 8192}, None),
        MemoryDep('buf157', c0, {c0: 8192}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg67_1', c1, {c0: 8192, c1: 768}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (6291456, 1)
op159.sizes = ([8192, 768], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf157_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op159_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf156', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf157', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg66_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg67_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf159', get_index_6, add_2, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 25165824}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 25165824}, None)]
op161.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 8192, c1: 3072}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (25165824, 1)
op161.sizes = ([8192, 3072], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op161_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf160', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg69_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf161', get_index_6, mul_5, None)
        return store
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 8192}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 6291456}, None),
        MemoryDep('buf162', c0, {c0: 6291456}, None)]
op163.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 8192, c1: 768}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (8192, 768)
op163.sizes = ([8192], [768])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op163_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem)
        return store_reduction
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 8192}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 6291456}, None),
        MemoryDep('buf162', c0, {c0: 6291456}, None)]
op164.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 8192, c1: 768}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (8192, 768)
op164.sizes = ([8192], [768])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op164_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem_1)
        return store_reduction
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 6291456}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 6291456}, None),
        MemoryDep('buf162', c0, {c0: 6291456}, None),
        MemoryDep('buf163', c0, {c0: 8192}, None),
        MemoryDep('buf164', c0, {c0: 8192}, None)]
op166.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg72_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg73_1', c1, {c0: 8192, c1: 768}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (6291456, 1)
op166.sizes = ([8192, 768], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op166_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf163', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf164', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg72_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg73_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf166', get_index_7, add_3, None)
        return store
op166 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op167: NopKernelSchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op167.unmet_dependencies = []
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]


op168: ExternKernelSchedulerNode(InplaceCopyFallback)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf166', mode=None), StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: InplaceCopyFallback
    buf168.layout = <torch._inductor.ir.NoneLayout object at 0x7fe749792170>
    buf168.mutations = ['buf167']
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.node.kernel = aten.copy_


op169: ExternKernelSchedulerNode(FallbackKernel)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: FallbackKernel
    buf169.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = torch.ops.aten._fft_c2c.default


op170: ExternKernelSchedulerNode(MultiOutput)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: MultiOutput
    buf170.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op170.node.kernel = None


op171: ExternKernelSchedulerNode(FallbackKernel)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: FallbackKernel
    buf171.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf171.aliases = ['buf170']
    buf171.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op171.node.kernel = torch.ops.aten.view_as_real.default


op172: ExternKernelSchedulerNode(MultiOutput)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: MultiOutput
    buf172.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf172.aliases = ['buf171']
    buf172.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op172.node.kernel = None


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 49152}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 6291456}, None),
        MemoryDep('buf172', 2*c0, {c0: 6291456}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (49152, 128)
op173.sizes = ([49152], [128])
buf166_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op173_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf173', get_index_2, getitem)
        return store_reduction
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 49152}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 6291456}, None),
        MemoryDep('buf172', 2*c0, {c0: 6291456}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (49152, 128)
op174.sizes = ([49152], [128])
buf166_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op174_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_2, getitem_1)
        return store_reduction
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 49152}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 6291456}, None),
        MemoryDep('buf172', 2*c0, {c0: 6291456}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (49152, 128)
op175.sizes = ([49152], [128])
buf166_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op175_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_2, getitem_2)
        return store_reduction
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 8192}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 49152}, None),
        MemoryDep('buf174', c0, {c0: 49152}, None),
        MemoryDep('buf175', c0, {c0: 49152}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf176.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (8192, 6)
op176.sizes = ([8192], [6])
buf173_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op176_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf175', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem)
        return store_reduction
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 8192}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 49152}, None),
        MemoryDep('buf174', c0, {c0: 49152}, None),
        MemoryDep('buf175', c0, {c0: 49152}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (8192, 6)
op177.sizes = ([8192], [6])
buf173_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op177_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf175', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf177', get_index_3, getitem_1)
        return store_reduction
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 6291456}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 6291456}, None),
        MemoryDep('buf172', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf176', c0, {c0: 8192}, None),
        MemoryDep('buf177', c0, {c0: 8192}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 8192, c1: 768}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf179.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (6291456, 1)
op179.sizes = ([8192, 768], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op179_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf176', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf177', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg74_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg75_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf179', get_index_6, add_2, None)
        return store
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 25165824}, None)]
op181.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 25165824}, None)]
op181.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 8192, c1: 3072}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (25165824, 1)
op181.sizes = ([8192, 3072], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op181_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg77_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf180', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg77_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf181', get_index_6, mul_5, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
    ]
]
op182.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 8192}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 6291456}, None),
        MemoryDep('buf182', c0, {c0: 6291456}, None)]
op183.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 8192, c1: 768}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf183.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (8192, 768)
op183.sizes = ([8192], [768])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op183_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf183', get_index_3, getitem)
        return store_reduction
op183 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 8192}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 6291456}, None),
        MemoryDep('buf182', c0, {c0: 6291456}, None)]
op184.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 8192, c1: 768}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf184.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (8192, 768)
op184.sizes = ([8192], [768])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op184_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem_1)
        return store_reduction
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 6291456}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 6291456}, None),
        MemoryDep('buf182', c0, {c0: 6291456}, None),
        MemoryDep('buf183', c0, {c0: 8192}, None),
        MemoryDep('buf184', c0, {c0: 8192}, None)]
op186.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg80_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf186.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
    ]
]
op186.group.device = cuda:0
op186.group.iteration = (6291456, 1)
op186.sizes = ([8192, 768], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op186_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf179', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf183', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf184', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf186', get_index_7, add_3, None)
        return store
op186 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op187: NopKernelSchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op187.unmet_dependencies = []
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]


op188: ExternKernelSchedulerNode(InplaceCopyFallback)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf186', mode=None), StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: InplaceCopyFallback
    buf188.layout = <torch._inductor.ir.NoneLayout object at 0x7fe7497b3670>
    buf188.mutations = ['buf187']
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = aten.copy_


op189: ExternKernelSchedulerNode(FallbackKernel)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: FallbackKernel
    buf189.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = torch.ops.aten._fft_c2c.default


op190: ExternKernelSchedulerNode(MultiOutput)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: MultiOutput
    buf190.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op190.node.kernel = None


op191: ExternKernelSchedulerNode(FallbackKernel)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: FallbackKernel
    buf191.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf191.aliases = ['buf190']
    buf191.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op191.node.kernel = torch.ops.aten.view_as_real.default


op192: ExternKernelSchedulerNode(MultiOutput)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: MultiOutput
    buf192.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf192.aliases = ['buf191']
    buf192.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op192.node.kernel = None


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 49152}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 6291456}, None),
        MemoryDep('buf192', 2*c0, {c0: 6291456}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (49152, 128)
op193.sizes = ([49152], [128])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op193_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf193', get_index_2, getitem)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 49152}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 6291456}, None),
        MemoryDep('buf192', 2*c0, {c0: 6291456}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (49152, 128)
op194.sizes = ([49152], [128])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op194_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_2, getitem_1)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 49152}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 6291456}, None),
        MemoryDep('buf192', 2*c0, {c0: 6291456}, None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (49152, 128)
op195.sizes = ([49152], [128])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op195_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_2, getitem_2)
        return store_reduction
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 8192}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 49152}, None),
        MemoryDep('buf194', c0, {c0: 49152}, None),
        MemoryDep('buf195', c0, {c0: 49152}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (8192, 6)
op196.sizes = ([8192], [6])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op196_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf196', get_index_3, getitem)
        return store_reduction
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 8192}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 49152}, None),
        MemoryDep('buf194', c0, {c0: 49152}, None),
        MemoryDep('buf195', c0, {c0: 49152}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (8192, 6)
op197.sizes = ([8192], [6])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op197_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf197', get_index_3, getitem_1)
        return store_reduction
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 6291456}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 6291456}, None),
        MemoryDep('buf192', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf196', c0, {c0: 8192}, None),
        MemoryDep('buf197', c0, {c0: 8192}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg83_1', c1, {c0: 8192, c1: 768}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (6291456, 1)
op199.sizes = ([8192, 768], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op199_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf196', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf197', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg82_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg83_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf199', get_index_6, add_2, None)
        return store
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 25165824}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 25165824}, None)]
op201.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 8192, c1: 3072}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (25165824, 1)
op201.sizes = ([8192, 3072], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op201_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf200', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf200', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg85_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf201', get_index_6, mul_5, None)
        return store
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 8192}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 6291456}, None),
        MemoryDep('buf202', c0, {c0: 6291456}, None)]
op203.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 8192, c1: 768}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (8192, 768)
op203.sizes = ([8192], [768])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op203_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_3, getitem)
        return store_reduction
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 8192}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 6291456}, None),
        MemoryDep('buf202', c0, {c0: 6291456}, None)]
op204.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 8192, c1: 768}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (8192, 768)
op204.sizes = ([8192], [768])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op204_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf204', get_index_3, getitem_1)
        return store_reduction
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 6291456}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 6291456}, None),
        MemoryDep('buf202', c0, {c0: 6291456}, None),
        MemoryDep('buf203', c0, {c0: 8192}, None),
        MemoryDep('buf204', c0, {c0: 8192}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg88_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 8192, c1: 768}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (6291456, 1)
op206.sizes = ([8192, 768], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op206_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf203', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf204', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg88_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg89_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf206', get_index_7, add_3, None)
        return store
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op207: NopKernelSchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op207.unmet_dependencies = []
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]


op208: ExternKernelSchedulerNode(InplaceCopyFallback)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: InplaceCopyFallback
    buf208.layout = <torch._inductor.ir.NoneLayout object at 0x7fe7497d4d30>
    buf208.mutations = ['buf207']
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = aten.copy_


op209: ExternKernelSchedulerNode(FallbackKernel)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: FallbackKernel
    buf209.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = torch.ops.aten._fft_c2c.default


op210: ExternKernelSchedulerNode(MultiOutput)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: MultiOutput
    buf210.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf210.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
    ]
]
op210.node.kernel = None


op211: ExternKernelSchedulerNode(FallbackKernel)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: FallbackKernel
    buf211.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf211.aliases = ['buf210']
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
    ]
]
op211.node.kernel = torch.ops.aten.view_as_real.default


op212: ExternKernelSchedulerNode(MultiOutput)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: MultiOutput
    buf212.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf212.aliases = ['buf211']
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
    ]
]
op212.node.kernel = None


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 49152}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 6291456}, None),
        MemoryDep('buf212', 2*c0, {c0: 6291456}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (49152, 128)
op213.sizes = ([49152], [128])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op213_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_2, getitem)
        return store_reduction
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 49152}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 6291456}, None),
        MemoryDep('buf212', 2*c0, {c0: 6291456}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (49152, 128)
op214.sizes = ([49152], [128])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op214_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf214', get_index_2, getitem_1)
        return store_reduction
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 49152}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 6291456}, None),
        MemoryDep('buf212', 2*c0, {c0: 6291456}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (49152, 128)
op215.sizes = ([49152], [128])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op215_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_2, getitem_2)
        return store_reduction
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 8192}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 49152}, None),
        MemoryDep('buf214', c0, {c0: 49152}, None),
        MemoryDep('buf215', c0, {c0: 49152}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf216.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (8192, 6)
op216.sizes = ([8192], [6])
buf213_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op216_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem)
        return store_reduction
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 8192}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 49152}, None),
        MemoryDep('buf214', c0, {c0: 49152}, None),
        MemoryDep('buf215', c0, {c0: 49152}, None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (8192, 6)
op217.sizes = ([8192], [6])
buf213_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op217_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf217', get_index_3, getitem_1)
        return store_reduction
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 6291456}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 6291456}, None),
        MemoryDep('buf212', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf216', c0, {c0: 8192}, None),
        MemoryDep('buf217', c0, {c0: 8192}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg91_1', c1, {c0: 8192, c1: 768}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (6291456, 1)
op219.sizes = ([8192, 768], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op219_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf216', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf217', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg90_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg91_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf219', get_index_6, add_2, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 25165824}, None)]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 25165824}, None)]
op221.met_dependencies = [MemoryDep('arg93_1', c1, {c0: 8192, c1: 3072}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (25165824, 1)
op221.sizes = ([8192, 3072], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op221_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf220', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf220', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg93_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf221', get_index_6, mul_5, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf222.users = [
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
    ]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 8192}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 6291456}, None),
        MemoryDep('buf222', c0, {c0: 6291456}, None)]
op223.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 8192, c1: 768}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (8192, 768)
op223.sizes = ([8192], [768])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op223_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem)
        return store_reduction
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 8192}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 6291456}, None),
        MemoryDep('buf222', c0, {c0: 6291456}, None)]
op224.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 8192, c1: 768}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf224.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (8192, 768)
op224.sizes = ([8192], [768])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op224_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf224', get_index_3, getitem_1)
        return store_reduction
op224 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 6291456}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 6291456}, None),
        MemoryDep('buf222', c0, {c0: 6291456}, None),
        MemoryDep('buf223', c0, {c0: 8192}, None),
        MemoryDep('buf224', c0, {c0: 8192}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 8192, c1: 768}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf226.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (6291456, 1)
op226.sizes = ([8192, 768], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op226_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf223', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf224', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf226', get_index_7, add_3, None)
        return store
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op227: NopKernelSchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 393216*d0 + 768*d1 + d2, {d0: 0, d1: 0, d2: 0}, None)]
op227.unmet_dependencies = []
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]


op228: ExternKernelSchedulerNode(InplaceCopyFallback)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf226', mode=None), StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: InplaceCopyFallback
    buf228.layout = <torch._inductor.ir.NoneLayout object at 0x7fe7497f6320>
    buf228.mutations = ['buf227']
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.node.kernel = aten.copy_


op229: ExternKernelSchedulerNode(FallbackKernel)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: FallbackKernel
    buf229.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = torch.ops.aten._fft_c2c.default


op230: ExternKernelSchedulerNode(MultiOutput)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: MultiOutput
    buf230.layout = FixedLayout('cuda', torch.complex64, size=[16, 512, 768], stride=[393216, 768, 1])
    buf230.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = None


op231: ExternKernelSchedulerNode(FallbackKernel)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: FallbackKernel
    buf231.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf231.aliases = ['buf230']
    buf231.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op231.node.kernel = torch.ops.aten.view_as_real.default


op232: ExternKernelSchedulerNode(MultiOutput)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: MultiOutput
    buf232.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
    buf232.aliases = ['buf231']
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op232.node.kernel = None


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 49152}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 6291456}, None),
        MemoryDep('buf232', 2*c0, {c0: 6291456}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (49152, 128)
op233.sizes = ([49152], [128])
buf226_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op233_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_2, getitem)
        return store_reduction
op233 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp4, None)


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 49152}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 6291456}, None),
        MemoryDep('buf232', 2*c0, {c0: 6291456}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (49152, 128)
op234.sizes = ([49152], [128])
buf226_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op234_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_2, getitem_1)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 49152}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 6291456}, None),
        MemoryDep('buf232', 2*c0, {c0: 6291456}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (49152, 128)
op235.sizes = ([49152], [128])
buf226_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
class op235_loop_body:
    var_ranges = {z0: 49152, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + 2*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_2, getitem_2)
        return store_reduction
op235 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.OUTER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp4_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp4_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + ((2*r1) + (256*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp4_mean_next, tmp4_m2_next, tmp4_weight_next = triton_helpers.welford_reduce(
                tmp3, tmp4_mean, tmp4_m2, tmp4_weight, roffset == 0
            )
            tmp4_mean = tl.where(rmask, tmp4_mean_next, tmp4_mean)
            tmp4_m2 = tl.where(rmask, tmp4_m2_next, tmp4_m2)
            tmp4_weight = tl.where(rmask, tmp4_weight_next, tmp4_weight)
        tmp4_tmp, tmp5_tmp, tmp6_tmp = triton_helpers.welford(
            tmp4_mean, tmp4_m2, tmp4_weight, 1
        )
        tmp4 = tmp4_tmp[:, None]
        tmp5 = tmp5_tmp[:, None]
        tmp6 = tmp6_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 8192}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 49152}, None),
        MemoryDep('buf234', c0, {c0: 49152}, None),
        MemoryDep('buf235', c0, {c0: 49152}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (8192, 6)
op236.sizes = ([8192], [6])
buf233_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op236_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf234', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf235', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem)
        return store_reduction
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp13, None)


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 8192}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 49152}, None),
        MemoryDep('buf234', c0, {c0: 49152}, None),
        MemoryDep('buf235', c0, {c0: 49152}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (8192, 6)
op237.sizes = ([8192], [6])
buf233_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1, 6], stride=[3072, 6, 49152, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op237_loop_body:
    var_ranges = {z0: 8192, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf234', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf235', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf237', get_index_3, getitem_1)
        return store_reduction
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 8],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 6
        RBLOCK: tl.constexpr = 8
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1 + (6*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (6*x0)), rmask, other=0.0)
        tmp3 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp5 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp7 = tl.where(rmask, tmp3, 0)
        tmp8 = tl.where(rmask, tmp4, 0)
        tmp9 = tl.where(rmask, tmp5, 0)
        tmp10, tmp11, tmp12 = triton_helpers.welford(tmp7, tmp8, tmp9, 1)
        tmp13 = tmp10[:, None]
        tmp14 = tmp11[:, None]
        tmp15 = tmp12[:, None]
        tl.store(out_ptr0 + (x0), tmp14, None)


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 6291456}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 6291456}, None),
        MemoryDep('buf232', 2*c0, {c0: 6291456}, None),
        MemoryDep('buf236', c0, {c0: 8192}, None),
        MemoryDep('buf237', c0, {c0: 8192}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg98_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg99_1', c1, {c0: 8192, c1: 768}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (6291456, 1)
op239.sizes = ([8192, 768], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768, 2], stride=[786432, 1536, 2, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op239_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 1536*z0 + 2*z1
    index2 = z0
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf236', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf237', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg98_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg99_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf239', get_index_6, add_2, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (2*x2), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 768.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 25165824}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 25165824}, None)]
op241.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 8192, c1: 3072}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (25165824, 1)
op241.sizes = ([8192, 3072], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op241_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg101_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf240', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg101_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf241', get_index_6, mul_5, None)
        return store
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tl.store(in_out_ptr0 + (x2), tmp15, None)


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
    ]
]
op242.node.kernel = extern_kernels.mm


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 8192}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 6291456}, None),
        MemoryDep('buf242', c0, {c0: 6291456}, None)]
op243.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (8192, 768)
op243.sizes = ([8192], [768])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op243_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_3, getitem)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 8192}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 6291456}, None),
        MemoryDep('buf242', c0, {c0: 6291456}, None)]
op244.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (8192, 768)
op244.sizes = ([8192], [768])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op244_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, getitem_1)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 6291456}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 6291456}, None),
        MemoryDep('buf242', c0, {c0: 6291456}, None),
        MemoryDep('buf243', c0, {c0: 8192}, None),
        MemoryDep('buf244', c0, {c0: 8192}, None)]
op246.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg104_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg105_1', c1, {c0: 8192, c1: 768}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (6291456, 1)
op246.sizes = ([8192, 768], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op246_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf243', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf244', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg104_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg105_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf246', get_index_7, add_3, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 8192}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 6291456}, None)]
op248.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 8192, c1: 768}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf248.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (8192, 768)
op248.sizes = ([8192], [768])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op248_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf247', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg109_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_5)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf248', get_index_6, getitem)
        return store_reduction
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tmp16 = tl.broadcast_to(tmp15, [RBLOCK])
        tmp18 = tl.where(rmask, tmp16, 0)
        tmp19 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp21 = tl.where(rmask, tmp19, 0)
        tmp22 = triton_helpers.promote_to_tensor(tl.sum(tmp21, 0))
        tmp23 = tl.full([1], 768, tl.int32)
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp22 / tmp24
        tmp26 = tmp16 - tmp25
        tmp27 = tmp26 * tmp26
        tmp28 = tl.broadcast_to(tmp27, [RBLOCK])
        tmp30 = tl.where(rmask, tmp28, 0)
        tmp31 = triton_helpers.promote_to_tensor(tl.sum(tmp30, 0))
        tl.store(out_ptr0 + (x0), tmp25, None)


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 8192}, None)]
op249.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 6291456}, None)]
op249.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 8192, c1: 768}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf249.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (8192, 768)
op249.sizes = ([8192], [768])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op249_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf247', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg109_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_5)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf249', get_index_6, getitem_1)
        return store_reduction
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tmp16 = tl.broadcast_to(tmp15, [RBLOCK])
        tmp18 = tl.where(rmask, tmp16, 0)
        tmp19 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp21 = tl.where(rmask, tmp19, 0)
        tmp22 = triton_helpers.promote_to_tensor(tl.sum(tmp21, 0))
        tmp23 = tl.full([1], 768, tl.int32)
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp22 / tmp24
        tmp26 = tmp16 - tmp25
        tmp27 = tmp26 * tmp26
        tmp28 = tl.broadcast_to(tmp27, [RBLOCK])
        tmp30 = tl.where(rmask, tmp28, 0)
        tmp31 = triton_helpers.promote_to_tensor(tl.sum(tmp30, 0))
        tl.store(out_ptr0 + (x0), tmp31, None)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 6291456}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 6291456}, None),
        MemoryDep('buf248', c0, {c0: 8192}, None),
        MemoryDep('buf249', c0, {c0: 8192}, None)]
op251.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg110_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg111_1', c1, {c0: 8192, c1: 768}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (6291456, 1)
op251.sizes = ([8192, 768], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op251_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf247', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg109_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf248', get_index_6)
        sub = ops.sub(mul_5, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf249', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-12, torch.float32)
        add_5 = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add_5)
        mul_6 = ops.mul(sub, rsqrt)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg110_1', get_index_8)
        mul_7 = ops.mul(mul_6, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg111_1', get_index_9)
        add_6 = ops.add(mul_7, load_9)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf251', get_index_10, add_6, None)
        return store
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp18 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = tmp2 * tmp2
        tmp6 = tmp5 * tmp2
        tmp7 = 0.044715
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = 0.7978845608028654
        tmp11 = tmp9 * tmp10
        tmp12 = libdevice.tanh(tmp11)
        tmp13 = 1.0
        tmp14 = tmp12 + tmp13
        tmp15 = tmp4 * tmp14
        tmp17 = tmp15 - tmp16
        tmp19 = 768.0
        tmp20 = tmp18 / tmp19
        tmp21 = 1e-12
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp17 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr0 + (x2), tmp28, None)


op252: ExternKernelSchedulerNode(ExternKernelOut)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = [StarDep(name='buf251', mode=None)]
op252.met_dependencies = [StarDep(name='arg112_1', mode=None), StarDep(name='arg3_1', mode=None)]
op252.outputs = [
    buf252: ExternKernelOut
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8192, 32000], stride=[32000, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op252.node.kernel = extern_kernels.addmm


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 8192}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 262144000}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (8192, 32000)
op253.sizes = ([8192], [32000])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8192, 32000], stride=[32000, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
class op253_loop_body:
    var_ranges = {z0: 8192, z1: 32000}
    index0 = 32000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, reduction)
        return store_reduction
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[8192, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 32000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32000*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 8192}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 262144000}, None),
        MemoryDep('buf253', c0, {c0: 8192}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (8192, 32000)
op254.sizes = ([8192], [32000])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8192, 32000], stride=[32000, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
class op254_loop_body:
    var_ranges = {z0: 8192, z1: 32000}
    index0 = 32000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_2, reduction)
        return store_reduction
op254 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[8192, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 32000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32000*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', 0, {}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf252', 32000*c0 + tmp8, {c0: 8192}, None),
        MemoryDep('buf253', c0, {c0: 8192}, None),
        MemoryDep('buf254', c0, {c0: 8192}, None)]
op255.met_dependencies = [MemoryDep('arg113_1', c0, {c0: 8192}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (1, 8192)
op255.sizes = ([], [8192])
arg113_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8192, 32000], stride=[32000, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
buf255_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op255_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    index1 = indirect0 + 32000*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg113_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg113_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg113_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf252', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf253', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf254', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_6, reduction)
        return store_reduction
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 32000, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 32000)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 32000")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (32000*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', 0, {}, None)]
op256.unmet_dependencies = []
op256.met_dependencies = [MemoryDep('arg113_1', c0, {c0: 8192}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (1, 8192)
op256.sizes = ([], [8192])
arg113_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op256_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg113_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_1, reduction)
        return store_reduction
op256 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', 0, {}, None)]
op257.unmet_dependencies = [MemoryDep('buf255', 0, {}, None), MemoryDep('buf256', 0, {}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1, 1)
op257.sizes = ([], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf256_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf257_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op257_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf256', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf257', get_index_2, truediv, None)
        return store
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)



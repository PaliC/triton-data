op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 6422528}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 6422528}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg5_1', c1, {c0: 8, c1: 64}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (6422528, 1)
op1.sizes = ([8, 64, 12544], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 12544}
    index0 = 802816*z0 + 12544*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1', get_index_5, relu, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 6422528}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 6422528}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 8, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (6422528, 1)
op3.sizes = ([8, 64, 12544], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 12544}
    index0 = 802816*z0 + 12544*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelAlloc)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelAlloc
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.node.kernel = extern_kernels.convolution


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 6422528}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 6422528}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 64}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (6422528, 1)
op5.sizes = ([8, 64, 12544], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 12544, 112, 1])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 12544}
    index0 = 802816*z0 + 12544*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, relu, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op6.node.kernel = extern_kernels.convolution


op7_op8_op9: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op7_op8_op9.writes = 
    [   MemoryDep('buf7', c0, {c0: 12544}, None),
        MemoryDep('buf8', c0, {c0: 12544}, None),
        MemoryDep('buf9', c0, {c0: 12544}, None)]
op7_op8_op9.unmet_dependencies = [MemoryDep('buf6', 75264*c0 + c1 + 784*c2, {c0: 16, c1: 784, c2: 96}, None)]
op7_op8_op9.met_dependencies = [MemoryDep('arg17_1', 96*c1 + c3, {c0: 8, c1: 2, c2: 784, c3: 96}, None)]
op7_op8_op9.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op7_op8_op9.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 12544}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', 75264*c0 + c1 + 784*c2, {c0: 16, c1: 784, c2: 96}, None)]
op7.met_dependencies = [MemoryDep('arg17_1', 96*c1 + c3, {c0: 8, c1: 2, c2: 784, c3: 96}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (12544, 96)
op7.sizes = ([8, 2, 784], [96])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 784, z3: 96}
    index0 = 150528*z0 + 75264*z1 + z2 + 784*z3
    index1 = 96*z1 + z3
    index2 = 1568*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf7', get_index_2, getitem)
        return store_reduction
op7_op8_op9.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 12544}, None)]
op8.unmet_dependencies = [MemoryDep('buf6', 75264*c0 + c1 + 784*c2, {c0: 16, c1: 784, c2: 96}, None)]
op8.met_dependencies = [MemoryDep('arg17_1', 96*c1 + c3, {c0: 8, c1: 2, c2: 784, c3: 96}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (12544, 96)
op8.sizes = ([8, 2, 784], [96])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
class op8_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 784, z3: 96}
    index0 = 150528*z0 + 75264*z1 + z2 + 784*z3
    index1 = 96*z1 + z3
    index2 = 1568*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf8', get_index_2, getitem_1)
        return store_reduction
op7_op8_op9.snodes[2] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 12544}, None)]
op9.unmet_dependencies = [MemoryDep('buf6', 75264*c0 + c1 + 784*c2, {c0: 16, c1: 784, c2: 96}, None)]
op9.met_dependencies = [MemoryDep('arg17_1', 96*c1 + c3, {c0: 8, c1: 2, c2: 784, c3: 96}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (12544, 96)
op9.sizes = ([8, 2, 784], [96])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
class op9_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 784, z3: 96}
    index0 = 150528*z0 + 75264*z1 + z2 + 784*z3
    index1 = 96*z1 + z3
    index2 = 1568*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf9', get_index_2, getitem_2)
        return store_reduction


op10_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op10_op11.writes = 
    [   MemoryDep('buf10', c0, {c0: 6272}, None),
        MemoryDep('buf11', c0, {c0: 6272}, None)]
op10_op11.unmet_dependencies = 
    [   MemoryDep('buf7', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None),
        MemoryDep('buf8', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None),
        MemoryDep('buf9', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None)]
op10_op11.met_dependencies = []
op10_op11.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf11.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10_op11.snodes[0] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 6272}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf7', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None),
        MemoryDep('buf8', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None),
        MemoryDep('buf9', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (6272, 2)
op10.sizes = ([8, 784], [2])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 2}
    index0 = 1568*z0 + z1 + 784*z2
    index1 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf9', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_3, getitem)
        return store_reduction
op10_op11.snodes[1] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 6272}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf7', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None),
        MemoryDep('buf8', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None),
        MemoryDep('buf9', 1568*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 2}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf11.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (6272, 2)
op11.sizes = ([8, 784], [2])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 28, 1, 12544, 784])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 2}
    index0 = 1568*z0 + z1 + 784*z2
    index1 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf9', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf11', get_index_3, getitem_1)
        return store_reduction


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 1204224}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf10', 784*c0 + c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf11', 784*c0 + c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf6', c0, {c0: 1204224}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg18_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg19_1', c1, {c0: 8, c1: 192}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (1204224, 1)
op13.sizes = ([8, 192, 784], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z1
    index2 = 784*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf10', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf11', get_index_3)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg18_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg19_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf13', get_index_6, add_2, None)
        return store


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 37632*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 196}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf13', 56*c0 + 2*c1 + 1, {c0: 21504, c1: 14}, None),
        MemoryDep('buf13', 56*c0 + 2*c1 + 28, {c0: 21504, c1: 14}, None),
        MemoryDep('buf13', 56*c0 + 2*c1 + 29, {c0: 21504, c1: 14}, None),
        MemoryDep('buf13', 56*c0 + 2*c1, {c0: 21504, c1: 14}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (301056, 1)
op14.sizes = ([8, 192, 14, 14], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 14, z3: 14}
    index0 = 150528*z0 + 784*z1 + 56*z2 + 2*z3
    index1 = 150528*z0 + 784*z1 + 56*z2 + 2*z3 + 1
    index2 = 150528*z0 + 784*z1 + 56*z2 + 2*z3 + 28
    index3 = 150528*z0 + 784*z1 + 56*z2 + 2*z3 + 29
    index4 = 37632*z0 + z1 + 2688*z2 + 192*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf13', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf13', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf13', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf14', get_index_4, mul, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op17_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op16_op17_op20.writes = 
    [   MemoryDep('buf16', c0, {c0: 84672}, None),
        MemoryDep('buf17', c0, {c0: 84672}, None),
        MemoryDep('buf20', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op16_op17_op20.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 762048}, None)]
op16_op17_op20.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 1568, c1: 486}, None)]
op16_op17_op20.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op16_op17_op20.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 84672}, None)]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 762048}, None)]
op16.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 1568, c1: 486}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (84672, 9)
op16.sizes = ([1568, 54], [9])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op16_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_2, reduction)
        return store_reduction
op16_op17_op20.snodes[1] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 84672}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 762048}, None),
        MemoryDep('buf16', c0, {c0: 84672}, None)]
op17.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 1568, c1: 486}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (84672, 9)
op17.sizes = ([1568, 54], [9])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op17_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf16', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, reduction)
        return store_reduction
op16_op17_op20.snodes[2] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [   MemoryDep('buf20', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 762048}, None),
        MemoryDep('buf16', c0, {c0: 84672}, None),
        MemoryDep('buf17', c0, {c0: 84672}, None)]
op20.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 1568, c1: 486}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (762048, 1)
op20.sizes = ([8, 196, 6, 9, 9], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 9, z4: 9}
    index0 = 95256*z0 + 486*z1 + 81*z2 + 9*z3 + z4
    index1 = 81*z2 + 9*z3 + z4
    index2 = 10584*z0 + 54*z1 + 9*z2 + z3
    index3 = 95256*z0 + 81*z1 + 15876*z2 + 9*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf16', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf17', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf20', get_index_4, truediv, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 1204224}, None)]
op18.unmet_dependencies = [   MemoryDep('buf13', 784*c0 + 150528*((c1//784)) + ModularIndexing(c1, 1, 784), {c0: 192, c1: 6272}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[1, 6272])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (1204224, 1)
op18.sizes = ([192, 6272], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 28, 1, 784])
buf18_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[1, 6272])
class op18_loop_body:
    var_ranges = {z0: 192, z1: 6272}
    index0 = 784*z0 + 150528*((z1//784)) + ModularIndexing(z1, 1, 784)
    index1 = 6272*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf18', get_index_1, load, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 2709504}, None)]
op21.unmet_dependencies = [   MemoryDep('buf19', 150528*c0 + 32*c1 + c4 + 10752*((c2//14)) + 5376*((c3//3)) + 384*ModularIndexing(c2, 1, 14) + 192*ModularIndexing(c3, 1, 3) - 5568, {c0: 8, c1: 6, c2: 196, c3: 9, c4: 32}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2709504, 1)
op21.sizes = ([8, 6, 196, 9, 32], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 9, z4: 32}
    index0 = 2*((z2//14)) + (z3//3)
    index1 = 30
    index2 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3)
    index3 = 2*((z2//14)) + (z3//3) - 1
    index4 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3) - 1
    index5 = 150528*z0 + 32*z1 + z4 + 10752*((z2//14)) + 5376*((z3//3)) + 384*ModularIndexing(z2, 1, 14) + 192*ModularIndexing(z3, 1, 3) - 5568
    index6 = 338688*z0 + 56448*z1 + 288*z2 + 32*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_6 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_6, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_7 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_7, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf21', get_index_8, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf19', get_index)
        return load


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf21', mode=None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.bmm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1382400}, None)]
op23.unmet_dependencies = []
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1382400, 1)
op23.sizes = ([1382400], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
class op23_loop_body:
    var_ranges = {z0: 1382400}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf23', get_index, constant, None)
        return store


op24_op25: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op24_op25.writes = 
    [   MemoryDep('buf24', c0, {c0: 2709504}, None),
        MemoryDep('buf25', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op24_op25.unmet_dependencies = [   MemoryDep('buf22', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op24_op25.met_dependencies = []
op24_op25.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op24_op25.snodes[0] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 2709504}, None)]
op24.unmet_dependencies = [   MemoryDep('buf22', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (2709504, 1)
op24.sizes = ([48, 32, 9, 196], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
class op24_loop_body:
    var_ranges = {z0: 48, z1: 32, z2: 9, z3: 196}
    index0 = 56448*z0 + z1 + 32*z2 + 288*z3
    index1 = 56448*z0 + 1764*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf24', get_index_1, load, None)
        return store
op24_op25.snodes[1] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 2709504}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (2709504, 1)
op25.sizes = ([1536, 9, 196], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
class op25_loop_body:
    var_ranges = {z0: 1536, z1: 9, z2: 196}
    index0 = 1764*z0 + 196*z1 + z2
    index1 = 1792*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf25', get_index_1, load, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 42}, None)]
op26.unmet_dependencies = []
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (42, 1)
op26.sizes = ([3, 14], [])
buf26_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op26_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf26', get_index_1, index_expr, None)
        return store


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 42}, None)]
op27.unmet_dependencies = []
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (42, 1)
op27.sizes = ([3, 14], [])
buf27_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op27_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf27', get_index_1, index_expr, None)
        return store


op28: ExternKernelSchedulerNode(IndexPutFallback)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = 
    [   StarDep(name='buf23', mode=None),
        StarDep(name='buf25', mode=None),
        StarDep(name='buf26', mode=None),
        StarDep(name='buf27', mode=None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: IndexPutFallback
    buf28.layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
    buf28.mutations = ['buf23']
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = aten.index_put_


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1204224}, None)]
op29.unmet_dependencies = [   MemoryDep('buf28', 172800*c0 + 30*c1 + c2 + 900*c3 + 31, {c0: 8, c1: 28, c2: 28, c3: 192}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1204224, 1)
op29.sizes = ([8, 28, 28, 192], [])
buf28_layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op29_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 192}
    index0 = z1 + 1
    index1 = z2 + 1
    index2 = 172800*z0 + 30*z1 + z2 + 900*z3 + 31
    index3 = 150528*z0 + 5376*z1 + 192*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf29', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf23', get_index)
        return load


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
    ]
]
op30.node.kernel = extern_kernels.mm


op31_op32_op33: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op31_op32_op33.writes = 
    [   MemoryDep('buf31', c0, {c0: 12544}, None),
        MemoryDep('buf32', c0, {c0: 12544}, None),
        MemoryDep('buf33', c0, {c0: 12544}, None)]
op31_op32_op33.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op31_op32_op33.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None)]
op31_op32_op33.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op31_op32_op33.snodes[0] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 12544}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (12544, 96)
op31.sizes = ([8, 784, 2], [96])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 2, z3: 96}
    index0 = 150528*z0 + z1 + 75264*z2 + 784*z3
    index1 = 96*z2 + z3
    index2 = 150528*z0 + 192*z1 + 96*z2 + z3
    index3 = 1568*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf31', get_index_4, getitem)
        return store_reduction
op31_op32_op33.snodes[1] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 12544}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (12544, 96)
op32.sizes = ([8, 784, 2], [96])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
class op32_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 2, z3: 96}
    index0 = 150528*z0 + z1 + 75264*z2 + 784*z3
    index1 = 96*z2 + z3
    index2 = 150528*z0 + 192*z1 + 96*z2 + z3
    index3 = 1568*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf32', get_index_4, getitem_1)
        return store_reduction
op31_op32_op33.snodes[2] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 12544}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (12544, 96)
op33.sizes = ([8, 784, 2], [96])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
class op33_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 2, z3: 96}
    index0 = 150528*z0 + z1 + 75264*z2 + 784*z3
    index1 = 96*z2 + z3
    index2 = 150528*z0 + 192*z1 + 96*z2 + z3
    index3 = 1568*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf33', get_index_4, getitem_2)
        return store_reduction


op34_op35: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op34_op35.writes = 
    [   MemoryDep('buf34', c0, {c0: 6272}, None),
        MemoryDep('buf35', c0, {c0: 6272}, None)]
op34_op35.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 12544}, None),
        MemoryDep('buf32', c0, {c0: 12544}, None),
        MemoryDep('buf33', c0, {c0: 12544}, None)]
op34_op35.met_dependencies = []
op34_op35.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op34_op35.snodes[0] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 6272}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 12544}, None),
        MemoryDep('buf32', c0, {c0: 12544}, None),
        MemoryDep('buf33', c0, {c0: 12544}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (6272, 2)
op34.sizes = ([6272], [2])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op34_loop_body:
    var_ranges = {z0: 6272, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf32', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf33', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_3, getitem)
        return store_reduction
op34_op35.snodes[1] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 6272}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 12544}, None),
        MemoryDep('buf32', c0, {c0: 12544}, None),
        MemoryDep('buf33', c0, {c0: 12544}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (6272, 2)
op35.sizes = ([6272], [2])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1, 2], stride=[1568, 56, 2, 12544, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op35_loop_body:
    var_ranges = {z0: 6272, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf32', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf33', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_3, getitem_1)
        return store_reduction


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1204224}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf34', c0, {c0: 6272}, None),
        MemoryDep('buf35', c0, {c0: 6272}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg25_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg26_1', c1, {c0: 6272, c1: 192}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1204224, 1)
op37.sizes = ([8, 784, 192], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 192}
    index0 = 150528*z0 + z1 + 784*z2
    index1 = z2
    index2 = 150528*z0 + 192*z1 + z2
    index3 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf34', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf35', get_index_5)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg25_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg26_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf37', get_index_8, add_4, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 3612672}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 3612672}, None)]
op39.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 6272, c1: 576}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (3612672, 1)
op39.sizes = ([6272, 576], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[576], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
class op39_loop_body:
    var_ranges = {z0: 6272, z1: 576}
    index0 = 576*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg28_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, mul_2, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.mm


op41_op42_op43_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op41_op42_op43_op45.writes = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf42', c0, {c0: 6272}, None),
        MemoryDep('buf43', c0, {c0: 6272}, None),
        MemoryDep('buf45', c0, {c0: 1204224}, None)]
op41_op42_op43_op45.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf40', c0, {c0: 1204224}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op41_op42_op43_op45.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg30_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg31_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg32_1', c1, {c0: 6272, c1: 192}, None)]
op41_op42_op43_op45.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op41_op42_op43_op45.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 1204224}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf40', c0, {c0: 1204224}, None),
        MemoryDep('buf6', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg30_1', c1, {c0: 6272, c1: 192}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (1204224, 1)
op41.sizes = ([8, 784, 192], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 192}
    index0 = 150528*z0 + z1 + 784*z2
    index1 = z2
    index2 = 150528*z0 + 192*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf40', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg30_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        add_4 = ops.add(add_2, add_3)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf41', get_index_6, add_4, None)
        return store
op41_op42_op43_op45.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 6272}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 1204224}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (6272, 192)
op42.sizes = ([6272], [192])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op42_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf42', get_index_1, getitem)
        return store_reduction
op41_op42_op43_op45.snodes[2] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 6272}, None)]
op43.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 1204224}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (6272, 192)
op43.sizes = ([6272], [192])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op43_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem_1)
        return store_reduction
op41_op42_op43_op45.snodes[3] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 1204224}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf42', c0, {c0: 6272}, None),
        MemoryDep('buf43', c0, {c0: 6272}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg32_1', c1, {c0: 6272, c1: 192}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (1204224, 1)
op45.sizes = ([6272, 192], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op45_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf43', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg31_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg32_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf45', get_index_5, add_1, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 301056}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf45', 10752*c0 + 384*c1 + c2 + 192, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf45', 10752*c0 + 384*c1 + c2 + 5376, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf45', 10752*c0 + 384*c1 + c2 + 5568, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf45', 10752*c0 + 384*c1 + c2, {c0: 112, c1: 14, c2: 192}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (301056, 1)
op46.sizes = ([112, 14, 192], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
class op46_loop_body:
    var_ranges = {z0: 112, z1: 14, z2: 192}
    index0 = 10752*z0 + 384*z1 + z2
    index1 = 10752*z0 + 384*z1 + z2 + 192
    index2 = 10752*z0 + 384*z1 + z2 + 5376
    index3 = 10752*z0 + 384*z1 + z2 + 5568
    index4 = 2688*z0 + 192*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf45', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf45', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf45', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf46', get_index_4, mul, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op47.node.kernel = extern_kernels.mm


op48_op49_op51: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op48_op49_op51.writes = 
    [   MemoryDep('buf48', c0, {c0: 84672}, None),
        MemoryDep('buf49', c0, {c0: 84672}, None),
        MemoryDep('buf51', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op48_op49_op51.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 762048}, None)]
op48_op49_op51.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 1568, c1: 486}, None)]
op48_op49_op51.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op48_op49_op51.snodes[0] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 84672}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 762048}, None)]
op48.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 1568, c1: 486}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (84672, 9)
op48.sizes = ([1568, 54], [9])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op48_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf48', get_index_2, reduction)
        return store_reduction
op48_op49_op51.snodes[1] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 84672}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 762048}, None),
        MemoryDep('buf48', c0, {c0: 84672}, None)]
op49.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 1568, c1: 486}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (84672, 9)
op49.sizes = ([1568, 54], [9])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op49_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf48', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf49', get_index_3, reduction)
        return store_reduction
op48_op49_op51.snodes[2] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [   MemoryDep('buf51', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 762048}, None),
        MemoryDep('buf48', c0, {c0: 84672}, None),
        MemoryDep('buf49', c0, {c0: 84672}, None)]
op51.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 1568, c1: 486}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (762048, 1)
op51.sizes = ([8, 196, 6, 9, 9], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
class op51_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 9, z4: 9}
    index0 = 95256*z0 + 486*z1 + 81*z2 + 9*z3 + z4
    index1 = 81*z2 + 9*z3 + z4
    index2 = 10584*z0 + 54*z1 + 9*z2 + z3
    index3 = 95256*z0 + 81*z1 + 15876*z2 + 9*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf48', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf49', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf51', get_index_4, truediv, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op50.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 2709504}, None)]
op52.unmet_dependencies = [   MemoryDep('buf50', 150528*c0 + 32*c1 + c4 + 10752*((c2//14)) + 5376*((c3//3)) + 384*ModularIndexing(c2, 1, 14) + 192*ModularIndexing(c3, 1, 3) - 5568, {c0: 8, c1: 6, c2: 196, c3: 9, c4: 32}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (2709504, 1)
op52.sizes = ([8, 6, 196, 9, 32], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 9, z4: 32}
    index0 = 2*((z2//14)) + (z3//3)
    index1 = 30
    index2 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3)
    index3 = 2*((z2//14)) + (z3//3) - 1
    index4 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3) - 1
    index5 = 150528*z0 + 32*z1 + z4 + 10752*((z2//14)) + 5376*((z3//3)) + 384*ModularIndexing(z2, 1, 14) + 192*ModularIndexing(z3, 1, 3) - 5568
    index6 = 338688*z0 + 56448*z1 + 288*z2 + 32*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_6 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_6, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_7 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_7, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf52', get_index_8, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf50', get_index)
        return load


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None), StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.bmm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1382400}, None)]
op54.unmet_dependencies = []
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1382400, 1)
op54.sizes = ([1382400], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
class op54_loop_body:
    var_ranges = {z0: 1382400}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf54', get_index, constant, None)
        return store


op55_op56: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op55_op56.writes = 
    [   MemoryDep('buf55', c0, {c0: 2709504}, None),
        MemoryDep('buf56', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op55_op56.unmet_dependencies = [   MemoryDep('buf53', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op55_op56.met_dependencies = []
op55_op56.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op55_op56.snodes[0] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 2709504}, None)]
op55.unmet_dependencies = [   MemoryDep('buf53', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (2709504, 1)
op55.sizes = ([48, 32, 9, 196], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
class op55_loop_body:
    var_ranges = {z0: 48, z1: 32, z2: 9, z3: 196}
    index0 = 56448*z0 + z1 + 32*z2 + 288*z3
    index1 = 56448*z0 + 1764*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf55', get_index_1, load, None)
        return store
op55_op56.snodes[1] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 2709504}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (2709504, 1)
op56.sizes = ([1536, 9, 196], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
class op56_loop_body:
    var_ranges = {z0: 1536, z1: 9, z2: 196}
    index0 = 1764*z0 + 196*z1 + z2
    index1 = 1792*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf56', get_index_1, load, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 42}, None)]
op57.unmet_dependencies = []
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (42, 1)
op57.sizes = ([3, 14], [])
buf57_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op57_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, index_expr, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 42}, None)]
op58.unmet_dependencies = []
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (42, 1)
op58.sizes = ([3, 14], [])
buf58_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op58_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, index_expr, None)
        return store


op59: ExternKernelSchedulerNode(IndexPutFallback)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = 
    [   StarDep(name='buf54', mode=None),
        StarDep(name='buf56', mode=None),
        StarDep(name='buf57', mode=None),
        StarDep(name='buf58', mode=None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: IndexPutFallback
    buf59.layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
    buf59.mutations = ['buf54']
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.node.kernel = aten.index_put_


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1204224}, None)]
op60.unmet_dependencies = [   MemoryDep('buf59', 172800*c0 + 30*c1 + c2 + 900*c3 + 31, {c0: 8, c1: 28, c2: 28, c3: 192}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1204224, 1)
op60.sizes = ([8, 28, 28, 192], [])
buf59_layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 192}
    index0 = z1 + 1
    index1 = z2 + 1
    index2 = 172800*z0 + 30*z1 + z2 + 900*z3 + 31
    index3 = 150528*z0 + 5376*z1 + 192*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf60', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf54', get_index)
        return load


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62_op63_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op62_op63_op65.writes = 
    [   MemoryDep('buf62', c0, {c0: 6272}, None),
        MemoryDep('buf63', c0, {c0: 6272}, None),
        MemoryDep('buf65', c0, {c0: 1204224}, None)]
op62_op63_op65.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1204224}, None)]
op62_op63_op65.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg39_1', c1, {c0: 6272, c1: 192}, None)]
op62_op63_op65.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op62_op63_op65.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 6272}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1204224}, None)]
op62.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 6272, c1: 192}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (6272, 192)
op62.sizes = ([6272], [192])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op62_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg37_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
        return store_reduction
op62_op63_op65.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 6272}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1204224}, None)]
op63.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 6272, c1: 192}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (6272, 192)
op63.sizes = ([6272], [192])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op63_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg37_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
        return store_reduction
op62_op63_op65.snodes[2] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1204224}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1204224}, None),
        MemoryDep('buf62', c0, {c0: 6272}, None),
        MemoryDep('buf63', c0, {c0: 6272}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg39_1', c1, {c0: 6272, c1: 192}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1204224, 1)
op65.sizes = ([6272, 192], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op65_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg37_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf63', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg38_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg39_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf65', get_index_7, add_3, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 3612672}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 3612672}, None)]
op67.met_dependencies = [MemoryDep('arg41_1', c1, {c0: 6272, c1: 576}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (3612672, 1)
op67.sizes = ([6272, 576], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[576], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
class op67_loop_body:
    var_ranges = {z0: 6272, z1: 576}
    index0 = 576*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg41_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, mul_2, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.mm


op69_op70_op71_op73: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op71_op73.writes = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf70', c0, {c0: 6272}, None),
        MemoryDep('buf71', c0, {c0: 6272}, None),
        MemoryDep('buf73', c0, {c0: 1204224}, None)]
op69_op70_op71_op73.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1204224}, None),
        MemoryDep('buf68', c0, {c0: 1204224}, None)]
op69_op70_op71_op73.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg43_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg44_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg45_1', c1, {c0: 6272, c1: 192}, None)]
op69_op70_op71_op73.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
    ]
]
op69_op70_op71_op73.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1204224}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1204224}, None),
        MemoryDep('buf61', c0, {c0: 1204224}, None),
        MemoryDep('buf68', c0, {c0: 1204224}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg43_1', c1, {c0: 6272, c1: 192}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (1204224, 1)
op69.sizes = ([6272, 192], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op69_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg37_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf68', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg43_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf69', get_index_5, add_3, None)
        return store
op69_op70_op71_op73.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 6272}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 1204224}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (6272, 192)
op70.sizes = ([6272], [192])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op70_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, getitem)
        return store_reduction
op69_op70_op71_op73.snodes[2] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 6272}, None)]
op71.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 1204224}, None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (6272, 192)
op71.sizes = ([6272], [192])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op71_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_1, getitem_1)
        return store_reduction
op69_op70_op71_op73.snodes[3] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1204224}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf70', c0, {c0: 6272}, None),
        MemoryDep('buf71', c0, {c0: 6272}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg45_1', c1, {c0: 6272, c1: 192}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (1204224, 1)
op73.sizes = ([6272, 192], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op73_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf71', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_1, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 301056}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf73', 10752*c0 + 384*c1 + c2 + 192, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf73', 10752*c0 + 384*c1 + c2 + 5376, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf73', 10752*c0 + 384*c1 + c2 + 5568, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf73', 10752*c0 + 384*c1 + c2, {c0: 112, c1: 14, c2: 192}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (301056, 1)
op74.sizes = ([112, 14, 192], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
class op74_loop_body:
    var_ranges = {z0: 112, z1: 14, z2: 192}
    index0 = 10752*z0 + 384*z1 + z2
    index1 = 10752*z0 + 384*z1 + z2 + 192
    index2 = 10752*z0 + 384*z1 + z2 + 5376
    index3 = 10752*z0 + 384*z1 + z2 + 5568
    index4 = 2688*z0 + 192*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf73', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf73', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf73', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf74', get_index_4, mul, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.mm


op76_op77_op79: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op76_op77_op79.writes = 
    [   MemoryDep('buf76', c0, {c0: 84672}, None),
        MemoryDep('buf77', c0, {c0: 84672}, None),
        MemoryDep('buf79', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op76_op77_op79.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 762048}, None)]
op76_op77_op79.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 1568, c1: 486}, None)]
op76_op77_op79.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op76_op77_op79.snodes[0] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 84672}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 762048}, None)]
op76.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 1568, c1: 486}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (84672, 9)
op76.sizes = ([1568, 54], [9])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op76_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_2, reduction)
        return store_reduction
op76_op77_op79.snodes[1] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 84672}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 762048}, None),
        MemoryDep('buf76', c0, {c0: 84672}, None)]
op77.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 1568, c1: 486}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (84672, 9)
op77.sizes = ([1568, 54], [9])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op77_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf76', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf77', get_index_3, reduction)
        return store_reduction
op76_op77_op79.snodes[2] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [   MemoryDep('buf79', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 762048}, None),
        MemoryDep('buf76', c0, {c0: 84672}, None),
        MemoryDep('buf77', c0, {c0: 84672}, None)]
op79.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 1568, c1: 486}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (762048, 1)
op79.sizes = ([8, 196, 6, 9, 9], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
class op79_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 9, z4: 9}
    index0 = 95256*z0 + 486*z1 + 81*z2 + 9*z3 + z4
    index1 = 81*z2 + 9*z3 + z4
    index2 = 10584*z0 + 54*z1 + 9*z2 + z3
    index3 = 95256*z0 + 81*z1 + 15876*z2 + 9*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf76', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf77', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf79', get_index_4, truediv, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op78.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 2709504}, None)]
op80.unmet_dependencies = [   MemoryDep('buf78', 150528*c0 + 32*c1 + c4 + 10752*((c2//14)) + 5376*((c3//3)) + 384*ModularIndexing(c2, 1, 14) + 192*ModularIndexing(c3, 1, 3) - 5568, {c0: 8, c1: 6, c2: 196, c3: 9, c4: 32}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (2709504, 1)
op80.sizes = ([8, 6, 196, 9, 32], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
class op80_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 9, z4: 32}
    index0 = 2*((z2//14)) + (z3//3)
    index1 = 30
    index2 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3)
    index3 = 2*((z2//14)) + (z3//3) - 1
    index4 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3) - 1
    index5 = 150528*z0 + 32*z1 + z4 + 10752*((z2//14)) + 5376*((z3//3)) + 384*ModularIndexing(z2, 1, 14) + 192*ModularIndexing(z3, 1, 3) - 5568
    index6 = 338688*z0 + 56448*z1 + 288*z2 + 32*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_6 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_6, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_7 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_7, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf80', get_index_8, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf78', get_index)
        return load


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf79', mode=None), StarDep(name='buf80', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.bmm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1382400}, None)]
op82.unmet_dependencies = []
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1382400, 1)
op82.sizes = ([1382400], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
class op82_loop_body:
    var_ranges = {z0: 1382400}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf82', get_index, constant, None)
        return store


op83_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op83_op84.writes = 
    [   MemoryDep('buf83', c0, {c0: 2709504}, None),
        MemoryDep('buf84', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op83_op84.unmet_dependencies = [   MemoryDep('buf81', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op83_op84.met_dependencies = []
op83_op84.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op83_op84.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 2709504}, None)]
op83.unmet_dependencies = [   MemoryDep('buf81', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (2709504, 1)
op83.sizes = ([48, 32, 9, 196], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
class op83_loop_body:
    var_ranges = {z0: 48, z1: 32, z2: 9, z3: 196}
    index0 = 56448*z0 + z1 + 32*z2 + 288*z3
    index1 = 56448*z0 + 1764*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store
op83_op84.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 2709504}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (2709504, 1)
op84.sizes = ([1536, 9, 196], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
class op84_loop_body:
    var_ranges = {z0: 1536, z1: 9, z2: 196}
    index0 = 1764*z0 + 196*z1 + z2
    index1 = 1792*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf84', get_index_1, load, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 42}, None)]
op85.unmet_dependencies = []
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (42, 1)
op85.sizes = ([3, 14], [])
buf85_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op85_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, index_expr, None)
        return store


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 42}, None)]
op86.unmet_dependencies = []
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (42, 1)
op86.sizes = ([3, 14], [])
buf86_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op86_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf86', get_index_1, index_expr, None)
        return store


op87: ExternKernelSchedulerNode(IndexPutFallback)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = 
    [   StarDep(name='buf82', mode=None),
        StarDep(name='buf84', mode=None),
        StarDep(name='buf85', mode=None),
        StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: IndexPutFallback
    buf87.layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
    buf87.mutations = ['buf82']
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = aten.index_put_


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1204224}, None)]
op88.unmet_dependencies = [   MemoryDep('buf87', 172800*c0 + 30*c1 + c2 + 900*c3 + 31, {c0: 8, c1: 28, c2: 28, c3: 192}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1204224, 1)
op88.sizes = ([8, 28, 28, 192], [])
buf87_layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 192}
    index0 = z1 + 1
    index1 = z2 + 1
    index2 = 172800*z0 + 30*z1 + z2 + 900*z3 + 31
    index3 = 150528*z0 + 5376*z1 + 192*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf88', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf82', get_index)
        return load


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.mm


op90_op91_op93: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op90_op91_op93.writes = 
    [   MemoryDep('buf90', c0, {c0: 6272}, None),
        MemoryDep('buf91', c0, {c0: 6272}, None),
        MemoryDep('buf93', c0, {c0: 1204224}, None)]
op90_op91_op93.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf89', c0, {c0: 1204224}, None)]
op90_op91_op93.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg51_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg52_1', c1, {c0: 6272, c1: 192}, None)]
op90_op91_op93.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf90.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op90_op91_op93.snodes[0] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 6272}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf89', c0, {c0: 1204224}, None)]
op90.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 6272, c1: 192}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf90.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (6272, 192)
op90.sizes = ([6272], [192])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op90_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf90', get_index_3, getitem)
        return store_reduction
op90_op91_op93.snodes[1] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 6272}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf89', c0, {c0: 1204224}, None)]
op91.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 6272, c1: 192}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (6272, 192)
op91.sizes = ([6272], [192])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op91_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf91', get_index_3, getitem_1)
        return store_reduction
op90_op91_op93.snodes[2] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1204224}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf89', c0, {c0: 1204224}, None),
        MemoryDep('buf90', c0, {c0: 6272}, None),
        MemoryDep('buf91', c0, {c0: 6272}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg51_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg52_1', c1, {c0: 6272, c1: 192}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1204224, 1)
op93.sizes = ([6272, 192], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op93_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf90', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf91', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf93', get_index_7, add_3, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 3612672}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 3612672}, None)]
op95.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 6272, c1: 576}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (3612672, 1)
op95.sizes = ([6272, 576], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[576], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
class op95_loop_body:
    var_ranges = {z0: 6272, z1: 576}
    index0 = 576*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf95', get_index_4, mul_2, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97_op98_op99_op101: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op97_op98_op99_op101.writes = 
    [   MemoryDep('buf101', c0, {c0: 1204224}, None),
        MemoryDep('buf97', c0, {c0: 1204224}, None),
        MemoryDep('buf98', c0, {c0: 6272}, None),
        MemoryDep('buf99', c0, {c0: 6272}, None)]
op97_op98_op99_op101.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf89', c0, {c0: 1204224}, None),
        MemoryDep('buf96', c0, {c0: 1204224}, None)]
op97_op98_op99_op101.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg56_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg57_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg58_1', c1, {c0: 6272, c1: 192}, None)]
op97_op98_op99_op101.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
    ]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op97_op98_op99_op101.snodes[0] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 1204224}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 1204224}, None),
        MemoryDep('buf89', c0, {c0: 1204224}, None),
        MemoryDep('buf96', c0, {c0: 1204224}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg56_1', c1, {c0: 6272, c1: 192}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (1204224, 1)
op97.sizes = ([6272, 192], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op97_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf96', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg56_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, add_3, None)
        return store
op97_op98_op99_op101.snodes[1] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 6272}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 1204224}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (6272, 192)
op98.sizes = ([6272], [192])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op98_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, getitem)
        return store_reduction
op97_op98_op99_op101.snodes[2] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 6272}, None)]
op99.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 1204224}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (6272, 192)
op99.sizes = ([6272], [192])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op99_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_1, getitem_1)
        return store_reduction
op97_op98_op99_op101.snodes[3] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 1204224}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf97', c0, {c0: 1204224}, None),
        MemoryDep('buf98', c0, {c0: 6272}, None),
        MemoryDep('buf99', c0, {c0: 6272}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg58_1', c1, {c0: 6272, c1: 192}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (1204224, 1)
op101.sizes = ([6272, 192], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op101_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf99', get_index_2)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg57_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg58_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 301056}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf101', 10752*c0 + 384*c1 + c2 + 192, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf101', 10752*c0 + 384*c1 + c2 + 5376, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf101', 10752*c0 + 384*c1 + c2 + 5568, {c0: 112, c1: 14, c2: 192}, None),
        MemoryDep('buf101', 10752*c0 + 384*c1 + c2, {c0: 112, c1: 14, c2: 192}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (301056, 1)
op102.sizes = ([112, 14, 192], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 14, 14], stride=[37632, 1, 2688, 192])
class op102_loop_body:
    var_ranges = {z0: 112, z1: 14, z2: 192}
    index0 = 10752*z0 + 384*z1 + z2
    index1 = 10752*z0 + 384*z1 + z2 + 192
    index2 = 10752*z0 + 384*z1 + z2 + 5376
    index3 = 10752*z0 + 384*z1 + z2 + 5568
    index4 = 2688*z0 + 192*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf101', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf102', get_index_4, mul, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op103.node.kernel = extern_kernels.mm


op104_op105_op107: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op104_op105_op107.writes = 
    [   MemoryDep('buf104', c0, {c0: 84672}, None),
        MemoryDep('buf105', c0, {c0: 84672}, None),
        MemoryDep('buf107', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op104_op105_op107.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 762048}, None)]
op104_op105_op107.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 1568, c1: 486}, None)]
op104_op105_op107.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op104_op105_op107.snodes[0] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 84672}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 762048}, None)]
op104.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 1568, c1: 486}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (84672, 9)
op104.sizes = ([1568, 54], [9])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op104_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf104', get_index_2, reduction)
        return store_reduction
op104_op105_op107.snodes[1] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 84672}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 762048}, None),
        MemoryDep('buf104', c0, {c0: 84672}, None)]
op105.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 1568, c1: 486}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (84672, 9)
op105.sizes = ([1568, 54], [9])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
class op105_loop_body:
    var_ranges = {z0: 1568, z1: 54, z2: 9}
    index0 = 486*z0 + 9*z1 + z2
    index1 = 9*z1 + z2
    index2 = 54*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf104', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf105', get_index_3, reduction)
        return store_reduction
op104_op105_op107.snodes[2] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [   MemoryDep('buf107', 95256*c0 + 81*c1 + 15876*c2 + c3, {c0: 8, c1: 196, c2: 6, c3: 81}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 762048}, None),
        MemoryDep('buf104', c0, {c0: 84672}, None),
        MemoryDep('buf105', c0, {c0: 84672}, None)]
op107.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 1568, c1: 486}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (762048, 1)
op107.sizes = ([8, 196, 6, 9, 9], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1568, 486], stride=[486, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[486], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 1], stride=[10584, 9, 54, 1, 84672])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 9], stride=[95256, 15876, 81, 9, 1])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6, z3: 9, z4: 9}
    index0 = 95256*z0 + 486*z1 + 81*z2 + 9*z3 + z4
    index1 = 81*z2 + 9*z3 + z4
    index2 = 10584*z0 + 54*z1 + 9*z2 + z3
    index3 = 95256*z0 + 81*z1 + 15876*z2 + 9*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf104', get_index_2)
        sub = ops.sub(mul, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf105', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf107', get_index_4, truediv, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op106.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 2709504}, None)]
op108.unmet_dependencies = [   MemoryDep('buf106', 150528*c0 + 32*c1 + c4 + 10752*((c2//14)) + 5376*((c3//3)) + 384*ModularIndexing(c2, 1, 14) + 192*ModularIndexing(c3, 1, 3) - 5568, {c0: 8, c1: 6, c2: 196, c3: 9, c4: 32}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (2709504, 1)
op108.sizes = ([8, 6, 196, 9, 32], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 196, 9, 32], stride=[338688, 56448, 288, 32, 1])
class op108_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 9, z4: 32}
    index0 = 2*((z2//14)) + (z3//3)
    index1 = 30
    index2 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3)
    index3 = 2*((z2//14)) + (z3//3) - 1
    index4 = 2*ModularIndexing(z2, 1, 14) + ModularIndexing(z3, 1, 3) - 1
    index5 = 150528*z0 + 32*z1 + z4 + 10752*((z2//14)) + 5376*((z3//3)) + 384*ModularIndexing(z2, 1, 14) + 192*ModularIndexing(z3, 1, 3) - 5568
    index6 = 338688*z0 + 56448*z1 + 288*z2 + 32*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_6 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_6, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_7 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_7, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf108', get_index_8, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf106', get_index)
        return load


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf107', mode=None), StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.bmm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1382400}, None)]
op110.unmet_dependencies = []
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1382400, 1)
op110.sizes = ([1382400], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 30, 30], stride=[172800, 900, 30, 1])
class op110_loop_body:
    var_ranges = {z0: 1382400}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf110', get_index, constant, None)
        return store


op111_op112: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op111_op112.writes = 
    [   MemoryDep('buf111', c0, {c0: 2709504}, None),
        MemoryDep('buf112', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op111_op112.unmet_dependencies = [   MemoryDep('buf109', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op111_op112.met_dependencies = []
op111_op112.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op111_op112.snodes[0] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 2709504}, None)]
op111.unmet_dependencies = [   MemoryDep('buf109', 56448*c0 + c1 + 32*c2 + 288*c3, {c0: 48, c1: 32, c2: 9, c3: 196}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (2709504, 1)
op111.sizes = ([48, 32, 9, 196], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[9408, 9, 32], stride=[288, 32, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
class op111_loop_body:
    var_ranges = {z0: 48, z1: 32, z2: 9, z3: 196}
    index0 = 56448*z0 + z1 + 32*z2 + 288*z3
    index1 = 56448*z0 + 1764*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store
op111_op112.snodes[1] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', 1792*c0 + c1, {c0: 1536, c1: 1764}, None)]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 2709504}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (2709504, 1)
op112.sizes = ([1536, 9, 196], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 32, 9, 196], stride=[338688, 56448, 1764, 196, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 3, 14, 3, 14], stride=[344064, 1792, 588, 14, 196, 1])
class op112_loop_body:
    var_ranges = {z0: 1536, z1: 9, z2: 196}
    index0 = 1764*z0 + 196*z1 + z2
    index1 = 1792*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 42}, None)]
op113.unmet_dependencies = []
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (42, 1)
op113.sizes = ([3, 14], [])
buf113_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op113_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, index_expr, None)
        return store


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 42}, None)]
op114.unmet_dependencies = []
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (42, 1)
op114.sizes = ([3, 14], [])
buf114_layout = FixedLayout('cuda', torch.int64, size=[3, 14], stride=[14, 1])
class op114_loop_body:
    var_ranges = {z0: 3, z1: 14}
    index0 = z0 + 2*z1
    index1 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf114', get_index_1, index_expr, None)
        return store


op115: ExternKernelSchedulerNode(IndexPutFallback)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = 
    [   StarDep(name='buf110', mode=None),
        StarDep(name='buf112', mode=None),
        StarDep(name='buf113', mode=None),
        StarDep(name='buf114', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: IndexPutFallback
    buf115.layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
    buf115.mutations = ['buf110']
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.node.kernel = aten.index_put_


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 1204224}, None)]
op116.unmet_dependencies = [   MemoryDep('buf115', 172800*c0 + 30*c1 + c2 + 900*c3 + 31, {c0: 8, c1: 28, c2: 28, c3: 192}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (1204224, 1)
op116.sizes = ([8, 28, 28, 192], [])
buf115_layout = NoneLayout(device=device(type='cuda', index=0), size=[0], stride=[0])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op116_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 192}
    index0 = z1 + 1
    index1 = z2 + 1
    index2 = 172800*z0 + 30*z1 + z2 + 900*z3 + 31
    index3 = 150528*z0 + 5376*z1 + 192*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf116', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf110', get_index)
        return load


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
    ]
]
op117.node.kernel = extern_kernels.mm


op118_op119_op121: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op118_op119_op121.writes = 
    [   MemoryDep('buf118', c0, {c0: 6272}, None),
        MemoryDep('buf119', c0, {c0: 6272}, None),
        MemoryDep('buf121', c0, {c0: 1204224}, None)]
op118_op119_op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1204224}, None),
        MemoryDep('buf97', c0, {c0: 1204224}, None)]
op118_op119_op121.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg64_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg65_1', c1, {c0: 6272, c1: 192}, None)]
op118_op119_op121.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op118_op119_op121.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 6272}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1204224}, None),
        MemoryDep('buf97', c0, {c0: 1204224}, None)]
op118.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 6272, c1: 192}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (6272, 192)
op118.sizes = ([6272], [192])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op118_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf118', get_index_3, getitem)
        return store_reduction
op118_op119_op121.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 6272}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1204224}, None),
        MemoryDep('buf97', c0, {c0: 1204224}, None)]
op119.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 6272, c1: 192}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (6272, 192)
op119.sizes = ([6272], [192])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op119_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem_1)
        return store_reduction
op118_op119_op121.snodes[2] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 1204224}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1204224}, None),
        MemoryDep('buf118', c0, {c0: 6272}, None),
        MemoryDep('buf119', c0, {c0: 6272}, None),
        MemoryDep('buf97', c0, {c0: 1204224}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg64_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg65_1', c1, {c0: 6272, c1: 192}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (1204224, 1)
op121.sizes = ([6272, 192], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
class op121_loop_body:
    var_ranges = {z0: 6272, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf118', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf119', get_index_4)
        constant = ops.constant(192.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf121', get_index_7, add_3, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 3612672}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 3612672}, None)]
op123.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 6272, c1: 576}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (3612672, 1)
op123.sizes = ([6272, 576], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[6272, 576], stride=[576, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[576], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 576], stride=[451584, 16128, 576, 1])
class op123_loop_body:
    var_ranges = {z0: 6272, z1: 576}
    index0 = 576*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf123', get_index_4, mul_2, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1204224}, None),
        MemoryDep('buf124', c0, {c0: 1204224}, None),
        MemoryDep('buf97', c0, {c0: 1204224}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg69_1', c1, {c0: 6272, c1: 192}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (1204224, 1)
op125.sizes = ([8, 784, 192], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 192], stride=[150528, 5376, 192, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[6272, 192], stride=[192, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op125_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 192}
    index0 = 150528*z0 + 192*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf124', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf125', get_index_5, add_3, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
    ]
]
op126.node.kernel = extern_kernels.convolution


op127_op128_op129: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op127_op128_op129.writes = 
    [   MemoryDep('buf127', c0, {c0: 4704}, None),
        MemoryDep('buf128', c0, {c0: 4704}, None),
        MemoryDep('buf129', c0, {c0: 4704}, None)]
op127_op128_op129.unmet_dependencies = [MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op127_op128_op129.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None)]
op127_op128_op129.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op127_op128_op129.snodes[0] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 4704}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (4704, 128)
op127.sizes = ([8, 196, 3], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3, z3: 128}
    index0 = 75264*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 384*z1 + 128*z2 + z3
    index3 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg72_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf127', get_index_3, getitem)
        return store_reduction
op127_op128_op129.snodes[1] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 4704}, None)]
op128.unmet_dependencies = [MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (4704, 128)
op128.sizes = ([8, 196, 3], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
class op128_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3, z3: 128}
    index0 = 75264*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 384*z1 + 128*z2 + z3
    index3 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg72_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem_1)
        return store_reduction
op127_op128_op129.snodes[2] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 4704}, None)]
op129.unmet_dependencies = [MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (4704, 128)
op129.sizes = ([8, 196, 3], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3, z3: 128}
    index0 = 75264*z0 + z1 + 25088*z2 + 196*z3
    index1 = 128*z2 + z3
    index2 = 384*z1 + 128*z2 + z3
    index3 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg72_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem_2)
        return store_reduction


op130_op131: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op130_op131.writes = 
    [   MemoryDep('buf130', c0, {c0: 1568}, None),
        MemoryDep('buf131', c0, {c0: 1568}, None)]
op130_op131.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 4704}, None),
        MemoryDep('buf128', c0, {c0: 4704}, None),
        MemoryDep('buf129', c0, {c0: 4704}, None)]
op130_op131.met_dependencies = []
op130_op131.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130_op131.snodes[0] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1568}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 4704}, None),
        MemoryDep('buf128', c0, {c0: 4704}, None),
        MemoryDep('buf129', c0, {c0: 4704}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1568, 3)
op130.sizes = ([1568], [3])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op130_loop_body:
    var_ranges = {z0: 1568, z1: 3}
    index0 = 3*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_3, getitem)
        return store_reduction
op130_op131.snodes[1] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1568}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 4704}, None),
        MemoryDep('buf128', c0, {c0: 4704}, None),
        MemoryDep('buf129', c0, {c0: 4704}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (1568, 3)
op131.sizes = ([1568], [3])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1, 3], stride=[588, 42, 3, 4704, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op131_loop_body:
    var_ranges = {z0: 1568, z1: 3}
    index0 = 3*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_3, getitem_1)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 602112}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf130', c0, {c0: 1568}, None),
        MemoryDep('buf131', c0, {c0: 1568}, None)]
op133.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None),
        MemoryDep('arg73_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg74_1', c1, {c0: 1568, c1: 384}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (602112, 1)
op133.sizes = ([8, 196, 384], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 75264*z0 + z1 + 196*z2
    index1 = z2
    index2 = 384*z1 + z2
    index3 = 196*z0 + z1
    index4 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg72_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf130', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf131', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg73_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg74_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf133', get_index_7, add_3, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: ExternKernelSchedulerNode(FallbackKernel)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: FallbackKernel
    buf135.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
    ]
]
op135.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op136: ExternKernelSchedulerNode(MultiOutput)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: MultiOutput
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = None


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op140.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.mm


op141_op142_op143_op145: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op141_op142_op143_op145.writes = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf142', c0, {c0: 1568}, None),
        MemoryDep('buf143', c0, {c0: 1568}, None),
        MemoryDep('buf145', c0, {c0: 602112}, None)]
op141_op142_op143_op145.unmet_dependencies = 
    [   MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf140', c0, {c0: 602112}, None)]
op141_op142_op143_op145.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg78_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg79_1', c1, {c0: 1568, c1: 384}, None)]
op141_op142_op143_op145.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
    ]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op141_op142_op143_op145.snodes[0] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 602112}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf126', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf140', c0, {c0: 602112}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg72_1', c1, {c0: 8, c1: 75264}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 384}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (602112, 1)
op141.sizes = ([8, 196, 384], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 75264*z0 + z1 + 196*z2
    index1 = z2
    index2 = 384*z1 + z2
    index3 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg72_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf140', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf141', get_index_5, add_3, None)
        return store
op141_op142_op143_op145.snodes[1] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 1568}, None)]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 602112}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (1568, 384)
op142.sizes = ([1568], [384])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op142_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf142', get_index_1, getitem)
        return store_reduction
op141_op142_op143_op145.snodes[2] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 1568}, None)]
op143.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 602112}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (1568, 384)
op143.sizes = ([1568], [384])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op143_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem_1)
        return store_reduction
op141_op142_op143_op145.snodes[3] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 602112}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf142', c0, {c0: 1568}, None),
        MemoryDep('buf143', c0, {c0: 1568}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg79_1', c1, {c0: 1568, c1: 384}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (602112, 1)
op145.sizes = ([1568, 384], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf142', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf143', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg78_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg79_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf145', get_index_5, add_1, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 1806336}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 1806336}, None)]
op147.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 1568, c1: 1152}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (1806336, 1)
op147.sizes = ([1568, 1152], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op147_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf146', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg81_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf147', get_index_4, mul_2, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149_op150_op152: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op149_op150_op152.writes = 
    [   MemoryDep('buf149', c0, {c0: 1568}, None),
        MemoryDep('buf150', c0, {c0: 1568}, None),
        MemoryDep('buf152', c0, {c0: 602112}, None)]
op149_op150_op152.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None)]
op149_op150_op152.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg84_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg85_1', c1, {c0: 1568, c1: 384}, None)]
op149_op150_op152.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op149_op150_op152.snodes[0] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1568}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None)]
op149.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1568, c1: 384}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (1568, 384)
op149.sizes = ([1568], [384])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op149_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf148', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_3, getitem)
        return store_reduction
op149_op150_op152.snodes[1] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1568}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None)]
op150.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1568, c1: 384}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1568, 384)
op150.sizes = ([1568], [384])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op150_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf148', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem_1)
        return store_reduction
op149_op150_op152.snodes[2] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 602112}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None),
        MemoryDep('buf149', c0, {c0: 1568}, None),
        MemoryDep('buf150', c0, {c0: 1568}, None)]
op152.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg84_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg85_1', c1, {c0: 1568, c1: 384}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (602112, 1)
op152.sizes = ([1568, 384], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op152_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf148', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf149', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf150', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg84_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg85_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf152', get_index_7, add_3, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = extern_kernels.mm


op154: ExternKernelSchedulerNode(FallbackKernel)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: FallbackKernel
    buf154.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf154.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
]
op154.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op155: ExternKernelSchedulerNode(MultiOutput)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: MultiOutput
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = None


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op159.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.mm


op160_op161_op162_op164: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op160_op161_op162_op164.writes = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf161', c0, {c0: 1568}, None),
        MemoryDep('buf162', c0, {c0: 1568}, None),
        MemoryDep('buf164', c0, {c0: 602112}, None)]
op160_op161_op162_op164.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None),
        MemoryDep('buf159', c0, {c0: 602112}, None)]
op160_op161_op162_op164.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg88_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg89_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg90_1', c1, {c0: 1568, c1: 384}, None)]
op160_op161_op162_op164.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op160_op161_op162_op164.snodes[0] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 602112}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 602112}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None),
        MemoryDep('buf159', c0, {c0: 602112}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg88_1', c1, {c0: 1568, c1: 384}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (602112, 1)
op160.sizes = ([1568, 384], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op160_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf148', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf159', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg88_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_3, None)
        return store
op160_op161_op162_op164.snodes[1] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 1568}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 602112}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (1568, 384)
op161.sizes = ([1568], [384])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op161_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf161', get_index_1, getitem)
        return store_reduction
op160_op161_op162_op164.snodes[2] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 1568}, None)]
op162.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 602112}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (1568, 384)
op162.sizes = ([1568], [384])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op162_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_1, getitem_1)
        return store_reduction
op160_op161_op162_op164.snodes[3] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 602112}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf161', c0, {c0: 1568}, None),
        MemoryDep('buf162', c0, {c0: 1568}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg89_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg90_1', c1, {c0: 1568, c1: 384}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (602112, 1)
op164.sizes = ([1568, 384], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op164_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf161', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf162', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf164', get_index_5, add_1, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 1806336}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 1806336}, None)]
op166.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 1568, c1: 1152}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (1806336, 1)
op166.sizes = ([1568, 1152], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op166_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg92_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf166', get_index_4, mul_2, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op167.node.kernel = extern_kernels.mm


op168_op169_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op168_op169_op171.writes = 
    [   MemoryDep('buf168', c0, {c0: 1568}, None),
        MemoryDep('buf169', c0, {c0: 1568}, None),
        MemoryDep('buf171', c0, {c0: 602112}, None)]
op168_op169_op171.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf167', c0, {c0: 602112}, None)]
op168_op169_op171.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg95_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg96_1', c1, {c0: 1568, c1: 384}, None)]
op168_op169_op171.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op168_op169_op171.snodes[0] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1568}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf167', c0, {c0: 602112}, None)]
op168.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (1568, 384)
op168.sizes = ([1568], [384])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op168_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf168', get_index_3, getitem)
        return store_reduction
op168_op169_op171.snodes[1] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1568}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf167', c0, {c0: 602112}, None)]
op169.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1568, 384)
op169.sizes = ([1568], [384])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op169_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf169', get_index_3, getitem_1)
        return store_reduction
op168_op169_op171.snodes[2] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 602112}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf167', c0, {c0: 602112}, None),
        MemoryDep('buf168', c0, {c0: 1568}, None),
        MemoryDep('buf169', c0, {c0: 1568}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg95_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg96_1', c1, {c0: 1568, c1: 384}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (602112, 1)
op171.sizes = ([1568, 384], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op171_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf168', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf169', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg95_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg96_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf171', get_index_7, add_3, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: ExternKernelSchedulerNode(FallbackKernel)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: FallbackKernel
    buf173.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op173.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op174: ExternKernelSchedulerNode(MultiOutput)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: MultiOutput
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = None


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op178.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179_op180_op181_op183: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op179_op180_op181_op183.writes = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf180', c0, {c0: 1568}, None),
        MemoryDep('buf181', c0, {c0: 1568}, None),
        MemoryDep('buf183', c0, {c0: 602112}, None)]
op179_op180_op181_op183.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf167', c0, {c0: 602112}, None),
        MemoryDep('buf178', c0, {c0: 602112}, None)]
op179_op180_op181_op183.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg101_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg99_1', c1, {c0: 1568, c1: 384}, None)]
op179_op180_op181_op183.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op179_op180_op181_op183.snodes[0] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 602112}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 602112}, None),
        MemoryDep('buf167', c0, {c0: 602112}, None),
        MemoryDep('buf178', c0, {c0: 602112}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg99_1', c1, {c0: 1568, c1: 384}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (602112, 1)
op179.sizes = ([1568, 384], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op179_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf178', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg99_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, add_3, None)
        return store
op179_op180_op181_op183.snodes[1] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 1568}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 602112}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (1568, 384)
op180.sizes = ([1568], [384])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op180_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_1, getitem)
        return store_reduction
op179_op180_op181_op183.snodes[2] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 1568}, None)]
op181.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 602112}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (1568, 384)
op181.sizes = ([1568], [384])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op181_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, getitem_1)
        return store_reduction
op179_op180_op181_op183.snodes[3] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 602112}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf180', c0, {c0: 1568}, None),
        MemoryDep('buf181', c0, {c0: 1568}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg101_1', c1, {c0: 1568, c1: 384}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (602112, 1)
op183.sizes = ([1568, 384], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op183_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf180', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf181', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg100_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf183', get_index_5, add_1, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1806336}, None)]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 1806336}, None)]
op185.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 1568, c1: 1152}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (1806336, 1)
op185.sizes = ([1568, 1152], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op185_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg103_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf185', get_index_4, mul_2, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187_op188_op190: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op187_op188_op190.writes = 
    [   MemoryDep('buf187', c0, {c0: 1568}, None),
        MemoryDep('buf188', c0, {c0: 1568}, None),
        MemoryDep('buf190', c0, {c0: 602112}, None)]
op187_op188_op190.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None)]
op187_op188_op190.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg106_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg107_1', c1, {c0: 1568, c1: 384}, None)]
op187_op188_op190.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op187_op188_op190.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1568}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None)]
op187.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (1568, 384)
op187.sizes = ([1568], [384])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op187_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg105_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_3, getitem)
        return store_reduction
op187_op188_op190.snodes[1] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 1568}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None)]
op188.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (1568, 384)
op188.sizes = ([1568], [384])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op188_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg105_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem_1)
        return store_reduction
op187_op188_op190.snodes[2] =
op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 602112}, None)]
op190.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None),
        MemoryDep('buf187', c0, {c0: 1568}, None),
        MemoryDep('buf188', c0, {c0: 1568}, None)]
op190.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg106_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg107_1', c1, {c0: 1568, c1: 384}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (602112, 1)
op190.sizes = ([1568, 384], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op190_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg105_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf187', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf188', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg106_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg107_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf190', get_index_7, add_3, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192: ExternKernelSchedulerNode(FallbackKernel)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: FallbackKernel
    buf192.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf192.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op192.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op193: ExternKernelSchedulerNode(MultiOutput)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: MultiOutput
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op193.node.kernel = None


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op197.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198_op199_op200_op202: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op198_op199_op200_op202.writes = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf199', c0, {c0: 1568}, None),
        MemoryDep('buf200', c0, {c0: 1568}, None),
        MemoryDep('buf202', c0, {c0: 602112}, None)]
op198_op199_op200_op202.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None),
        MemoryDep('buf197', c0, {c0: 602112}, None)]
op198_op199_op200_op202.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg110_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg111_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg112_1', c1, {c0: 1568, c1: 384}, None)]
op198_op199_op200_op202.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op198_op199_op200_op202.snodes[0] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 602112}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None),
        MemoryDep('buf197', c0, {c0: 602112}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg110_1', c1, {c0: 1568, c1: 384}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (602112, 1)
op198.sizes = ([1568, 384], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op198_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg105_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf197', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf198', get_index_5, add_3, None)
        return store
op198_op199_op200_op202.snodes[1] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1568}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 602112}, None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (1568, 384)
op199.sizes = ([1568], [384])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op199_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf199', get_index_1, getitem)
        return store_reduction
op198_op199_op200_op202.snodes[2] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 1568}, None)]
op200.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 602112}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (1568, 384)
op200.sizes = ([1568], [384])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op200_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf200', get_index_1, getitem_1)
        return store_reduction
op198_op199_op200_op202.snodes[3] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 602112}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf199', c0, {c0: 1568}, None),
        MemoryDep('buf200', c0, {c0: 1568}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg112_1', c1, {c0: 1568, c1: 384}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (602112, 1)
op202.sizes = ([1568, 384], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op202_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf199', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf200', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf202', get_index_5, add_1, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 1806336}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 1806336}, None)]
op204.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 1568, c1: 1152}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (1806336, 1)
op204.sizes = ([1568, 1152], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op204_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf203', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf204', get_index_4, mul_2, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op205.node.kernel = extern_kernels.mm


op206_op207_op209: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op206_op207_op209.writes = 
    [   MemoryDep('buf206', c0, {c0: 1568}, None),
        MemoryDep('buf207', c0, {c0: 1568}, None),
        MemoryDep('buf209', c0, {c0: 602112}, None)]
op206_op207_op209.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf205', c0, {c0: 602112}, None)]
op206_op207_op209.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 384}, None)]
op206_op207_op209.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf206.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf207.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op206_op207_op209.snodes[0] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1568}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf205', c0, {c0: 602112}, None)]
op206.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf206.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1568, 384)
op206.sizes = ([1568], [384])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op206_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf206', get_index_3, getitem)
        return store_reduction
op206_op207_op209.snodes[1] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 1568}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf205', c0, {c0: 602112}, None)]
op207.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf207.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (1568, 384)
op207.sizes = ([1568], [384])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op207_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf207', get_index_3, getitem_1)
        return store_reduction
op206_op207_op209.snodes[2] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 602112}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf205', c0, {c0: 602112}, None),
        MemoryDep('buf206', c0, {c0: 1568}, None),
        MemoryDep('buf207', c0, {c0: 1568}, None)]
op209.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 384}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (602112, 1)
op209.sizes = ([1568, 384], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op209_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf206', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf207', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg117_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg118_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf209', get_index_7, add_3, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.node.kernel = extern_kernels.mm


op211: ExternKernelSchedulerNode(FallbackKernel)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: FallbackKernel
    buf211.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op211.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op212: ExternKernelSchedulerNode(MultiOutput)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: MultiOutput
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op212.node.kernel = None


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op216.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217_op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op217_op218_op219_op221.writes = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf218', c0, {c0: 1568}, None),
        MemoryDep('buf219', c0, {c0: 1568}, None),
        MemoryDep('buf221', c0, {c0: 602112}, None)]
op217_op218_op219_op221.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf205', c0, {c0: 602112}, None),
        MemoryDep('buf216', c0, {c0: 602112}, None)]
op217_op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg121_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 384}, None)]
op217_op218_op219_op221.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op217_op218_op219_op221.snodes[0] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 602112}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 602112}, None),
        MemoryDep('buf205', c0, {c0: 602112}, None),
        MemoryDep('buf216', c0, {c0: 602112}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg121_1', c1, {c0: 1568, c1: 384}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (602112, 1)
op217.sizes = ([1568, 384], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op217_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg121_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store
op217_op218_op219_op221.snodes[1] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 1568}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 602112}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (1568, 384)
op218.sizes = ([1568], [384])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op218_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction
op217_op218_op219_op221.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 1568}, None)]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 602112}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (1568, 384)
op219.sizes = ([1568], [384])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op219_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction
op217_op218_op219_op221.snodes[3] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 602112}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf218', c0, {c0: 1568}, None),
        MemoryDep('buf219', c0, {c0: 1568}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 384}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (602112, 1)
op221.sizes = ([1568, 384], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op221_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg122_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg123_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 1806336}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 1806336}, None)]
op223.met_dependencies = [MemoryDep('arg125_1', c1, {c0: 1568, c1: 1152}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (1806336, 1)
op223.sizes = ([1568, 1152], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op223_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg125_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf223', get_index_4, mul_2, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225_op226_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op225_op226_op228.writes = 
    [   MemoryDep('buf225', c0, {c0: 1568}, None),
        MemoryDep('buf226', c0, {c0: 1568}, None),
        MemoryDep('buf228', c0, {c0: 602112}, None)]
op225_op226_op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 602112}, None)]
op225_op226_op228.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 384}, None)]
op225_op226_op228.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op225_op226_op228.snodes[0] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1568}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 602112}, None)]
op225.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1568, 384)
op225.sizes = ([1568], [384])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op225_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225_op226_op228.snodes[1] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 1568}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 602112}, None)]
op226.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (1568, 384)
op226.sizes = ([1568], [384])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op226_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op225_op226_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 602112}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 602112}, None),
        MemoryDep('buf225', c0, {c0: 1568}, None),
        MemoryDep('buf226', c0, {c0: 1568}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 384}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (602112, 1)
op228.sizes = ([1568, 384], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op228_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: ExternKernelSchedulerNode(FallbackKernel)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: FallbackKernel
    buf230.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf230.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op231: ExternKernelSchedulerNode(MultiOutput)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: MultiOutput
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = None


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op235.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.mm


op236_op237_op238_op240: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op236_op237_op238_op240.writes = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf237', c0, {c0: 1568}, None),
        MemoryDep('buf238', c0, {c0: 1568}, None),
        MemoryDep('buf240', c0, {c0: 602112}, None)]
op236_op237_op238_op240.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 602112}, None),
        MemoryDep('buf235', c0, {c0: 602112}, None)]
op236_op237_op238_op240.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg132_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 384}, None)]
op236_op237_op238_op240.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf237.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf238.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op236_op237_op238_op240.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 602112}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 602112}, None),
        MemoryDep('buf235', c0, {c0: 602112}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg132_1', c1, {c0: 1568, c1: 384}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (602112, 1)
op236.sizes = ([1568, 384], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op236_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf235', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, add_3, None)
        return store
op236_op237_op238_op240.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1568}, None)]
op237.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 602112}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf237.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (1568, 384)
op237.sizes = ([1568], [384])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op237_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf237', get_index_1, getitem)
        return store_reduction
op236_op237_op238_op240.snodes[2] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 1568}, None)]
op238.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 602112}, None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf238.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (1568, 384)
op238.sizes = ([1568], [384])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op238_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf238', get_index_1, getitem_1)
        return store_reduction
op236_op237_op238_op240.snodes[3] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 602112}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf237', c0, {c0: 1568}, None),
        MemoryDep('buf238', c0, {c0: 1568}, None)]
op240.met_dependencies = 
    [   MemoryDep('arg133_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 384}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (602112, 1)
op240.sizes = ([1568, 384], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op240_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf237', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf238', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg133_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg134_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf240', get_index_5, add_1, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 1806336}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 1806336}, None)]
op242.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 1568, c1: 1152}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (1806336, 1)
op242.sizes = ([1568, 1152], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op242_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf241', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf242', get_index_4, mul_2, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.mm


op244_op245_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op244_op245_op247.writes = 
    [   MemoryDep('buf244', c0, {c0: 1568}, None),
        MemoryDep('buf245', c0, {c0: 1568}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None)]
op244_op245_op247.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf243', c0, {c0: 602112}, None)]
op244_op245_op247.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg139_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 384}, None)]
op244_op245_op247.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op244_op245_op247.snodes[0] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 1568}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf243', c0, {c0: 602112}, None)]
op244.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 1568, c1: 384}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (1568, 384)
op244.sizes = ([1568], [384])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op244_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, getitem)
        return store_reduction
op244_op245_op247.snodes[1] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1568}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf243', c0, {c0: 602112}, None)]
op245.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 1568, c1: 384}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (1568, 384)
op245.sizes = ([1568], [384])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op245_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_3, getitem_1)
        return store_reduction
op244_op245_op247.snodes[2] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 602112}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf243', c0, {c0: 602112}, None),
        MemoryDep('buf244', c0, {c0: 1568}, None),
        MemoryDep('buf245', c0, {c0: 1568}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg139_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 384}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (602112, 1)
op247.sizes = ([1568, 384], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op247_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf244', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf245', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg139_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg140_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf247', get_index_7, add_3, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.node.kernel = extern_kernels.mm


op249: ExternKernelSchedulerNode(FallbackKernel)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: FallbackKernel
    buf249.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf249.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op249.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op250: ExternKernelSchedulerNode(MultiOutput)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: MultiOutput
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = None


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op254.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255_op256_op257_op259: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op255_op256_op257_op259.writes = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf256', c0, {c0: 1568}, None),
        MemoryDep('buf257', c0, {c0: 1568}, None),
        MemoryDep('buf259', c0, {c0: 602112}, None)]
op255_op256_op257_op259.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf243', c0, {c0: 602112}, None),
        MemoryDep('buf254', c0, {c0: 602112}, None)]
op255_op256_op257_op259.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 384}, None)]
op255_op256_op257_op259.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
    ]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op255_op256_op257_op259.snodes[0] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 602112}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 602112}, None),
        MemoryDep('buf243', c0, {c0: 602112}, None),
        MemoryDep('buf254', c0, {c0: 602112}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 384}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (602112, 1)
op255.sizes = ([1568, 384], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op255_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf254', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg143_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf255', get_index_5, add_3, None)
        return store
op255_op256_op257_op259.snodes[1] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 1568}, None)]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 602112}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (1568, 384)
op256.sizes = ([1568], [384])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op256_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_1, getitem)
        return store_reduction
op255_op256_op257_op259.snodes[2] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1568}, None)]
op257.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 602112}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1568, 384)
op257.sizes = ([1568], [384])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op257_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_1, getitem_1)
        return store_reduction
op255_op256_op257_op259.snodes[3] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 602112}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf256', c0, {c0: 1568}, None),
        MemoryDep('buf257', c0, {c0: 1568}, None)]
op259.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 384}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (602112, 1)
op259.sizes = ([1568, 384], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op259_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf256', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf257', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf259', get_index_5, add_1, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf259', mode=None)]
op260.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 1806336}, None)]
op261.unmet_dependencies = [MemoryDep('buf260', c0, {c0: 1806336}, None)]
op261.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 1568, c1: 1152}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (1806336, 1)
op261.sizes = ([1568, 1152], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op261_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf261', get_index_4, mul_2, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.mm


op263_op264_op266: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op263_op264_op266.writes = 
    [   MemoryDep('buf263', c0, {c0: 1568}, None),
        MemoryDep('buf264', c0, {c0: 1568}, None),
        MemoryDep('buf266', c0, {c0: 602112}, None)]
op263_op264_op266.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None)]
op263_op264_op266.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg150_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg151_1', c1, {c0: 1568, c1: 384}, None)]
op263_op264_op266.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op263_op264_op266.snodes[0] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 1568}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None)]
op263.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 1568, c1: 384}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (1568, 384)
op263.sizes = ([1568], [384])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op263_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem)
        return store_reduction
op263_op264_op266.snodes[1] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1568}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None)]
op264.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 1568, c1: 384}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (1568, 384)
op264.sizes = ([1568], [384])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op264_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem_1)
        return store_reduction
op263_op264_op266.snodes[2] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 602112}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None),
        MemoryDep('buf263', c0, {c0: 1568}, None),
        MemoryDep('buf264', c0, {c0: 1568}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg150_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg151_1', c1, {c0: 1568, c1: 384}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (602112, 1)
op266.sizes = ([1568, 384], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op266_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf263', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf264', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg150_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg151_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf266', get_index_7, add_3, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.mm


op268: ExternKernelSchedulerNode(FallbackKernel)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: FallbackKernel
    buf268.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf268.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
    ]
]
op268.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op269: ExternKernelSchedulerNode(MultiOutput)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: MultiOutput
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = None


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op273.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False)]
]
op273.node.kernel = extern_kernels.mm


op274_op275_op276_op278: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op274_op275_op276_op278.writes = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf275', c0, {c0: 1568}, None),
        MemoryDep('buf276', c0, {c0: 1568}, None),
        MemoryDep('buf278', c0, {c0: 602112}, None)]
op274_op275_op276_op278.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None),
        MemoryDep('buf273', c0, {c0: 602112}, None)]
op274_op275_op276_op278.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg154_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 384}, None)]
op274_op275_op276_op278.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op274_op275_op276_op278.snodes[0] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 602112}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None),
        MemoryDep('buf273', c0, {c0: 602112}, None)]
op274.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg154_1', c1, {c0: 1568, c1: 384}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op274.group.device = cuda:0
op274.group.iteration = (602112, 1)
op274.sizes = ([1568, 384], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op274_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg149_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf273', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg154_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf274', get_index_5, add_3, None)
        return store
op274_op275_op276_op278.snodes[1] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 1568}, None)]
op275.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 602112}, None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (1568, 384)
op275.sizes = ([1568], [384])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op275_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf275', get_index_1, getitem)
        return store_reduction
op274_op275_op276_op278.snodes[2] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 1568}, None)]
op276.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 602112}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (1568, 384)
op276.sizes = ([1568], [384])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op276_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_1, getitem_1)
        return store_reduction
op274_op275_op276_op278.snodes[3] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 602112}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf275', c0, {c0: 1568}, None),
        MemoryDep('buf276', c0, {c0: 1568}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg155_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 384}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (602112, 1)
op278.sizes = ([1568, 384], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op278_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg155_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg156_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf278', get_index_5, add_1, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 1806336}, None)]
op280.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 1806336}, None)]
op280.met_dependencies = [MemoryDep('arg158_1', c1, {c0: 1568, c1: 1152}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (1806336, 1)
op280.sizes = ([1568, 1152], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op280_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf279', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg158_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf280', get_index_4, mul_2, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op281.node.kernel = extern_kernels.mm


op282_op283_op285: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op282_op283_op285.writes = 
    [   MemoryDep('buf282', c0, {c0: 1568}, None),
        MemoryDep('buf283', c0, {c0: 1568}, None),
        MemoryDep('buf285', c0, {c0: 602112}, None)]
op282_op283_op285.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf281', c0, {c0: 602112}, None)]
op282_op283_op285.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg161_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 384}, None)]
op282_op283_op285.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op282_op283_op285.snodes[0] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 1568}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf281', c0, {c0: 602112}, None)]
op282.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 1568, c1: 384}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (1568, 384)
op282.sizes = ([1568], [384])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op282_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf282', get_index_3, getitem)
        return store_reduction
op282_op283_op285.snodes[1] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 1568}, None)]
op283.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf281', c0, {c0: 602112}, None)]
op283.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 1568, c1: 384}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (1568, 384)
op283.sizes = ([1568], [384])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op283_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf283', get_index_3, getitem_1)
        return store_reduction
op282_op283_op285.snodes[2] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 602112}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf281', c0, {c0: 602112}, None),
        MemoryDep('buf282', c0, {c0: 1568}, None),
        MemoryDep('buf283', c0, {c0: 1568}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg161_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 384}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (602112, 1)
op285.sizes = ([1568, 384], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op285_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf282', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf283', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg161_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg162_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf285', get_index_7, add_3, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.mm


op287: ExternKernelSchedulerNode(FallbackKernel)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: FallbackKernel
    buf287.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
    ]
]
op287.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op288: ExternKernelSchedulerNode(MultiOutput)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: MultiOutput
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op288.node.kernel = None


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op292.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False)]
]
op292.node.kernel = extern_kernels.mm


op293_op294_op295_op297: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op293_op294_op295_op297.writes = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf294', c0, {c0: 1568}, None),
        MemoryDep('buf295', c0, {c0: 1568}, None),
        MemoryDep('buf297', c0, {c0: 602112}, None)]
op293_op294_op295_op297.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf281', c0, {c0: 602112}, None),
        MemoryDep('buf292', c0, {c0: 602112}, None)]
op293_op294_op295_op297.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg166_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg167_1', c1, {c0: 1568, c1: 384}, None)]
op293_op294_op295_op297.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf294.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf295.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op293_op294_op295_op297.snodes[0] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 602112}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 602112}, None),
        MemoryDep('buf281', c0, {c0: 602112}, None),
        MemoryDep('buf292', c0, {c0: 602112}, None)]
op293.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 384}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (602112, 1)
op293.sizes = ([1568, 384], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op293_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf292', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf293', get_index_5, add_3, None)
        return store
op293_op294_op295_op297.snodes[1] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 1568}, None)]
op294.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 602112}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf294.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (1568, 384)
op294.sizes = ([1568], [384])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op294_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem)
        return store_reduction
op293_op294_op295_op297.snodes[2] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 1568}, None)]
op295.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 602112}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf295.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (1568, 384)
op295.sizes = ([1568], [384])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op295_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_1, getitem_1)
        return store_reduction
op293_op294_op295_op297.snodes[3] =
op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 602112}, None)]
op297.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf294', c0, {c0: 1568}, None),
        MemoryDep('buf295', c0, {c0: 1568}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg167_1', c1, {c0: 1568, c1: 384}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (602112, 1)
op297.sizes = ([1568, 384], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op297_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf294', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf295', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf297', get_index_5, add_1, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelOut)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op298.outputs = [
    buf298: ExternKernelOut
    buf298.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op298.node.kernel = extern_kernels.mm


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 1806336}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 1806336}, None)]
op299.met_dependencies = [MemoryDep('arg169_1', c1, {c0: 1568, c1: 1152}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (1806336, 1)
op299.sizes = ([1568, 1152], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op299_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf299', get_index_4, mul_2, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op300.node.kernel = extern_kernels.mm


op301_op302_op304: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op301_op302_op304.writes = 
    [   MemoryDep('buf301', c0, {c0: 1568}, None),
        MemoryDep('buf302', c0, {c0: 1568}, None),
        MemoryDep('buf304', c0, {c0: 602112}, None)]
op301_op302_op304.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf300', c0, {c0: 602112}, None)]
op301_op302_op304.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg172_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 384}, None)]
op301_op302_op304.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op301_op302_op304.snodes[0] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 1568}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf300', c0, {c0: 602112}, None)]
op301.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 1568, c1: 384}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (1568, 384)
op301.sizes = ([1568], [384])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op301_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem)
        return store_reduction
op301_op302_op304.snodes[1] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 1568}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf300', c0, {c0: 602112}, None)]
op302.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 1568, c1: 384}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (1568, 384)
op302.sizes = ([1568], [384])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op302_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf302', get_index_3, getitem_1)
        return store_reduction
op301_op302_op304.snodes[2] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 602112}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf300', c0, {c0: 602112}, None),
        MemoryDep('buf301', c0, {c0: 1568}, None),
        MemoryDep('buf302', c0, {c0: 1568}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg172_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 384}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (602112, 1)
op304.sizes = ([1568, 384], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op304_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf301', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf302', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg172_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg173_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf304', get_index_7, add_3, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.node.kernel = extern_kernels.mm


op306: ExternKernelSchedulerNode(FallbackKernel)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: FallbackKernel
    buf306.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op306.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op307: ExternKernelSchedulerNode(MultiOutput)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: MultiOutput
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op307.node.kernel = None


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op311.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312_op313_op314_op316: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op312_op313_op314_op316.writes = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf313', c0, {c0: 1568}, None),
        MemoryDep('buf314', c0, {c0: 1568}, None),
        MemoryDep('buf316', c0, {c0: 602112}, None)]
op312_op313_op314_op316.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf300', c0, {c0: 602112}, None),
        MemoryDep('buf311', c0, {c0: 602112}, None)]
op312_op313_op314_op316.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg177_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 384}, None)]
op312_op313_op314_op316.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf313.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf314.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op312_op313_op314_op316.snodes[0] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 602112}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 602112}, None),
        MemoryDep('buf300', c0, {c0: 602112}, None),
        MemoryDep('buf311', c0, {c0: 602112}, None)]
op312.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 384}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (602112, 1)
op312.sizes = ([1568, 384], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op312_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf311', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg176_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf312', get_index_5, add_3, None)
        return store
op312_op313_op314_op316.snodes[1] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 1568}, None)]
op313.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 602112}, None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf313.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (1568, 384)
op313.sizes = ([1568], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op313_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf313', get_index_1, getitem)
        return store_reduction
op312_op313_op314_op316.snodes[2] =
op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 1568}, None)]
op314.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 602112}, None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf314.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (1568, 384)
op314.sizes = ([1568], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op314_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf314', get_index_1, getitem_1)
        return store_reduction
op312_op313_op314_op316.snodes[3] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 602112}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf313', c0, {c0: 1568}, None),
        MemoryDep('buf314', c0, {c0: 1568}, None)]
op316.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 384}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (602112, 1)
op316.sizes = ([1568, 384], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op316_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf313', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf314', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg177_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg178_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf316', get_index_5, add_1, None)
        return store


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op317.node.kernel = extern_kernels.mm


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1806336}, None)]
op318.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 1806336}, None)]
op318.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 1568, c1: 1152}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (1806336, 1)
op318.sizes = ([1568, 1152], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op318_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf317', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg180_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf318', get_index_4, mul_2, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelOut)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelOut
    buf319.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op319.node.kernel = extern_kernels.mm


op320_op321_op323: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op320_op321_op323.writes = 
    [   MemoryDep('buf320', c0, {c0: 1568}, None),
        MemoryDep('buf321', c0, {c0: 1568}, None),
        MemoryDep('buf323', c0, {c0: 602112}, None)]
op320_op321_op323.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf319', c0, {c0: 602112}, None)]
op320_op321_op323.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 384}, None)]
op320_op321_op323.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf320.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf321.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op320_op321_op323.snodes[0] =
op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1568}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf319', c0, {c0: 602112}, None)]
op320.met_dependencies = [MemoryDep('arg182_1', c1, {c0: 1568, c1: 384}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf320.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (1568, 384)
op320.sizes = ([1568], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op320_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf320', get_index_3, getitem)
        return store_reduction
op320_op321_op323.snodes[1] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 1568}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf319', c0, {c0: 602112}, None)]
op321.met_dependencies = [MemoryDep('arg182_1', c1, {c0: 1568, c1: 384}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf321.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (1568, 384)
op321.sizes = ([1568], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op321_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf321', get_index_3, getitem_1)
        return store_reduction
op320_op321_op323.snodes[2] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 602112}, None)]
op323.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf319', c0, {c0: 602112}, None),
        MemoryDep('buf320', c0, {c0: 1568}, None),
        MemoryDep('buf321', c0, {c0: 1568}, None)]
op323.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 384}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (602112, 1)
op323.sizes = ([1568, 384], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op323_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf320', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf321', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg183_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg184_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf323', get_index_7, add_3, None)
        return store


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.node.kernel = extern_kernels.mm


op325: ExternKernelSchedulerNode(FallbackKernel)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: FallbackKernel
    buf325.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf325.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
    ]
]
op325.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op326: ExternKernelSchedulerNode(MultiOutput)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf325', mode=None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: MultiOutput
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op326.node.kernel = None


op330: ExternKernelSchedulerNode(ExternKernelOut)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op330.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelOut
    buf330.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.mm


op331_op332_op333_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op331_op332_op333_op335.writes = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf332', c0, {c0: 1568}, None),
        MemoryDep('buf333', c0, {c0: 1568}, None),
        MemoryDep('buf335', c0, {c0: 602112}, None)]
op331_op332_op333_op335.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf319', c0, {c0: 602112}, None),
        MemoryDep('buf330', c0, {c0: 602112}, None)]
op331_op332_op333_op335.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg187_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 384}, None)]
op331_op332_op333_op335.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
    ]
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op331_op332_op333_op335.snodes[0] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 602112}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 602112}, None),
        MemoryDep('buf319', c0, {c0: 602112}, None),
        MemoryDep('buf330', c0, {c0: 602112}, None)]
op331.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg187_1', c1, {c0: 1568, c1: 384}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (602112, 1)
op331.sizes = ([1568, 384], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op331_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf330', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg187_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf331', get_index_5, add_3, None)
        return store
op331_op332_op333_op335.snodes[1] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1568}, None)]
op332.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 602112}, None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (1568, 384)
op332.sizes = ([1568], [384])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op332_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf332', get_index_1, getitem)
        return store_reduction
op331_op332_op333_op335.snodes[2] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 1568}, None)]
op333.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 602112}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (1568, 384)
op333.sizes = ([1568], [384])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op333_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_1, getitem_1)
        return store_reduction
op331_op332_op333_op335.snodes[3] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 602112}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf332', c0, {c0: 1568}, None),
        MemoryDep('buf333', c0, {c0: 1568}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 384}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (602112, 1)
op335.sizes = ([1568, 384], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op335_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf333', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg188_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg189_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf335', get_index_5, add_1, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 1806336}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', c0, {c0: 1806336}, None)]
op337.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 1568, c1: 1152}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (1806336, 1)
op337.sizes = ([1568, 1152], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg191_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf337', get_index_4, mul_2, None)
        return store


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
    ]
]
op338.node.kernel = extern_kernels.mm


op339_op340_op342: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op339_op340_op342.writes = 
    [   MemoryDep('buf339', c0, {c0: 1568}, None),
        MemoryDep('buf340', c0, {c0: 1568}, None),
        MemoryDep('buf342', c0, {c0: 602112}, None)]
op339_op340_op342.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf338', c0, {c0: 602112}, None)]
op339_op340_op342.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg195_1', c1, {c0: 1568, c1: 384}, None)]
op339_op340_op342.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf339.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf340.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op339_op340_op342.snodes[0] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 1568}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf338', c0, {c0: 602112}, None)]
op339.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 1568, c1: 384}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf339.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (1568, 384)
op339.sizes = ([1568], [384])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op339_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf339', get_index_3, getitem)
        return store_reduction
op339_op340_op342.snodes[1] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1568}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf338', c0, {c0: 602112}, None)]
op340.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 1568, c1: 384}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf340.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1568, 384)
op340.sizes = ([1568], [384])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op340_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf340', get_index_3, getitem_1)
        return store_reduction
op339_op340_op342.snodes[2] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 602112}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf338', c0, {c0: 602112}, None),
        MemoryDep('buf339', c0, {c0: 1568}, None),
        MemoryDep('buf340', c0, {c0: 1568}, None)]
op342.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg195_1', c1, {c0: 1568, c1: 384}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (602112, 1)
op342.sizes = ([1568, 384], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op342_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf339', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf340', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg194_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg195_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf342', get_index_7, add_3, None)
        return store


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf342', mode=None)]
op343.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.node.kernel = extern_kernels.mm


op344: ExternKernelSchedulerNode(FallbackKernel)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: FallbackKernel
    buf344.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf344.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
    ]
]
op344.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op345: ExternKernelSchedulerNode(MultiOutput)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: MultiOutput
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op345.node.kernel = None


op349: ExternKernelSchedulerNode(ExternKernelOut)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op349.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op349.outputs = [
    buf349: ExternKernelOut
    buf349.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False)]
]
op349.node.kernel = extern_kernels.mm


op350_op351_op352_op354: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op350_op351_op352_op354.writes = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf351', c0, {c0: 1568}, None),
        MemoryDep('buf352', c0, {c0: 1568}, None),
        MemoryDep('buf354', c0, {c0: 602112}, None)]
op350_op351_op352_op354.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf338', c0, {c0: 602112}, None),
        MemoryDep('buf349', c0, {c0: 602112}, None)]
op350_op351_op352_op354.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg199_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 384}, None)]
op350_op351_op352_op354.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
    ]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf351.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf352.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op350_op351_op352_op354.snodes[0] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 602112}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 602112}, None),
        MemoryDep('buf338', c0, {c0: 602112}, None),
        MemoryDep('buf349', c0, {c0: 602112}, None)]
op350.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 384}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
    ]
]
op350.group.device = cuda:0
op350.group.iteration = (602112, 1)
op350.sizes = ([1568, 384], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op350_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf349', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg198_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf350', get_index_5, add_3, None)
        return store
op350_op351_op352_op354.snodes[1] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 1568}, None)]
op351.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 602112}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf351.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (1568, 384)
op351.sizes = ([1568], [384])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op351_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf351', get_index_1, getitem)
        return store_reduction
op350_op351_op352_op354.snodes[2] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 1568}, None)]
op352.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 602112}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf352.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (1568, 384)
op352.sizes = ([1568], [384])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op352_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf352', get_index_1, getitem_1)
        return store_reduction
op350_op351_op352_op354.snodes[3] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 602112}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf351', c0, {c0: 1568}, None),
        MemoryDep('buf352', c0, {c0: 1568}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 384}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (602112, 1)
op354.sizes = ([1568, 384], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op354_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf351', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf352', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf354', get_index_5, add_1, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False)]
]
op355.node.kernel = extern_kernels.mm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 1806336}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 1806336}, None)]
op356.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 1568, c1: 1152}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (1806336, 1)
op356.sizes = ([1568, 1152], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op356_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf355', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg202_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf356', get_index_4, mul_2, None)
        return store


op357: ExternKernelSchedulerNode(ExternKernelOut)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op357.outputs = [
    buf357: ExternKernelOut
    buf357.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
    ]
]
op357.node.kernel = extern_kernels.mm


op358_op359_op361: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op358_op359_op361.writes = 
    [   MemoryDep('buf358', c0, {c0: 1568}, None),
        MemoryDep('buf359', c0, {c0: 1568}, None),
        MemoryDep('buf361', c0, {c0: 602112}, None)]
op358_op359_op361.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf357', c0, {c0: 602112}, None)]
op358_op359_op361.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg206_1', c1, {c0: 1568, c1: 384}, None)]
op358_op359_op361.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf358.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf359.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op358_op359_op361.snodes[0] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 1568}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf357', c0, {c0: 602112}, None)]
op358.met_dependencies = [MemoryDep('arg204_1', c1, {c0: 1568, c1: 384}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf358.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (1568, 384)
op358.sizes = ([1568], [384])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op358_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf357', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf358', get_index_3, getitem)
        return store_reduction
op358_op359_op361.snodes[1] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 1568}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf357', c0, {c0: 602112}, None)]
op359.met_dependencies = [MemoryDep('arg204_1', c1, {c0: 1568, c1: 384}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf359.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (1568, 384)
op359.sizes = ([1568], [384])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op359_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf357', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf359', get_index_3, getitem_1)
        return store_reduction
op358_op359_op361.snodes[2] =
op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 602112}, None)]
op361.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf357', c0, {c0: 602112}, None),
        MemoryDep('buf358', c0, {c0: 1568}, None),
        MemoryDep('buf359', c0, {c0: 1568}, None)]
op361.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg206_1', c1, {c0: 1568, c1: 384}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (602112, 1)
op361.sizes = ([1568, 384], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op361_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf357', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf358', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf359', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg205_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg206_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf361', get_index_7, add_3, None)
        return store


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363: ExternKernelSchedulerNode(FallbackKernel)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: FallbackKernel
    buf363.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf363.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
    ]
]
op363.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op364: ExternKernelSchedulerNode(MultiOutput)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: MultiOutput
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op364.node.kernel = None


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op368.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False)]
]
op368.node.kernel = extern_kernels.mm


op369_op370_op371_op373: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op369_op370_op371_op373.writes = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf370', c0, {c0: 1568}, None),
        MemoryDep('buf371', c0, {c0: 1568}, None),
        MemoryDep('buf373', c0, {c0: 602112}, None)]
op369_op370_op371_op373.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf357', c0, {c0: 602112}, None),
        MemoryDep('buf368', c0, {c0: 602112}, None)]
op369_op370_op371_op373.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg209_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg210_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg211_1', c1, {c0: 1568, c1: 384}, None)]
op369_op370_op371_op373.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf369.users = [
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf370.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf371.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op369_op370_op371_op373.snodes[0] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 602112}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf357', c0, {c0: 602112}, None),
        MemoryDep('buf368', c0, {c0: 602112}, None)]
op369.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg209_1', c1, {c0: 1568, c1: 384}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf369.users = [
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
]
op369.group.device = cuda:0
op369.group.iteration = (602112, 1)
op369.sizes = ([1568, 384], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op369_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf357', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf368', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg209_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf369', get_index_5, add_3, None)
        return store
op369_op370_op371_op373.snodes[1] =
op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 1568}, None)]
op370.unmet_dependencies = [MemoryDep('buf369', c0, {c0: 602112}, None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf370.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (1568, 384)
op370.sizes = ([1568], [384])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op370_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf370', get_index_1, getitem)
        return store_reduction
op369_op370_op371_op373.snodes[2] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 1568}, None)]
op371.unmet_dependencies = [MemoryDep('buf369', c0, {c0: 602112}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf371.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (1568, 384)
op371.sizes = ([1568], [384])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op371_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf371', get_index_1, getitem_1)
        return store_reduction
op369_op370_op371_op373.snodes[3] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 602112}, None)]
op373.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf370', c0, {c0: 1568}, None),
        MemoryDep('buf371', c0, {c0: 1568}, None)]
op373.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg211_1', c1, {c0: 1568, c1: 384}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (602112, 1)
op373.sizes = ([1568, 384], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op373_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf371', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg210_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg211_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf373', get_index_5, add_1, None)
        return store


op374: ExternKernelSchedulerNode(ExternKernelOut)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf373', mode=None)]
op374.met_dependencies = [StarDep(name='arg212_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelOut
    buf374.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False)]
]
op374.node.kernel = extern_kernels.mm


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 1806336}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 1806336}, None)]
op375.met_dependencies = [MemoryDep('arg213_1', c1, {c0: 1568, c1: 1152}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (1806336, 1)
op375.sizes = ([1568, 1152], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op375_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf374', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg213_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf375', get_index_4, mul_2, None)
        return store


op376: ExternKernelSchedulerNode(ExternKernelOut)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf375', mode=None)]
op376.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op376.outputs = [
    buf376: ExternKernelOut
    buf376.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf376.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
]
op376.node.kernel = extern_kernels.mm


op377_op378_op380: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op377_op378_op380.writes = 
    [   MemoryDep('buf377', c0, {c0: 1568}, None),
        MemoryDep('buf378', c0, {c0: 1568}, None),
        MemoryDep('buf380', c0, {c0: 602112}, None)]
op377_op378_op380.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 602112}, None)]
op377_op378_op380.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg216_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 384}, None)]
op377_op378_op380.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf377.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf378.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op377_op378_op380.snodes[0] =
op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 1568}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 602112}, None)]
op377.met_dependencies = [MemoryDep('arg215_1', c1, {c0: 1568, c1: 384}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf377.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (1568, 384)
op377.sizes = ([1568], [384])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op377_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf377', get_index_3, getitem)
        return store_reduction
op377_op378_op380.snodes[1] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 1568}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 602112}, None)]
op378.met_dependencies = [MemoryDep('arg215_1', c1, {c0: 1568, c1: 384}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf378.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (1568, 384)
op378.sizes = ([1568], [384])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op378_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf378', get_index_3, getitem_1)
        return store_reduction
op377_op378_op380.snodes[2] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 602112}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 602112}, None),
        MemoryDep('buf377', c0, {c0: 1568}, None),
        MemoryDep('buf378', c0, {c0: 1568}, None)]
op380.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg216_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 384}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (602112, 1)
op380.sizes = ([1568, 384], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op380_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf377', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf378', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg216_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg217_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf380', get_index_7, add_3, None)
        return store


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='arg218_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.node.kernel = extern_kernels.mm


op382: ExternKernelSchedulerNode(FallbackKernel)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: FallbackKernel
    buf382.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf382.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
    ]
]
op382.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op383: ExternKernelSchedulerNode(MultiOutput)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: MultiOutput
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 196, 32], stride=[75264, 32, 384, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op383.node.kernel = None


op387: ExternKernelSchedulerNode(ExternKernelOut)
op387.writes = [StarDep(name='buf387', mode=None)]
op387.unmet_dependencies = [StarDep(name='buf383', mode=None)]
op387.met_dependencies = [StarDep(name='arg219_1', mode=None)]
op387.outputs = [
    buf387: ExternKernelOut
    buf387.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf387.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False)]
]
op387.node.kernel = extern_kernels.mm


op388_op389_op390_op392: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op388_op389_op390_op392.writes = 
    [   MemoryDep('buf388', c0, {c0: 602112}, None),
        MemoryDep('buf389', c0, {c0: 1568}, None),
        MemoryDep('buf390', c0, {c0: 1568}, None),
        MemoryDep('buf392', c0, {c0: 602112}, None)]
op388_op389_op390_op392.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 602112}, None),
        MemoryDep('buf387', c0, {c0: 602112}, None)]
op388_op389_op390_op392.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg220_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg221_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg222_1', c1, {c0: 1568, c1: 384}, None)]
op388_op389_op390_op392.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf390.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op388_op389_op390_op392.snodes[0] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 602112}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 602112}, None),
        MemoryDep('buf387', c0, {c0: 602112}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg220_1', c1, {c0: 1568, c1: 384}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
]
op388.group.device = cuda:0
op388.group.iteration = (602112, 1)
op388.sizes = ([1568, 384], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op388_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf387', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf388', get_index_5, add_3, None)
        return store
op388_op389_op390_op392.snodes[1] =
op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 1568}, None)]
op389.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 602112}, None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (1568, 384)
op389.sizes = ([1568], [384])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op389_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf389', get_index_1, getitem)
        return store_reduction
op388_op389_op390_op392.snodes[2] =
op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 1568}, None)]
op390.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 602112}, None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf390.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (1568, 384)
op390.sizes = ([1568], [384])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op390_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf390', get_index_1, getitem_1)
        return store_reduction
op388_op389_op390_op392.snodes[3] =
op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 602112}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf388', c0, {c0: 602112}, None),
        MemoryDep('buf389', c0, {c0: 1568}, None),
        MemoryDep('buf390', c0, {c0: 1568}, None)]
op392.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg222_1', c1, {c0: 1568, c1: 384}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (602112, 1)
op392.sizes = ([1568, 384], [])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
class op392_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf389', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf390', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg221_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg222_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf392', get_index_5, add_1, None)
        return store


op393: ExternKernelSchedulerNode(ExternKernelOut)
op393.writes = [StarDep(name='buf393', mode=None)]
op393.unmet_dependencies = [StarDep(name='buf392', mode=None)]
op393.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op393.outputs = [
    buf393: ExternKernelOut
    buf393.layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False)]
]
op393.node.kernel = extern_kernels.mm


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 1806336}, None)]
op394.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 1806336}, None)]
op394.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 1568, c1: 1152}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (1806336, 1)
op394.sizes = ([1568, 1152], [])
buf393_layout = FixedLayout('cuda', torch.float32, size=[1568, 1152], stride=[1152, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1152], stride=[225792, 16128, 1152, 1])
class op394_loop_body:
    var_ranges = {z0: 1568, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf393', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf394', get_index_4, mul_2, None)
        return store


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf394', mode=None)]
op395.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
]
op395.node.kernel = extern_kernels.mm


op396_op397_op399_op400: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op396_op397_op399_op400.writes = 
    [   MemoryDep('buf396', c0, {c0: 1576}, None),
        MemoryDep('buf397', c0, {c0: 1576}, None),
        MemoryDep('buf399', c0, {c0: 605184}, None),
        MemoryDep('buf400', c0, {c0: 605184}, None)]
op396_op397_op399_op400.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf395', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None)]
op396_op397_op399_op400.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg228_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None)]
op396_op397_op399_op400.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf399.users = [NodeUser(node=SchedulerNode(name='op400'), can_inplace=True, is_weak=False)]
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf400.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False),
    ]
]
op396_op397_op399_op400.snodes[0] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 1576}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf395', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None)]
op396.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 1576, c1: 384}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (1576, 384)
op396.sizes = ([8, 197], [384])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op396_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = z2
    index2 = 75264*z0 + z2 + 384*ModularIndexing(I, 1, 196)
    index3 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf396', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg227_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op396_op397_op399_op400.snodes[1] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 1576}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf395', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None)]
op397.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 1576, c1: 384}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (1576, 384)
op397.sizes = ([8, 197], [384])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op397_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = z2
    index2 = 75264*z0 + z2 + 384*ModularIndexing(I, 1, 196)
    index3 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf397', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg227_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op396_op397_op399_op400.snodes[2] =
op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 605184}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf395', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf396', c0, {c0: 1576}, None),
        MemoryDep('buf397', c0, {c0: 1576}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg228_1', c1, {c0: 1576, c1: 384}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf399.users = [NodeUser(node=SchedulerNode(name='op400'), can_inplace=True, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (605184, 1)
op399.sizes = ([8, 197, 384], [])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op399_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = z2
    index2 = 75264*z0 + z2 + 384*ModularIndexing(I, 1, 196)
    index3 = 197*z0 + z1
    index4 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf396', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('buf397', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf399', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg227_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op396_op397_op399_op400.snodes[3] =
op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 605184}, None)]
op400.unmet_dependencies = [MemoryDep('buf399', c0, {c0: 605184}, None)]
op400.met_dependencies = [MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None)]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf400.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False),
    ]
]
op400.group.device = cuda:0
op400.group.iteration = (605184, 1)
op400.sizes = ([1576, 384], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op400_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg229_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf400', get_index_2, add, None)
        return store


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op401.met_dependencies = [StarDep(name='arg230_1', mode=None)]
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op401.node.kernel = extern_kernels.mm


op402: ExternKernelSchedulerNode(ExternKernelOut)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op402.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op402.outputs = [
    buf402: ExternKernelOut
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False)]
]
op402.node.kernel = extern_kernels.mm


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 3072}, None)]
op403.unmet_dependencies = [MemoryDep('buf402', c0, {c0: 3072}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 32], stride=[384, 32, 32, 1])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (3072, 1)
op403.sizes = ([3072], [])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 32], stride=[384, 32, 32, 1])
class op403_loop_body:
    var_ranges = {z0: 3072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf403', get_index_1, mul, None)
        return store


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 605184}, None)]
op404.unmet_dependencies = [MemoryDep('buf401', 151296*c0 + c1 + 768*c2, {c0: 8, c1: 384, c2: 197}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 32, 197], stride=[75648, 6304, 197, 1])
    buf404.users = [NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (605184, 1)
op404.sizes = ([8, 384, 197], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 32, 197], stride=[75648, 6304, 197, 1])
class op404_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf404', get_index_1, load, None)
        return store


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf403', mode=None), StarDep(name='buf404', mode=None)]
op405.met_dependencies = []
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
    buf405.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
    ]
]
op405.node.kernel = extern_kernels.bmm


op406_op407_op408: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op406_op407_op408.writes = 
    [   MemoryDep('buf406', c0, {c0: 96}, None),
        MemoryDep('buf407', c0, {c0: 96}, None),
        MemoryDep('buf408', 2368*c0 + c1, {c0: 8, c1: 2364}, None)]
op406_op407_op408.unmet_dependencies = [MemoryDep('buf405', c0, {c0: 18912}, None)]
op406_op407_op408.met_dependencies = []
op406_op407_op408.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
    ]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op406_op407_op408.snodes[0] =
op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 96}, None)]
op406.unmet_dependencies = [MemoryDep('buf405', c0, {c0: 18912}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (96, 197)
op406.sizes = ([96], [197])
buf405_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
class op406_loop_body:
    var_ranges = {z0: 96, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf406', get_index_1, reduction)
        return store_reduction
op406_op407_op408.snodes[1] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 96}, None)]
op407.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 18912}, None),
        MemoryDep('buf406', c0, {c0: 96}, None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (96, 197)
op407.sizes = ([96], [197])
buf405_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
class op407_loop_body:
    var_ranges = {z0: 96, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf406', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf407', get_index_2, reduction)
        return store_reduction
op406_op407_op408.snodes[2] =
op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', 2368*c0 + c1, {c0: 8, c1: 2364}, None)]
op408.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 18912}, None),
        MemoryDep('buf406', c0, {c0: 96}, None),
        MemoryDep('buf407', c0, {c0: 96}, None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (18912, 1)
op408.sizes = ([8, 12, 197], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
class op408_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 197}
    index0 = 2364*z0 + 197*z1 + z2
    index1 = 12*z0 + z1
    index2 = 2368*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf406', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf407', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf408', get_index_3, truediv, None)
        return store


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 18912}, None)]
op409.unmet_dependencies = [   MemoryDep('buf408', c1 + 2368*((c0//12)) + 197*ModularIndexing(c0, 1, 12), {c0: 96, c1: 197}, None)]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 18912, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (18912, 1)
op409.sizes = ([96, 197], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 18912, 1])
class op409_loop_body:
    var_ranges = {z0: 96, z1: 197}
    index0 = z1 + 2368*((z0//12)) + 197*ModularIndexing(z0, 1, 12)
    index1 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf409', get_index_1, load, None)
        return store


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 605184}, None)]
op410.unmet_dependencies = [   MemoryDep('buf401', 151296*c0 + 32*c1 + 768*c2 + c3 + 384, {c0: 8, c1: 12, c2: 197, c3: 32}, None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 32], stride=[75648, 6304, 32, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (605184, 1)
op410.sizes = ([8, 12, 197, 32], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 32], stride=[75648, 6304, 32, 1])
class op410_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 197, z3: 32}
    index0 = 151296*z0 + 32*z1 + 768*z2 + z3 + 384
    index1 = 75648*z0 + 6304*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf410', get_index_1, load, None)
        return store


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf409', mode=None), StarDep(name='buf410', mode=None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda', torch.float32, size=[96, 1, 32], stride=[32, 32, 1])
    buf411.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.node.kernel = extern_kernels.bmm


op412: ExternKernelSchedulerNode(ExternKernelOut)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op412.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op412.outputs = [
    buf412: ExternKernelOut
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
]
op412.node.kernel = extern_kernels.mm


op413_op414_op415_op417: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op413_op414_op415_op417.writes = 
    [   MemoryDep('buf413', c0, {c0: 3072}, None),
        MemoryDep('buf414', c0, {c0: 8}, None),
        MemoryDep('buf415', c0, {c0: 8}, None),
        MemoryDep('buf417', c0, {c0: 3072}, None)]
op413_op414_op415_op417.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c1 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 384}, None),
        MemoryDep('buf395', 75264*c0 + c1 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 384}, None),
        MemoryDep('buf412', c0, {c0: 3072}, None)]
op413_op414_op415_op417.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg233_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg234_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg235_1', c1, {c0: 8, c1: 384}, None)]
op413_op414_op415_op417.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf414.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf415.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 384, 1])
    buf417.users = [NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op413_op414_op415_op417.snodes[0] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 3072}, None)]
op413.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c1 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 384}, None),
        MemoryDep('buf395', 75264*c0 + c1 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 384}, None),
        MemoryDep('buf412', c0, {c0: 3072}, None)]
op413.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg233_1', c1, {c0: 8, c1: 384}, None)]
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
]
op413.group.device = cuda:0
op413.group.iteration = (3072, 1)
op413.sizes = ([8, 384], [])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
class op413_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = z1
    index1 = 75264*z0 + z1 + 384*ModularIndexing(I, 1, 196)
    index2 = 384*z0 + z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index2')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf413', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg227_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op413_op414_op415_op417.snodes[1] =
op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 8}, None)]
op414.unmet_dependencies = [MemoryDep('buf413', c0, {c0: 3072}, None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf414.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (8, 384)
op414.sizes = ([8], [384])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op414_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf414', get_index_1, getitem)
        return store_reduction
op413_op414_op415_op417.snodes[2] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 8}, None)]
op415.unmet_dependencies = [MemoryDep('buf413', c0, {c0: 3072}, None)]
op415.met_dependencies = []
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf415.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (8, 384)
op415.sizes = ([8], [384])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op415_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf415', get_index_1, getitem_1)
        return store_reduction
op413_op414_op415_op417.snodes[3] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 3072}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf413', c0, {c0: 3072}, None),
        MemoryDep('buf414', c0, {c0: 8}, None),
        MemoryDep('buf415', c0, {c0: 8}, None)]
op417.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg235_1', c1, {c0: 8, c1: 384}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 384, 1])
    buf417.users = [NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (3072, 1)
op417.sizes = ([8, 384], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 384, 1])
class op417_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf414', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf415', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf417', get_index_5, add_1, None)
        return store


op418: ExternKernelSchedulerNode(ExternKernelOut)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf417', mode=None)]
op418.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op418.outputs = [
    buf418: ExternKernelOut
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 1152], stride=[1152, 1])
    buf418.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False)]
]
op418.node.kernel = extern_kernels.mm


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 9216}, None)]
op419.unmet_dependencies = [MemoryDep('buf418', c0, {c0: 9216}, None)]
op419.met_dependencies = [MemoryDep('arg237_1', c1, {c0: 8, c1: 1152}, None)]
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1152], stride=[1152, 1152, 1])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (9216, 1)
op419.sizes = ([8, 1152], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 1152], stride=[1152, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1152], stride=[1152, 1152, 1])
class op419_loop_body:
    var_ranges = {z0: 8, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf418', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf419', get_index_4, mul_2, None)
        return store


op420: ExternKernelSchedulerNode(ExternKernelOut)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf419', mode=None)]
op420.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op420.outputs = [
    buf420: ExternKernelOut
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf420.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.node.kernel = extern_kernels.mm


op421_op422_op423_op425: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op421_op422_op423_op425.writes = 
    [   MemoryDep('buf421', c0, {c0: 605184}, None),
        MemoryDep('buf422', c0, {c0: 1576}, None),
        MemoryDep('buf423', c0, {c0: 1576}, None),
        MemoryDep('buf425', c0, {c0: 605184}, None)]
op421_op422_op423_op425.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf395', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf413', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf420', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None)]
op421_op422_op423_op425.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg239_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg240_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg241_1', c1, {c0: 1576, c1: 384}, None)]
op421_op422_op423_op425.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf421.users = [
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
    ]
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf422.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf423.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf425.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op421_op422_op423_op425.snodes[0] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 605184}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf388', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf395', 75264*c0 + c2 + 384*ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf413', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf420', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None)]
op421.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg239_1', c1, {c0: 1576, c1: 384}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf421.users = [
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
    ]
]
op421.group.device = cuda:0
op421.group.iteration = (605184, 1)
op421.sizes = ([8, 197, 384], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 3072, 1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 384], stride=[75264, 5376, 384, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op421_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 384*z0 + z2
    index2 = z2
    index3 = I + 1
    index4 = 75264*z0 + z2 + 384*ModularIndexing(I, 1, 196)
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf421', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf420', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg239_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock3(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('arg227_1', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        where = ops.where(lt, masked_subblock3, masked_subblock4)
        return where
op421_op422_op423_op425.snodes[1] =
op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 1576}, None)]
op422.unmet_dependencies = [MemoryDep('buf421', c0, {c0: 605184}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf422.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (1576, 384)
op422.sizes = ([1576], [384])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op422_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf422', get_index_1, getitem)
        return store_reduction
op421_op422_op423_op425.snodes[2] =
op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 1576}, None)]
op423.unmet_dependencies = [MemoryDep('buf421', c0, {c0: 605184}, None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf423.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (1576, 384)
op423.sizes = ([1576], [384])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op423_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf423', get_index_1, getitem_1)
        return store_reduction
op421_op422_op423_op425.snodes[3] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 605184}, None)]
op425.unmet_dependencies = 
    [   MemoryDep('buf421', c0, {c0: 605184}, None),
        MemoryDep('buf422', c0, {c0: 1576}, None),
        MemoryDep('buf423', c0, {c0: 1576}, None)]
op425.met_dependencies = 
    [   MemoryDep('arg240_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg241_1', c1, {c0: 1576, c1: 384}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf425.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op425.group.device = cuda:0
op425.group.iteration = (605184, 1)
op425.sizes = ([1576, 384], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op425_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf422', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf423', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg240_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg241_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf425', get_index_5, add_1, None)
        return store


op426: ExternKernelSchedulerNode(ExternKernelOut)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf425', mode=None)]
op426.met_dependencies = [StarDep(name='arg242_1', mode=None)]
op426.outputs = [
    buf426: ExternKernelOut
    buf426.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf426.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op426.node.kernel = extern_kernels.mm


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf425', mode=None)]
op427.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 3072}, None)]
op428.unmet_dependencies = [MemoryDep('buf427', c0, {c0: 3072}, None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 32], stride=[384, 32, 32, 1])
    buf428.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (3072, 1)
op428.sizes = ([3072], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 32], stride=[384, 32, 32, 1])
class op428_loop_body:
    var_ranges = {z0: 3072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf428', get_index_1, mul, None)
        return store


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 605184}, None)]
op429.unmet_dependencies = [MemoryDep('buf426', 151296*c0 + c1 + 768*c2, {c0: 8, c1: 384, c2: 197}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 32, 197], stride=[75648, 6304, 197, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (605184, 1)
op429.sizes = ([8, 384, 197], [])
buf426_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 32, 197], stride=[75648, 6304, 197, 1])
class op429_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf426', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf429', get_index_1, load, None)
        return store


op430: ExternKernelSchedulerNode(ExternKernelOut)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf428', mode=None), StarDep(name='buf429', mode=None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ExternKernelOut
    buf430.layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
    ]
]
op430.node.kernel = extern_kernels.bmm


op431_op432_op433: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op431_op432_op433.writes = 
    [   MemoryDep('buf431', c0, {c0: 96}, None),
        MemoryDep('buf432', c0, {c0: 96}, None),
        MemoryDep('buf433', 2368*c0 + c1, {c0: 8, c1: 2364}, None)]
op431_op432_op433.unmet_dependencies = [MemoryDep('buf430', c0, {c0: 18912}, None)]
op431_op432_op433.met_dependencies = []
op431_op432_op433.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
    ]
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op431_op432_op433.snodes[0] =
op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 96}, None)]
op431.unmet_dependencies = [MemoryDep('buf430', c0, {c0: 18912}, None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (96, 197)
op431.sizes = ([96], [197])
buf430_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
class op431_loop_body:
    var_ranges = {z0: 96, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf431', get_index_1, reduction)
        return store_reduction
op431_op432_op433.snodes[1] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 96}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf430', c0, {c0: 18912}, None),
        MemoryDep('buf431', c0, {c0: 96}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (96, 197)
op432.sizes = ([96], [197])
buf430_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
class op432_loop_body:
    var_ranges = {z0: 96, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf431', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf432', get_index_2, reduction)
        return store_reduction
op431_op432_op433.snodes[2] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', 2368*c0 + c1, {c0: 8, c1: 2364}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf430', c0, {c0: 18912}, None),
        MemoryDep('buf431', c0, {c0: 96}, None),
        MemoryDep('buf432', c0, {c0: 96}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (18912, 1)
op433.sizes = ([8, 12, 197], [])
buf430_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 197, 1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 1], stride=[12, 1, 96, 96])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
class op433_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 197}
    index0 = 2364*z0 + 197*z1 + z2
    index1 = 12*z0 + z1
    index2 = 2368*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf431', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf432', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf433', get_index_3, truediv, None)
        return store


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 18912}, None)]
op434.unmet_dependencies = [   MemoryDep('buf433', c1 + 2368*((c0//12)) + 197*ModularIndexing(c0, 1, 12), {c0: 96, c1: 197}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 18912, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (18912, 1)
op434.sizes = ([96, 197], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 1, 197], stride=[2368, 197, 197, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[96, 1, 197], stride=[197, 18912, 1])
class op434_loop_body:
    var_ranges = {z0: 96, z1: 197}
    index0 = z1 + 2368*((z0//12)) + 197*ModularIndexing(z0, 1, 12)
    index1 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf434', get_index_1, load, None)
        return store


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 605184}, None)]
op435.unmet_dependencies = [   MemoryDep('buf426', 151296*c0 + 32*c1 + 768*c2 + c3 + 384, {c0: 8, c1: 12, c2: 197, c3: 32}, None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 32], stride=[75648, 6304, 32, 1])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (605184, 1)
op435.sizes = ([8, 12, 197, 32], [])
buf426_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 32], stride=[75648, 6304, 32, 1])
class op435_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 197, z3: 32}
    index0 = 151296*z0 + 32*z1 + 768*z2 + z3 + 384
    index1 = 75648*z0 + 6304*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf426', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf435', get_index_1, load, None)
        return store


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf434', mode=None), StarDep(name='buf435', mode=None)]
op436.met_dependencies = []
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[96, 1, 32], stride=[32, 32, 1])
    buf436.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op436.node.kernel = extern_kernels.bmm


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op437.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf437.users = [
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
    ]
]
op437.node.kernel = extern_kernels.mm


op438_op439_op441: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op438_op439_op441.writes = 
    [   MemoryDep('buf438', c0, {c0: 8}, None),
        MemoryDep('buf439', c0, {c0: 8}, None),
        MemoryDep('buf441', c0, {c0: 3072}, None)]
op438_op439_op441.unmet_dependencies = 
    [   MemoryDep('buf421', 75648*c0 + c1, {c0: 8, c1: 384}, None),
        MemoryDep('buf437', c0, {c0: 3072}, None)]
op438_op439_op441.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg246_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg247_1', c1, {c0: 8, c1: 384}, None)]
op438_op439_op441.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf438.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf439.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 384, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op438_op439_op441.snodes[0] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 8}, None)]
op438.unmet_dependencies = 
    [   MemoryDep('buf421', 75648*c0 + c1, {c0: 8, c1: 384}, None),
        MemoryDep('buf437', c0, {c0: 3072}, None)]
op438.met_dependencies = [MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf438.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (8, 384)
op438.sizes = ([8], [384])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op438_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 75648*z0 + z1
    index1 = 384*z0 + z1
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf437', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf438', get_index_3, getitem)
        return store_reduction
op438_op439_op441.snodes[1] =
op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 8}, None)]
op439.unmet_dependencies = 
    [   MemoryDep('buf421', 75648*c0 + c1, {c0: 8, c1: 384}, None),
        MemoryDep('buf437', c0, {c0: 3072}, None)]
op439.met_dependencies = [MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf439.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (8, 384)
op439.sizes = ([8], [384])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op439_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 75648*z0 + z1
    index1 = 384*z0 + z1
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf437', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf439', get_index_3, getitem_1)
        return store_reduction
op438_op439_op441.snodes[2] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 3072}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf421', 75648*c0 + c1, {c0: 8, c1: 384}, None),
        MemoryDep('buf437', c0, {c0: 3072}, None),
        MemoryDep('buf438', c0, {c0: 8}, None),
        MemoryDep('buf439', c0, {c0: 8}, None)]
op441.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg246_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg247_1', c1, {c0: 8, c1: 384}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 384, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (3072, 1)
op441.sizes = ([8, 384], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 384], stride=[384, 384, 1])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 75648*z0 + z1
    index1 = 384*z0 + z1
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf437', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf438', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf439', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg246_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg247_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf441', get_index_7, add_3, None)
        return store


op442: ExternKernelSchedulerNode(ExternKernelOut)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf441', mode=None)]
op442.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op442.outputs = [
    buf442: ExternKernelOut
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 1152], stride=[1152, 1])
    buf442.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False)]
]
op442.node.kernel = extern_kernels.mm


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 9216}, None)]
op443.unmet_dependencies = [MemoryDep('buf442', c0, {c0: 9216}, None)]
op443.met_dependencies = [MemoryDep('arg249_1', c1, {c0: 8, c1: 1152}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1152], stride=[1152, 1152, 1])
    buf443.users = [NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (9216, 1)
op443.sizes = ([8, 1152], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 1152], stride=[1152, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1152], stride=[1152, 1152, 1])
class op443_loop_body:
    var_ranges = {z0: 8, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf442', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf443', get_index_4, mul_2, None)
        return store


op444: ExternKernelSchedulerNode(ExternKernelOut)
op444.writes = [StarDep(name='buf444', mode=None)]
op444.unmet_dependencies = [StarDep(name='buf443', mode=None)]
op444.met_dependencies = [StarDep(name='arg250_1', mode=None)]
op444.outputs = [
    buf444: ExternKernelOut
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf444.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.node.kernel = extern_kernels.mm


op445_op446_op447_op449: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op445_op446_op447_op449.writes = 
    [   MemoryDep('buf445', c0, {c0: 605184}, None),
        MemoryDep('buf446', c0, {c0: 1576}, None),
        MemoryDep('buf447', c0, {c0: 1576}, None),
        MemoryDep('buf449', c0, {c0: 605184}, None)]
op445_op446_op447_op449.unmet_dependencies = 
    [   MemoryDep('buf421', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf421', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf437', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf444', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None)]
op445_op446_op447_op449.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg252_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg253_1', c1, {c0: 1576, c1: 384}, None)]
op445_op446_op447_op449.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False),
    ]
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf446.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf447.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf449.users = [
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
    ]
]
op445_op446_op447_op449.snodes[0] =
op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 605184}, None)]
op445.unmet_dependencies = 
    [   MemoryDep('buf421', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf421', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf437', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf444', 384*c0 + c2, {c0: 8, c1: 197, c2: 384}, None)]
op445.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False),
    ]
]
op445.group.device = cuda:0
op445.group.iteration = (605184, 1)
op445.sizes = ([8, 197, 384], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op445_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 384*z0 + z2
    index3 = z2
    index4 = 75648*z0 + z2 + 384*I + 384
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf445', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf437', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf444', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg251_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf421', get_index)
        return load
op445_op446_op447_op449.snodes[1] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 1576}, None)]
op446.unmet_dependencies = [MemoryDep('buf445', c0, {c0: 605184}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf446.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (1576, 384)
op446.sizes = ([1576], [384])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op446_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf446', get_index_1, getitem)
        return store_reduction
op445_op446_op447_op449.snodes[2] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 1576}, None)]
op447.unmet_dependencies = [MemoryDep('buf445', c0, {c0: 605184}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf447.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (1576, 384)
op447.sizes = ([1576], [384])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op447_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf447', get_index_1, getitem_1)
        return store_reduction
op445_op446_op447_op449.snodes[3] =
op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 605184}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf445', c0, {c0: 605184}, None),
        MemoryDep('buf446', c0, {c0: 1576}, None),
        MemoryDep('buf447', c0, {c0: 1576}, None)]
op449.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg253_1', c1, {c0: 1576, c1: 384}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf449.users = [
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
    ]
]
op449.group.device = cuda:0
op449.group.iteration = (605184, 1)
op449.sizes = ([1576, 384], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op449_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf446', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf447', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg252_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg253_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf449', get_index_5, add_1, None)
        return store


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 602112}, None)]
op450.unmet_dependencies = [MemoryDep('buf449', 75648*c0 + c1 + 384, {c0: 8, c1: 75264}, None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (602112, 1)
op450.sizes = ([8, 75264], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op450_loop_body:
    var_ranges = {z0: 8, z1: 75264}
    index0 = 75648*z0 + z1 + 384
    index1 = 75264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf450', get_index_1, load, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf450', mode=None)]
op451.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda', torch.float32, size=[1568, 1000], stride=[1000, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
]
op451.node.kernel = extern_kernels.mm


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', 2016*c0 + c1, {c0: 8, c1: 2000}, None)]
op452.unmet_dependencies = [MemoryDep('buf451', 98000*c0 + c1 + 1000*c2, {c0: 16, c1: 1000, c2: 98}, None)]
op452.met_dependencies = [MemoryDep('arg257_1', c1, {c0: 16, c1: 1000}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 2], stride=[2016, 1, 1000])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (16000, 98)
op452.sizes = ([8, 2, 1000], [98])
buf451_layout = FixedLayout('cuda', torch.float32, size=[1568, 1000], stride=[1000, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 2], stride=[2016, 1, 1000])
class op452_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 1000, z3: 98}
    index0 = 196000*z0 + 98000*z1 + z2 + 1000*z3
    index1 = z2
    index2 = 2016*z0 + 1000*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf452', get_index_2, reduction)
        return store_reduction


op455: ExternKernelSchedulerNode(ExternKernelOut)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf449', mode=None)]
op455.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op455.outputs = [
    buf455: ExternKernelOut
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf455.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False)]
]
op455.node.kernel = extern_kernels.mm


op453_op456: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op453_op456.writes = 
    [   MemoryDep('buf453', c0, {c0: 8000}, None),
        MemoryDep('buf456', c0, {c0: 8000}, None)]
op453_op456.unmet_dependencies = 
    [   MemoryDep('buf452', 2016*c0 + c1 + 1000*c2, {c0: 8, c1: 1000, c2: 2}, None),
        MemoryDep('buf455', c0, {c0: 8000}, None)]
op453_op456.met_dependencies = [MemoryDep('arg255_1', c1, {c0: 8, c1: 1000}, None)]
op453_op456.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf453.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False)]
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf456.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op453_op456.snodes[0] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 8000}, None)]
op453.unmet_dependencies = [MemoryDep('buf452', 2016*c0 + c1 + 1000*c2, {c0: 8, c1: 1000, c2: 2}, None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf453.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (8000, 2)
op453.sizes = ([8, 1000], [2])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 2], stride=[2016, 1, 1000])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
class op453_loop_body:
    var_ranges = {z0: 8, z1: 1000, z2: 2}
    index0 = 2016*z0 + z1 + 1000*z2
    index1 = 1000*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf453', get_index_1, reduction)
        return store_reduction
op453_op456.snodes[1] =
op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 8000}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf453', c0, {c0: 8000}, None),
        MemoryDep('buf455', c0, {c0: 8000}, None)]
op456.met_dependencies = [MemoryDep('arg255_1', c1, {c0: 8, c1: 1000}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf456.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (8000, 1)
op456.sizes = ([8, 1000], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
class op456_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg255_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf453', get_index_2)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf456', get_index_3, add_1, None)
        return store



op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 1605632}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 1605632}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 8, c1: 16}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (1605632, 1)
op1.sizes = ([8, 16, 12544], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 12544}
    index0 = 200704*z0 + 12544*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1', get_index_5, add_1, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 1605632}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
    buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (1605632, 1)
op2.sizes = ([1605632], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 12544, 112, 1])
class op2_loop_body:
    var_ranges = {z0: 1605632}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2', get_index_2, mul_1, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelAlloc)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelAlloc
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.node.kernel = extern_kernels.convolution


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 802816}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 802816}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 8, c1: 32}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (802816, 1)
op4.sizes = ([8, 32, 3136], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 32, z2: 3136}
    index0 = 100352*z0 + 3136*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf4', get_index_5, add_1, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 802816}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 802816}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (802816, 1)
op5.sizes = ([802816], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 3136, 56, 1])
class op5_loop_body:
    var_ranges = {z0: 802816}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf5', get_index_2, mul_1, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.convolution


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 401408}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 401408}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 64}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (401408, 1)
op7.sizes = ([8, 64, 784], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 784}
    index0 = 50176*z0 + 784*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 401408}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 401408}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (401408, 1)
op8.sizes = ([401408], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 784, 28, 1])
class op8_loop_body:
    var_ranges = {z0: 401408}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, mul_1, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 196, 14, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op9.node.kernel = extern_kernels.convolution


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 200704}, None)]
op10.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 200704}, None)]
op10.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg18_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg19_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 196, 14, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (200704, 1)
op10.sizes = ([8, 128, 196], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 196, 14, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 196, 14, 1])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 196}
    index0 = 25088*z0 + 196*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf10', get_index_5, add_1, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 200704}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 128}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (200704, 1)
op11.sizes = ([8, 196, 128], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 196, 14, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 25088*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelOut)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelOut
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op12.node.kernel = extern_kernels.mm


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 100352}, None)]
op13.unmet_dependencies = [   MemoryDep('buf12', 50176*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg22_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg23_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg24_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg25_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (100352, 1)
op13.sizes = ([8, 4, 196, 16], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 16}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 12544*z0 + 3136*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf13', get_index_5, add_1, None)
        return store


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 100352}, None)]
op14.unmet_dependencies = [   MemoryDep('buf12', 50176*c0 + 64*c1 + c2 + 256*c3 + 16, {c0: 8, c1: 4, c2: 16, c3: 196}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg22_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg23_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg24_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg25_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (100352, 1)
op14.sizes = ([8, 4, 16, 196], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 16, z3: 196}
    index0 = 50176*z0 + 64*z1 + z2 + 256*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 12544*z0 + 3136*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf14', get_index_5, add_1, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf13', mode=None), StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.bmm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 153664}, None)]
op16.unmet_dependencies = []
op16.met_dependencies = 
    [   MemoryDep('arg26_1', 196*c0 + tmp0, {c0: 4}, None),
        MemoryDep('arg27_1', c1, {c0: 4, c1: 38416}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (153664, 1)
op16.sizes = ([4, 38416], [])
arg27_1_layout = FixedLayout('cuda', torch.int64, size=[196, 196], stride=[196, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[4, 196], stride=[196, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
class op16_loop_body:
    var_ranges = {z0: 4, z1: 38416}
    index0 = z1
    index1 = indirect0 + 196*z0
    index2 = 38416*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg27_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf16', get_index_2, load_1, None)
        return store


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 6272}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1229312}, None),
        MemoryDep('buf16', c1, {c0: 8, c1: 153664}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (6272, 196)
op17.sizes = ([8, 784], [196])
buf15_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_2, reduction)
        return store_reduction


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 6272}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1229312}, None),
        MemoryDep('buf16', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf17', c0, {c0: 6272}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (6272, 196)
op18.sizes = ([8, 784], [196])
buf15_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op18_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf17', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, reduction)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', 38432*c0 + c1, {c0: 32, c1: 38416}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1229312}, None),
        MemoryDep('buf16', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf17', c0, {c0: 6272}, None),
        MemoryDep('buf18', c0, {c0: 6272}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1229312, 1)
op19.sizes = ([8, 4, 196, 196], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
class op19_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 196}
    index0 = 153664*z0 + 38416*z1 + 196*z2 + z3
    index1 = 38416*z1 + 196*z2 + z3
    index2 = 784*z0 + 196*z1 + z2
    index3 = 153728*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf17', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf19', get_index_4, truediv, None)
        return store


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 200704}, None)]
op20.unmet_dependencies = [   MemoryDep('buf12', 50176*c0 + 64*c1 + 256*c2 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg22_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg23_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg24_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg25_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (200704, 1)
op20.sizes = ([8, 4, 196, 32], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 32}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 25088*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf20', get_index_5, add_1, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf19', mode=None), StarDep(name='buf20', mode=None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.node.kernel = extern_kernels.bmm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 200704}, None)]
op22.unmet_dependencies = [   MemoryDep('buf21', 25088*c0 + 32*c1 + 6272*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 196, c2: 128}, None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (200704, 1)
op22.sizes = ([8, 196, 128], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op22_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 128}
    index0 = 25088*z0 + 32*z1 + 6272*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 25088*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf21', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf22', get_index_2, mul_1, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 200704}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 128}, None),
        MemoryDep('buf23', c0, {c0: 200704}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg30_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg31_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg32_1', c1, {c0: 1568, c1: 128}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (200704, 1)
op24.sizes = ([8, 196, 128], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 196, 14, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op24_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 25088*z0 + 128*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg29_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg30_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg31_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg32_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf24', get_index_6, add_2, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 200704}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 200704}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (200704, 1)
op25.sizes = ([200704], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op25_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf25', get_index_1, load, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.mm


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 401408}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 401408}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg35_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg36_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg37_1', c1, {c0: 1568, c1: 256}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (401408, 1)
op27.sizes = ([1568, 256], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
class op27_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg34_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg37_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, add_1, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 401408}, None)]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 401408}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (401408, 1)
op28.sizes = ([401408], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op28_loop_body:
    var_ranges = {z0: 401408}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf27', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf28', get_index_2, mul_1, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 200704}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 200704}, None),
        MemoryDep('buf29', c0, {c0: 200704}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg40_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg41_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg42_1', c1, {c0: 1568, c1: 128}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (200704, 1)
op30.sizes = ([1568, 128], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op30_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf29', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg39_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg41_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg42_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf30', get_index_6, add_2, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 200704}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 200704}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (200704, 1)
op31.sizes = ([200704], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op31_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf31', get_index_1, load, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.mm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 100352}, None)]
op33.unmet_dependencies = [   MemoryDep('buf32', 50176*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg44_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg45_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg46_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg47_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (100352, 1)
op33.sizes = ([8, 4, 196, 16], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
class op33_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 16}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 12544*z0 + 3136*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf33', get_index_5, add_1, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 100352}, None)]
op34.unmet_dependencies = [   MemoryDep('buf32', 50176*c0 + 64*c1 + c2 + 256*c3 + 16, {c0: 8, c1: 4, c2: 16, c3: 196}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg44_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg45_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg46_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg47_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (100352, 1)
op34.sizes = ([8, 4, 16, 196], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
class op34_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 16, z3: 196}
    index0 = 50176*z0 + 64*z1 + z2 + 256*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 12544*z0 + 3136*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf34', get_index_5, add_1, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf33', mode=None), StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.bmm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 153664}, None)]
op36.unmet_dependencies = []
op36.met_dependencies = 
    [   MemoryDep('arg48_1', 196*c0 + tmp0, {c0: 4}, None),
        MemoryDep('arg49_1', c1, {c0: 4, c1: 38416}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (153664, 1)
op36.sizes = ([4, 38416], [])
arg49_1_layout = FixedLayout('cuda', torch.int64, size=[196, 196], stride=[196, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[4, 196], stride=[196, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
class op36_loop_body:
    var_ranges = {z0: 4, z1: 38416}
    index0 = z1
    index1 = indirect0 + 196*z0
    index2 = 38416*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg49_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf36', get_index_2, load_1, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 6272}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1229312}, None),
        MemoryDep('buf36', c1, {c0: 8, c1: 153664}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (6272, 196)
op37.sizes = ([8, 784], [196])
buf35_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_2, reduction)
        return store_reduction


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 6272}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1229312}, None),
        MemoryDep('buf36', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf37', c0, {c0: 6272}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (6272, 196)
op38.sizes = ([8, 784], [196])
buf35_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf37', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf38', get_index_3, reduction)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', 38432*c0 + c1, {c0: 32, c1: 38416}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1229312}, None),
        MemoryDep('buf36', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf37', c0, {c0: 6272}, None),
        MemoryDep('buf38', c0, {c0: 6272}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (1229312, 1)
op39.sizes = ([8, 4, 196, 196], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 196}
    index0 = 153664*z0 + 38416*z1 + 196*z2 + z3
    index1 = 38416*z1 + 196*z2 + z3
    index2 = 784*z0 + 196*z1 + z2
    index3 = 153728*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf37', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf38', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf39', get_index_4, truediv, None)
        return store


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 200704}, None)]
op40.unmet_dependencies = [   MemoryDep('buf32', 50176*c0 + 64*c1 + 256*c2 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg44_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg45_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg46_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg47_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (200704, 1)
op40.sizes = ([8, 4, 196, 32], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 32}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 25088*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf40', get_index_5, add_1, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf39', mode=None), StarDep(name='buf40', mode=None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.bmm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 200704}, None)]
op42.unmet_dependencies = [   MemoryDep('buf41', 25088*c0 + 32*c1 + 6272*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 196, c2: 128}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (200704, 1)
op42.sizes = ([8, 196, 128], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 128}
    index0 = 25088*z0 + 32*z1 + 6272*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 25088*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf41', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf42', get_index_2, mul_1, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 200704}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 200704}, None),
        MemoryDep('buf43', c0, {c0: 200704}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg52_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg53_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg54_1', c1, {c0: 1568, c1: 128}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (200704, 1)
op44.sizes = ([1568, 128], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op44_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg52_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg54_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf44', get_index_6, add_2, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 200704}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 200704}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (200704, 1)
op45.sizes = ([200704], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op45_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf45', get_index_1, load, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 401408}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 401408}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg57_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg59_1', c1, {c0: 1568, c1: 256}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (401408, 1)
op47.sizes = ([1568, 256], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
class op47_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg57_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg58_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg59_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_1, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 401408}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 401408}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (401408, 1)
op48.sizes = ([401408], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op48_loop_body:
    var_ranges = {z0: 401408}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf47', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, mul_1, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 200704}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 200704}, None),
        MemoryDep('buf49', c0, {c0: 200704}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg62_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg64_1', c1, {c0: 1568, c1: 128}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (200704, 1)
op50.sizes = ([1568, 128], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op50_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg62_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg63_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf50', get_index_6, add_2, None)
        return store


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 200704}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 200704}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (200704, 1)
op51.sizes = ([200704], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op51_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf51', get_index_1, load, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
    ]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 100352}, None)]
op53.unmet_dependencies = [   MemoryDep('buf52', 50176*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg66_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg67_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg68_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg69_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (100352, 1)
op53.sizes = ([8, 4, 196, 16], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 16}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 12544*z0 + 3136*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf53', get_index_5, add_1, None)
        return store


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 100352}, None)]
op54.unmet_dependencies = [   MemoryDep('buf52', 50176*c0 + 64*c1 + c2 + 256*c3 + 16, {c0: 8, c1: 4, c2: 16, c3: 196}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg66_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg67_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg68_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg69_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (100352, 1)
op54.sizes = ([8, 4, 16, 196], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
class op54_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 16, z3: 196}
    index0 = 50176*z0 + 64*z1 + z2 + 256*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 12544*z0 + 3136*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf54', get_index_5, add_1, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.bmm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 153664}, None)]
op56.unmet_dependencies = []
op56.met_dependencies = 
    [   MemoryDep('arg70_1', 196*c0 + tmp0, {c0: 4}, None),
        MemoryDep('arg71_1', c1, {c0: 4, c1: 38416}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (153664, 1)
op56.sizes = ([4, 38416], [])
arg71_1_layout = FixedLayout('cuda', torch.int64, size=[196, 196], stride=[196, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[4, 196], stride=[196, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
class op56_loop_body:
    var_ranges = {z0: 4, z1: 38416}
    index0 = z1
    index1 = indirect0 + 196*z0
    index2 = 38416*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg71_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, load_1, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 6272}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf55', c0, {c0: 1229312}, None),
        MemoryDep('buf56', c1, {c0: 8, c1: 153664}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (6272, 196)
op57.sizes = ([8, 784], [196])
buf55_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf57', get_index_2, reduction)
        return store_reduction


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 6272}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf55', c0, {c0: 1229312}, None),
        MemoryDep('buf56', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf57', c0, {c0: 6272}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (6272, 196)
op58.sizes = ([8, 784], [196])
buf55_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf57', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf58', get_index_3, reduction)
        return store_reduction


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 38432*c0 + c1, {c0: 32, c1: 38416}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf55', c0, {c0: 1229312}, None),
        MemoryDep('buf56', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf57', c0, {c0: 6272}, None),
        MemoryDep('buf58', c0, {c0: 6272}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1229312, 1)
op59.sizes = ([8, 4, 196, 196], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 196}
    index0 = 153664*z0 + 38416*z1 + 196*z2 + z3
    index1 = 38416*z1 + 196*z2 + z3
    index2 = 784*z0 + 196*z1 + z2
    index3 = 153728*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf57', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf58', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf59', get_index_4, truediv, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 200704}, None)]
op60.unmet_dependencies = [   MemoryDep('buf52', 50176*c0 + 64*c1 + 256*c2 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg66_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg67_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg68_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg69_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (200704, 1)
op60.sizes = ([8, 4, 196, 32], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 32}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 25088*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf60', get_index_5, add_1, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.bmm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 200704}, None)]
op62.unmet_dependencies = [   MemoryDep('buf61', 25088*c0 + 32*c1 + 6272*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 196, c2: 128}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (200704, 1)
op62.sizes = ([8, 196, 128], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 128}
    index0 = 25088*z0 + 32*z1 + 6272*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 25088*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf62', get_index_2, mul_1, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.mm


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 200704}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 200704}, None),
        MemoryDep('buf63', c0, {c0: 200704}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg74_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg75_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg76_1', c1, {c0: 1568, c1: 128}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (200704, 1)
op64.sizes = ([1568, 128], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op64_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg76_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf64', get_index_6, add_2, None)
        return store


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 200704}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 200704}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (200704, 1)
op65.sizes = ([200704], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op65_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 401408}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 401408}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg79_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg80_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg81_1', c1, {c0: 1568, c1: 256}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (401408, 1)
op67.sizes = ([1568, 256], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
class op67_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg81_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_1, None)
        return store


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 401408}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 401408}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (401408, 1)
op68.sizes = ([401408], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op68_loop_body:
    var_ranges = {z0: 401408}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf68', get_index_2, mul_1, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.mm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 200704}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 200704}, None),
        MemoryDep('buf69', c0, {c0: 200704}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg84_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg85_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg86_1', c1, {c0: 1568, c1: 128}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (200704, 1)
op70.sizes = ([1568, 128], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op70_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg86_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf70', get_index_6, add_2, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 200704}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 200704}, None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (200704, 1)
op71.sizes = ([200704], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op71_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf71', get_index_1, load, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 100352}, None)]
op73.unmet_dependencies = [   MemoryDep('buf72', 50176*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg88_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg89_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg90_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None),
        MemoryDep('arg91_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 196, c3: 16}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (100352, 1)
op73.sizes = ([8, 4, 196, 16], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 16], stride=[12544, 3136, 16, 1])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 16}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 12544*z0 + 3136*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg89_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg91_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf73', get_index_5, add_1, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 100352}, None)]
op74.unmet_dependencies = [   MemoryDep('buf72', 50176*c0 + 64*c1 + c2 + 256*c3 + 16, {c0: 8, c1: 4, c2: 16, c3: 196}, None)]
op74.met_dependencies = 
    [   MemoryDep('arg88_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg89_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg90_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None),
        MemoryDep('arg91_1', 64*c1 + c2 + 16, {c0: 8, c1: 4, c2: 16}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (100352, 1)
op74.sizes = ([8, 4, 16, 196], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196], stride=[12544, 3136, 196, 1])
class op74_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 16, z3: 196}
    index0 = 50176*z0 + 64*z1 + z2 + 256*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 12544*z0 + 3136*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg89_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg91_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf74', get_index_5, add_1, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.bmm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 153664}, None)]
op76.unmet_dependencies = []
op76.met_dependencies = 
    [   MemoryDep('arg92_1', 196*c0 + tmp0, {c0: 4}, None),
        MemoryDep('arg93_1', c1, {c0: 4, c1: 38416}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (153664, 1)
op76.sizes = ([4, 38416], [])
arg93_1_layout = FixedLayout('cuda', torch.int64, size=[196, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[4, 196], stride=[196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
class op76_loop_body:
    var_ranges = {z0: 4, z1: 38416}
    index0 = z1
    index1 = indirect0 + 196*z0
    index2 = 38416*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf76', get_index_2, load_1, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 6272}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 1229312}, None),
        MemoryDep('buf76', c1, {c0: 8, c1: 153664}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (6272, 196)
op77.sizes = ([8, 784], [196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf77', get_index_2, reduction)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 6272}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 1229312}, None),
        MemoryDep('buf76', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf77', c0, {c0: 6272}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (6272, 196)
op78.sizes = ([8, 784], [196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 196}
    index0 = 153664*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf77', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf78', get_index_3, reduction)
        return store_reduction


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 38432*c0 + c1, {c0: 32, c1: 38416}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 1229312}, None),
        MemoryDep('buf76', c1, {c0: 8, c1: 153664}, None),
        MemoryDep('buf77', c0, {c0: 6272}, None),
        MemoryDep('buf78', c0, {c0: 6272}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1229312, 1)
op79.sizes = ([8, 4, 196, 196], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 196], stride=[38416, 196, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 196, 196], stride=[38416, 196, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 196], stride=[153728, 38432, 196, 1])
class op79_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 196}
    index0 = 153664*z0 + 38416*z1 + 196*z2 + z3
    index1 = 38416*z1 + 196*z2 + z3
    index2 = 784*z0 + 196*z1 + z2
    index3 = 153728*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf77', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf78', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf79', get_index_4, truediv, None)
        return store


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 200704}, None)]
op80.unmet_dependencies = [   MemoryDep('buf72', 50176*c0 + 64*c1 + 256*c2 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg88_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg89_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg90_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None),
        MemoryDep('arg91_1', 64*c1 + c3 + 32, {c0: 8, c1: 4, c2: 196, c3: 32}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (200704, 1)
op80.sizes = ([8, 4, 196, 32], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32], stride=[25088, 6272, 32, 1])
class op80_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 32}
    index0 = 50176*z0 + 64*z1 + 256*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 25088*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg89_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg91_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf80', get_index_5, add_1, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf79', mode=None), StarDep(name='buf80', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.bmm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 200704}, None)]
op82.unmet_dependencies = [   MemoryDep('buf81', 25088*c0 + 32*c1 + 6272*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 196, c2: 128}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (200704, 1)
op82.sizes = ([8, 196, 128], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[32, 196, 32], stride=[6272, 32, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op82_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 128}
    index0 = 25088*z0 + 32*z1 + 6272*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 25088*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf81', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf82', get_index_2, mul_1, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 200704}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 200704}, None),
        MemoryDep('buf83', c0, {c0: 200704}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg96_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg97_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 1568, c1: 128}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (200704, 1)
op84.sizes = ([1568, 128], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op84_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg97_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg98_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf84', get_index_6, add_2, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 200704}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 200704}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (200704, 1)
op85.sizes = ([200704], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op85_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf85', get_index_1, load, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 401408}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 401408}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg101_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg102_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg103_1', c1, {c0: 1568, c1: 256}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (401408, 1)
op87.sizes = ([1568, 256], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
class op87_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, add_1, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 401408}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 401408}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (401408, 1)
op88.sizes = ([401408], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1568, 256], stride=[256, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 256], stride=[50176, 256, 1])
class op88_loop_body:
    var_ranges = {z0: 401408}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf88', get_index_2, mul_1, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.mm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 200704}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 200704}, None),
        MemoryDep('buf89', c0, {c0: 200704}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg106_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg107_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg108_1', c1, {c0: 1568, c1: 128}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (200704, 1)
op90.sizes = ([1568, 128], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[1568, 128], stride=[128, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op90_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg105_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg107_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg108_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf90', get_index_6, add_2, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 200704}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 200704}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (200704, 1)
op91.sizes = ([200704], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
class op91_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf91', get_index_1, load, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[1568, 640], stride=[640, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
    ]
]
op92.node.kernel = extern_kernels.mm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 50176}, None)]
op93.unmet_dependencies = [MemoryDep('buf90', 3584*c0 + 256*c1 + c2, {c0: 56, c1: 7, c2: 128}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 7, 7, 128], stride=[6272, 896, 128, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (50176, 1)
op93.sizes = ([56, 7, 128], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 128], stride=[25088, 128, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 7, 7, 128], stride=[6272, 896, 128, 1])
class op93_loop_body:
    var_ranges = {z0: 56, z1: 7, z2: 128}
    index0 = 3584*z0 + 256*z1 + z2
    index1 = 896*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf93', get_index_1, load, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[392, 128], stride=[128, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 50176}, None)]
op95.unmet_dependencies = [   MemoryDep('buf94', 6272*c0 + 16*c1 + 128*c2 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg115_1', 16*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg116_1', 16*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg117_1', 16*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg118_1', 16*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (50176, 1)
op95.sizes = ([8, 8, 49, 16], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[392, 128], stride=[128, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
class op95_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 16}
    index0 = 6272*z0 + 16*z1 + 128*z2 + z3
    index1 = 16*z1 + z3
    index2 = 6272*z0 + 784*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg117_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg118_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf95', get_index_5, add_1, None)
        return store


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 200704}, None)]
op96.unmet_dependencies = [   MemoryDep('buf92', 125440*c0 + 80*c1 + c2 + 640*c3, {c0: 8, c1: 8, c2: 16, c3: 196}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg110_1', 80*c1 + c2, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg111_1', 80*c1 + c2, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg112_1', 80*c1 + c2, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg113_1', 80*c1 + c2, {c0: 8, c1: 8, c2: 16}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 196], stride=[25088, 3136, 196, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (200704, 1)
op96.sizes = ([8, 8, 16, 196], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[1568, 640], stride=[640, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 196], stride=[25088, 3136, 196, 1])
class op96_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 16, z3: 196}
    index0 = 125440*z0 + 80*z1 + z2 + 640*z3
    index1 = 80*z1 + z2
    index2 = 25088*z0 + 3136*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg113_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf95', mode=None), StarDep(name='buf96', mode=None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 196], stride=[9604, 196, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op97.node.kernel = extern_kernels.bmm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 76832}, None)]
op98.unmet_dependencies = []
op98.met_dependencies = 
    [   MemoryDep('arg119_1', 196*c0 + tmp0, {c0: 8}, None),
        MemoryDep('arg120_1', c1, {c0: 8, c1: 9604}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 196], stride=[9604, 196, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (76832, 1)
op98.sizes = ([8, 9604], [])
arg120_1_layout = FixedLayout('cuda', torch.int64, size=[49, 196], stride=[196, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[8, 196], stride=[196, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 196], stride=[9604, 196, 1])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 9604}
    index0 = z1
    index1 = indirect0 + 196*z0
    index2 = 9604*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg120_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf98', get_index_2, load_1, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 3136}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf97', c0, {c0: 614656}, None),
        MemoryDep('buf98', c1, {c0: 8, c1: 76832}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (3136, 196)
op99.sizes = ([8, 392], [196])
buf97_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 196], stride=[9604, 196, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 196], stride=[9604, 196, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 196}
    index0 = 76832*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf99', get_index_2, reduction)
        return store_reduction


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 3136}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf97', c0, {c0: 614656}, None),
        MemoryDep('buf98', c1, {c0: 8, c1: 76832}, None),
        MemoryDep('buf99', c0, {c0: 3136}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (3136, 196)
op100.sizes = ([8, 392], [196])
buf97_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 196], stride=[9604, 196, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 196], stride=[9604, 196, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 196}
    index0 = 76832*z0 + 196*z1 + z2
    index1 = 196*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf99', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, reduction)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', 9632*c0 + c1, {c0: 64, c1: 9604}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 3136}, None),
        MemoryDep('buf97', c0, {c0: 614656}, None),
        MemoryDep('buf98', c1, {c0: 8, c1: 76832}, None),
        MemoryDep('buf99', c0, {c0: 3136}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 196], stride=[77056, 9632, 196, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (614656, 1)
op101.sizes = ([8, 8, 49, 196], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 196], stride=[9604, 196, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 196], stride=[9604, 196, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 196], stride=[77056, 9632, 196, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 196}
    index0 = 76832*z0 + 9604*z1 + 196*z2 + z3
    index1 = 9604*z1 + 196*z2 + z3
    index2 = 392*z0 + 49*z1 + z2
    index3 = 77056*z0 + 9632*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf99', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf101', get_index_4, truediv, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 802816}, None)]
op102.unmet_dependencies = [   MemoryDep('buf92', 125440*c0 + 80*c1 + 640*c2 + c3 + 16, {c0: 8, c1: 8, c2: 196, c3: 64}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg110_1', 80*c1 + c3 + 16, {c0: 8, c1: 8, c2: 196, c3: 64}, None),
        MemoryDep('arg111_1', 80*c1 + c3 + 16, {c0: 8, c1: 8, c2: 196, c3: 64}, None),
        MemoryDep('arg112_1', 80*c1 + c3 + 16, {c0: 8, c1: 8, c2: 196, c3: 64}, None),
        MemoryDep('arg113_1', 80*c1 + c3 + 16, {c0: 8, c1: 8, c2: 196, c3: 64}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 196, 64], stride=[100352, 12544, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (802816, 1)
op102.sizes = ([8, 8, 196, 64], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[1568, 640], stride=[640, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 196, 64], stride=[100352, 12544, 64, 1])
class op102_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 196, z3: 64}
    index0 = 125440*z0 + 80*z1 + 640*z2 + z3 + 16
    index1 = 80*z1 + z3 + 16
    index2 = 100352*z0 + 12544*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg113_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf102', get_index_5, add_1, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf102', mode=None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 64], stride=[3136, 64, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.bmm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 200704}, None)]
op104.unmet_dependencies = [   MemoryDep('buf103', 25088*c0 + 64*c1 + 3136*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 8, c1: 49, c2: 512}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (200704, 1)
op104.sizes = ([8, 49, 512], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 64], stride=[3136, 64, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op104_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 512}
    index0 = 25088*z0 + 64*z1 + 3136*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 25088*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf104', get_index_2, mul_1, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 100352}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 100352}, None)]
op106.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg123_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg124_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg125_1', c1, {c0: 392, c1: 256}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (100352, 1)
op106.sizes = ([392, 256], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
class op106_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf106', get_index_5, add_1, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 200704}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 200704}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg128_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg129_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg130_1', c1, {c0: 392, c1: 512}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (200704, 1)
op108.sizes = ([392, 512], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
class op108_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf108', get_index_5, add_1, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 200704}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 200704}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (200704, 1)
op109.sizes = ([200704], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op109_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf109', get_index_2, mul_1, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.mm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 100352}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 100352}, None),
        MemoryDep('buf110', c0, {c0: 100352}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg133_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg134_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg135_1', c1, {c0: 392, c1: 256}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (100352, 1)
op111.sizes = ([392, 256], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op111_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg134_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg135_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf111', get_index_6, add_2, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 50176}, None)]
op113.unmet_dependencies = [   MemoryDep('buf112', 25088*c0 + 64*c1 + 512*c2 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg137_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg138_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg139_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg140_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (50176, 1)
op113.sizes = ([8, 8, 49, 16], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
class op113_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 16}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3
    index1 = 64*z1 + z3
    index2 = 6272*z0 + 784*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf113', get_index_5, add_1, None)
        return store


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 50176}, None)]
op114.unmet_dependencies = [   MemoryDep('buf112', 25088*c0 + 64*c1 + c2 + 512*c3 + 16, {c0: 8, c1: 8, c2: 16, c3: 49}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg137_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg138_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg139_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg140_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (50176, 1)
op114.sizes = ([8, 8, 16, 49], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 16, z3: 49}
    index0 = 25088*z0 + 64*z1 + z2 + 512*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 6272*z0 + 784*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf114', get_index_5, add_1, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf113', mode=None), StarDep(name='buf114', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.bmm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 19208}, None)]
op116.unmet_dependencies = []
op116.met_dependencies = 
    [   MemoryDep('arg141_1', 49*c0 + tmp0, {c0: 8}, None),
        MemoryDep('arg142_1', c1, {c0: 8, c1: 2401}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (19208, 1)
op116.sizes = ([8, 2401], [])
arg142_1_layout = FixedLayout('cuda', torch.int64, size=[49, 49], stride=[49, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[8, 49], stride=[49, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
class op116_loop_body:
    var_ranges = {z0: 8, z1: 2401}
    index0 = z1
    index1 = indirect0 + 49*z0
    index2 = 2401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg142_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf116', get_index_2, load_1, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 3136}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 153664}, None),
        MemoryDep('buf116', c1, {c0: 8, c1: 19208}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (3136, 49)
op117.sizes = ([8, 392], [49])
buf115_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_2, reduction)
        return store_reduction


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 3136}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 153664}, None),
        MemoryDep('buf116', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf117', c0, {c0: 3136}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (3136, 49)
op118.sizes = ([8, 392], [49])
buf115_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op118_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf117', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf118', get_index_3, reduction)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', 2432*c0 + c1, {c0: 64, c1: 2401}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 153664}, None),
        MemoryDep('buf116', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf117', c0, {c0: 3136}, None),
        MemoryDep('buf118', c0, {c0: 3136}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (153664, 1)
op119.sizes = ([8, 8, 49, 49], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 49}
    index0 = 19208*z0 + 2401*z1 + 49*z2 + z3
    index1 = 2401*z1 + 49*z2 + z3
    index2 = 392*z0 + 49*z1 + z2
    index3 = 19456*z0 + 2432*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf117', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf118', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf119', get_index_4, truediv, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 100352}, None)]
op120.unmet_dependencies = [   MemoryDep('buf112', 25088*c0 + 64*c1 + 512*c2 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op120.met_dependencies = 
    [   MemoryDep('arg137_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg138_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg139_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg140_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (100352, 1)
op120.sizes = ([8, 8, 49, 32], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 32}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 12544*z0 + 1568*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf120', get_index_5, add_1, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.node.kernel = extern_kernels.bmm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 100352}, None)]
op122.unmet_dependencies = [   MemoryDep('buf121', 12544*c0 + 32*c1 + 1568*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 49, c2: 256}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (100352, 1)
op122.sizes = ([8, 49, 256], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 256}
    index0 = 12544*z0 + 32*z1 + 1568*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 12544*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf121', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf122', get_index_2, mul_1, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 100352}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 100352}, None),
        MemoryDep('buf123', c0, {c0: 100352}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg146_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg147_1', c1, {c0: 392, c1: 256}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (100352, 1)
op124.sizes = ([392, 256], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op124_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf123', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg144_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg146_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg147_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf124', get_index_6, add_2, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 200704}, None)]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 200704}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg150_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg151_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg152_1', c1, {c0: 392, c1: 512}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (200704, 1)
op126.sizes = ([392, 512], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
class op126_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg150_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf126', get_index_5, add_1, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 200704}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 200704}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (200704, 1)
op127.sizes = ([200704], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op127_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf127', get_index_2, mul_1, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 100352}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 100352}, None),
        MemoryDep('buf128', c0, {c0: 100352}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg155_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg156_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg157_1', c1, {c0: 392, c1: 256}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf129.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (100352, 1)
op129.sizes = ([392, 256], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op129_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg155_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg156_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg157_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf129', get_index_6, add_2, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 50176}, None)]
op131.unmet_dependencies = [   MemoryDep('buf130', 25088*c0 + 64*c1 + 512*c2 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg159_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg160_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg161_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg162_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (50176, 1)
op131.sizes = ([8, 8, 49, 16], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
class op131_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 16}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3
    index1 = 64*z1 + z3
    index2 = 6272*z0 + 784*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf131', get_index_5, add_1, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 50176}, None)]
op132.unmet_dependencies = [   MemoryDep('buf130', 25088*c0 + 64*c1 + c2 + 512*c3 + 16, {c0: 8, c1: 8, c2: 16, c3: 49}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg159_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg160_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg161_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg162_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (50176, 1)
op132.sizes = ([8, 8, 16, 49], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
class op132_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 16, z3: 49}
    index0 = 25088*z0 + 64*z1 + z2 + 512*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 6272*z0 + 784*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf132', get_index_5, add_1, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.bmm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 19208}, None)]
op134.unmet_dependencies = []
op134.met_dependencies = 
    [   MemoryDep('arg163_1', 49*c0 + tmp0, {c0: 8}, None),
        MemoryDep('arg164_1', c1, {c0: 8, c1: 2401}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (19208, 1)
op134.sizes = ([8, 2401], [])
arg164_1_layout = FixedLayout('cuda', torch.int64, size=[49, 49], stride=[49, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[8, 49], stride=[49, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
class op134_loop_body:
    var_ranges = {z0: 8, z1: 2401}
    index0 = z1
    index1 = indirect0 + 49*z0
    index2 = 2401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg164_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf134', get_index_2, load_1, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 3136}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 153664}, None),
        MemoryDep('buf134', c1, {c0: 8, c1: 19208}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (3136, 49)
op135.sizes = ([8, 392], [49])
buf133_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op135_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf135', get_index_2, reduction)
        return store_reduction


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 3136}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 153664}, None),
        MemoryDep('buf134', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf135', c0, {c0: 3136}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (3136, 49)
op136.sizes = ([8, 392], [49])
buf133_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op136_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf135', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf136', get_index_3, reduction)
        return store_reduction


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', 2432*c0 + c1, {c0: 64, c1: 2401}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 153664}, None),
        MemoryDep('buf134', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf135', c0, {c0: 3136}, None),
        MemoryDep('buf136', c0, {c0: 3136}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (153664, 1)
op137.sizes = ([8, 8, 49, 49], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 49}
    index0 = 19208*z0 + 2401*z1 + 49*z2 + z3
    index1 = 2401*z1 + 49*z2 + z3
    index2 = 392*z0 + 49*z1 + z2
    index3 = 19456*z0 + 2432*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf135', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf136', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf137', get_index_4, truediv, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 100352}, None)]
op138.unmet_dependencies = [   MemoryDep('buf130', 25088*c0 + 64*c1 + 512*c2 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg159_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg160_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg161_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg162_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (100352, 1)
op138.sizes = ([8, 8, 49, 32], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 32}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 12544*z0 + 1568*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf138', get_index_5, add_1, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 100352}, None)]
op140.unmet_dependencies = [   MemoryDep('buf139', 12544*c0 + 32*c1 + 1568*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 49, c2: 256}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (100352, 1)
op140.sizes = ([8, 49, 256], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 256}
    index0 = 12544*z0 + 32*z1 + 1568*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 12544*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf140', get_index_2, mul_1, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 100352}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 100352}, None),
        MemoryDep('buf141', c0, {c0: 100352}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg167_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg168_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg169_1', c1, {c0: 392, c1: 256}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (100352, 1)
op142.sizes = ([392, 256], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op142_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg166_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg167_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg168_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg169_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf142', get_index_6, add_2, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 200704}, None)]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 200704}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg172_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg173_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg174_1', c1, {c0: 392, c1: 512}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (200704, 1)
op144.sizes = ([392, 512], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
class op144_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg173_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg174_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf144', get_index_5, add_1, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 200704}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 200704}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (200704, 1)
op145.sizes = ([200704], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op145_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf144', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf145', get_index_2, mul_1, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 100352}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 100352}, None),
        MemoryDep('buf146', c0, {c0: 100352}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg177_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg178_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg179_1', c1, {c0: 392, c1: 256}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf147.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (100352, 1)
op147.sizes = ([392, 256], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op147_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg178_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg179_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf147', get_index_6, add_2, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 50176}, None)]
op149.unmet_dependencies = [   MemoryDep('buf148', 25088*c0 + 64*c1 + 512*c2 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg181_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg182_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg183_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg184_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (50176, 1)
op149.sizes = ([8, 8, 49, 16], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
class op149_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 16}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3
    index1 = 64*z1 + z3
    index2 = 6272*z0 + 784*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg184_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf149', get_index_5, add_1, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 50176}, None)]
op150.unmet_dependencies = [   MemoryDep('buf148', 25088*c0 + 64*c1 + c2 + 512*c3 + 16, {c0: 8, c1: 8, c2: 16, c3: 49}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg181_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg182_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg183_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg184_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (50176, 1)
op150.sizes = ([8, 8, 16, 49], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 16, z3: 49}
    index0 = 25088*z0 + 64*z1 + z2 + 512*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 6272*z0 + 784*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg184_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf150', get_index_5, add_1, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op151.node.kernel = extern_kernels.bmm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 19208}, None)]
op152.unmet_dependencies = []
op152.met_dependencies = 
    [   MemoryDep('arg185_1', 49*c0 + tmp0, {c0: 8}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 2401}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (19208, 1)
op152.sizes = ([8, 2401], [])
arg186_1_layout = FixedLayout('cuda', torch.int64, size=[49, 49], stride=[49, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[8, 49], stride=[49, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 2401}
    index0 = z1
    index1 = indirect0 + 49*z0
    index2 = 2401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg186_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf152', get_index_2, load_1, None)
        return store


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 3136}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 153664}, None),
        MemoryDep('buf152', c1, {c0: 8, c1: 19208}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (3136, 49)
op153.sizes = ([8, 392], [49])
buf151_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf153', get_index_2, reduction)
        return store_reduction


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 3136}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 153664}, None),
        MemoryDep('buf152', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf153', c0, {c0: 3136}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (3136, 49)
op154.sizes = ([8, 392], [49])
buf151_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf153', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_3, reduction)
        return store_reduction


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', 2432*c0 + c1, {c0: 64, c1: 2401}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 153664}, None),
        MemoryDep('buf152', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf153', c0, {c0: 3136}, None),
        MemoryDep('buf154', c0, {c0: 3136}, None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (153664, 1)
op155.sizes = ([8, 8, 49, 49], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
class op155_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 49}
    index0 = 19208*z0 + 2401*z1 + 49*z2 + z3
    index1 = 2401*z1 + 49*z2 + z3
    index2 = 392*z0 + 49*z1 + z2
    index3 = 19456*z0 + 2432*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf153', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf154', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf155', get_index_4, truediv, None)
        return store


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 100352}, None)]
op156.unmet_dependencies = [   MemoryDep('buf148', 25088*c0 + 64*c1 + 512*c2 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg181_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg182_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg183_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg184_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (100352, 1)
op156.sizes = ([8, 8, 49, 32], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 32}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 12544*z0 + 1568*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg182_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg184_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf156', get_index_5, add_1, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf155', mode=None), StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.bmm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 100352}, None)]
op158.unmet_dependencies = [   MemoryDep('buf157', 12544*c0 + 32*c1 + 1568*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 49, c2: 256}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (100352, 1)
op158.sizes = ([8, 49, 256], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 256}
    index0 = 12544*z0 + 32*z1 + 1568*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 12544*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf158', get_index_2, mul_1, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 100352}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 100352}, None),
        MemoryDep('buf159', c0, {c0: 100352}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg189_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg190_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg191_1', c1, {c0: 392, c1: 256}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf160.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (100352, 1)
op160.sizes = ([392, 256], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op160_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg191_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf160', get_index_6, add_2, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 200704}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 200704}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg194_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg196_1', c1, {c0: 392, c1: 512}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (200704, 1)
op162.sizes = ([392, 512], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
class op162_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg196_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf162', get_index_5, add_1, None)
        return store


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 200704}, None)]
op163.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 200704}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (200704, 1)
op163.sizes = ([200704], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op163_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf162', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf163', get_index_2, mul_1, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 100352}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 100352}, None),
        MemoryDep('buf164', c0, {c0: 100352}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg199_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg200_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg201_1', c1, {c0: 392, c1: 256}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf165.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (100352, 1)
op165.sizes = ([392, 256], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op165_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg201_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf165', get_index_6, add_2, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf166.users = [
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 50176}, None)]
op167.unmet_dependencies = [   MemoryDep('buf166', 25088*c0 + 64*c1 + 512*c2 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg203_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg204_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg205_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None),
        MemoryDep('arg206_1', 64*c1 + c3, {c0: 8, c1: 8, c2: 49, c3: 16}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (50176, 1)
op167.sizes = ([8, 8, 49, 16], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 16], stride=[6272, 784, 16, 1])
class op167_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 16}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3
    index1 = 64*z1 + z3
    index2 = 6272*z0 + 784*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg205_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg206_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf167', get_index_5, add_1, None)
        return store


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 50176}, None)]
op168.unmet_dependencies = [   MemoryDep('buf166', 25088*c0 + 64*c1 + c2 + 512*c3 + 16, {c0: 8, c1: 8, c2: 16, c3: 49}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg203_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg204_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg205_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None),
        MemoryDep('arg206_1', 64*c1 + c2 + 16, {c0: 8, c1: 8, c2: 16}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (50176, 1)
op168.sizes = ([8, 8, 16, 49], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 16, 49], stride=[6272, 784, 49, 1])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 16, z3: 49}
    index0 = 25088*z0 + 64*z1 + z2 + 512*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 6272*z0 + 784*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg205_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg206_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf168', get_index_5, add_1, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf167', mode=None), StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.bmm


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 19208}, None)]
op170.unmet_dependencies = []
op170.met_dependencies = 
    [   MemoryDep('arg207_1', 49*c0 + tmp0, {c0: 8}, None),
        MemoryDep('arg208_1', c1, {c0: 8, c1: 2401}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (19208, 1)
op170.sizes = ([8, 2401], [])
arg208_1_layout = FixedLayout('cuda', torch.int64, size=[49, 49], stride=[49, 1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[8, 49], stride=[49, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
class op170_loop_body:
    var_ranges = {z0: 8, z1: 2401}
    index0 = z1
    index1 = indirect0 + 49*z0
    index2 = 2401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg208_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf170', get_index_2, load_1, None)
        return store


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 3136}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 153664}, None),
        MemoryDep('buf170', c1, {c0: 8, c1: 19208}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (3136, 49)
op171.sizes = ([8, 392], [49])
buf169_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op171_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_2, reduction)
        return store_reduction


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 3136}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 153664}, None),
        MemoryDep('buf170', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf171', c0, {c0: 3136}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (3136, 49)
op172.sizes = ([8, 392], [49])
buf169_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 392, z2: 49}
    index0 = 19208*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 392*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf171', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, reduction)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', 2432*c0 + c1, {c0: 64, c1: 2401}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 153664}, None),
        MemoryDep('buf170', c1, {c0: 8, c1: 19208}, None),
        MemoryDep('buf171', c0, {c0: 3136}, None),
        MemoryDep('buf172', c0, {c0: 3136}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (153664, 1)
op173.sizes = ([8, 8, 49, 49], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 49], stride=[2401, 49, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 49], stride=[2401, 49, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 1], stride=[392, 49, 1, 3136])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 49], stride=[19456, 2432, 49, 1])
class op173_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 49}
    index0 = 19208*z0 + 2401*z1 + 49*z2 + z3
    index1 = 2401*z1 + 49*z2 + z3
    index2 = 392*z0 + 49*z1 + z2
    index3 = 19456*z0 + 2432*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf171', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf172', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf173', get_index_4, truediv, None)
        return store


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 100352}, None)]
op174.unmet_dependencies = [   MemoryDep('buf166', 25088*c0 + 64*c1 + 512*c2 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg203_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg204_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg205_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None),
        MemoryDep('arg206_1', 64*c1 + c3 + 32, {c0: 8, c1: 8, c2: 49, c3: 32}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (100352, 1)
op174.sizes = ([8, 8, 49, 32], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 32], stride=[12544, 1568, 32, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 49, z3: 32}
    index0 = 25088*z0 + 64*z1 + 512*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 12544*z0 + 1568*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg205_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg206_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf174', get_index_5, add_1, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None), StarDep(name='buf174', mode=None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.node.kernel = extern_kernels.bmm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 100352}, None)]
op176.unmet_dependencies = [   MemoryDep('buf175', 12544*c0 + 32*c1 + 1568*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 49, c2: 256}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (100352, 1)
op176.sizes = ([8, 49, 256], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[64, 49, 32], stride=[1568, 32, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op176_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 256}
    index0 = 12544*z0 + 32*z1 + 1568*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 12544*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf176', get_index_2, mul_1, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 100352}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 100352}, None),
        MemoryDep('buf177', c0, {c0: 100352}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg211_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg212_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg213_1', c1, {c0: 392, c1: 256}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (100352, 1)
op178.sizes = ([392, 256], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op178_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf177', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg211_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg212_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg213_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf178', get_index_6, add_2, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 200704}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 200704}, None)]
op180.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg216_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg217_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg218_1', c1, {c0: 392, c1: 512}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (200704, 1)
op180.sizes = ([392, 512], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
class op180_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg215_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg216_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg217_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg218_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf180', get_index_5, add_1, None)
        return store


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 200704}, None)]
op181.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 200704}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (200704, 1)
op181.sizes = ([200704], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op181_loop_body:
    var_ranges = {z0: 200704}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf181', get_index_2, mul_1, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='arg219_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 100352}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 100352}, None),
        MemoryDep('buf182', c0, {c0: 100352}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg220_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg221_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg222_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg223_1', c1, {c0: 392, c1: 256}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
    buf183.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (100352, 1)
op183.sizes = ([392, 256], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
class op183_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf182', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg220_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg221_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg222_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg223_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf183', get_index_6, add_2, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda', torch.float32, size=[392, 1280], stride=[1280, 1])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
    ]
]
op184.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 32768}, None)]
op185.unmet_dependencies = [   MemoryDep('buf183', 12544*c0 + 3584*c1 + 512*c2 + c3, {c0: 8, c1: 4, c2: 4, c3: 256}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 4, 256], stride=[4096, 1024, 256, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (32768, 1)
op185.sizes = ([8, 4, 4, 256], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 256], stride=[12544, 256, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 4, 256], stride=[4096, 1024, 256, 1])
class op185_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 4, z3: 256}
    index0 = 12544*z0 + 3584*z1 + 512*z2 + z3
    index1 = 4096*z0 + 1024*z1 + 256*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[128, 256], stride=[256, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 32768}, None)]
op187.unmet_dependencies = [   MemoryDep('buf186', 4096*c0 + 16*c1 + 256*c2 + c3, {c0: 8, c1: 16, c2: 16, c3: 16}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg230_1', 16*c1 + c3, {c0: 8, c1: 16, c2: 16, c3: 16}, None),
        MemoryDep('arg231_1', 16*c1 + c3, {c0: 8, c1: 16, c2: 16, c3: 16}, None),
        MemoryDep('arg232_1', 16*c1 + c3, {c0: 8, c1: 16, c2: 16, c3: 16}, None),
        MemoryDep('arg233_1', 16*c1 + c3, {c0: 8, c1: 16, c2: 16, c3: 16}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 16], stride=[4096, 256, 16, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (32768, 1)
op187.sizes = ([8, 16, 16, 16], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[128, 256], stride=[256, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 16], stride=[4096, 256, 16, 1])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 16, z3: 16}
    index0 = 4096*z0 + 16*z1 + 256*z2 + z3
    index1 = 16*z1 + z3
    index2 = 4096*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg231_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg232_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg233_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf187', get_index_5, add_1, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 100352}, None)]
op188.unmet_dependencies = [   MemoryDep('buf184', 62720*c0 + 80*c1 + c2 + 1280*c3, {c0: 8, c1: 16, c2: 16, c3: 49}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg225_1', 80*c1 + c2, {c0: 8, c1: 16, c2: 16}, None),
        MemoryDep('arg226_1', 80*c1 + c2, {c0: 8, c1: 16, c2: 16}, None),
        MemoryDep('arg227_1', 80*c1 + c2, {c0: 8, c1: 16, c2: 16}, None),
        MemoryDep('arg228_1', 80*c1 + c2, {c0: 8, c1: 16, c2: 16}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 49], stride=[12544, 784, 49, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (100352, 1)
op188.sizes = ([8, 16, 16, 49], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[392, 1280], stride=[1280, 1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 49], stride=[12544, 784, 49, 1])
class op188_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 16, z3: 49}
    index0 = 62720*z0 + 80*z1 + z2 + 1280*z3
    index1 = 80*z1 + z2
    index2 = 12544*z0 + 784*z1 + 49*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg225_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg227_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg228_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf188', get_index_5, add_1, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[128, 16, 49], stride=[784, 49, 1])
    buf189.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 12544}, None)]
op190.unmet_dependencies = []
op190.met_dependencies = 
    [   MemoryDep('arg234_1', 49*c0 + tmp0, {c0: 16}, None),
        MemoryDep('arg235_1', c1, {c0: 16, c1: 784}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 49], stride=[784, 49, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (12544, 1)
op190.sizes = ([16, 784], [])
arg235_1_layout = FixedLayout('cuda', torch.int64, size=[16, 49], stride=[49, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[16, 49], stride=[49, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 49], stride=[784, 49, 1])
class op190_loop_body:
    var_ranges = {z0: 16, z1: 784}
    index0 = z1
    index1 = indirect0 + 49*z0
    index2 = 784*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg235_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf190', get_index_2, load_1, None)
        return store


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 2048}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 100352}, None),
        MemoryDep('buf190', c1, {c0: 8, c1: 12544}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (2048, 49)
op191.sizes = ([8, 256], [49])
buf189_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 49], stride=[784, 49, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 49], stride=[784, 49, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 49}
    index0 = 12544*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf190', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf191', get_index_2, reduction)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 2048}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 100352}, None),
        MemoryDep('buf190', c1, {c0: 8, c1: 12544}, None),
        MemoryDep('buf191', c0, {c0: 2048}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (2048, 49)
op192.sizes = ([8, 256], [49])
buf189_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 49], stride=[784, 49, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 49], stride=[784, 49, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 49}
    index0 = 12544*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf190', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf191', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_3, reduction)
        return store_reduction


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 100352}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 100352}, None),
        MemoryDep('buf190', c1, {c0: 8, c1: 12544}, None),
        MemoryDep('buf191', c0, {c0: 2048}, None),
        MemoryDep('buf192', c0, {c0: 2048}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 49], stride=[12544, 784, 49, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (100352, 1)
op193.sizes = ([8, 256, 49], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 49], stride=[784, 49, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 49], stride=[784, 49, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 1], stride=[256, 16, 1, 2048])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 16, 49], stride=[12544, 784, 49, 1])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 49}
    index0 = 12544*z0 + 49*z1 + z2
    index1 = 49*z1 + z2
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf190', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf191', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf192', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf193', get_index_4, truediv, None)
        return store


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 401408}, None)]
op194.unmet_dependencies = [   MemoryDep('buf184', 62720*c0 + 80*c1 + 1280*c2 + c3 + 16, {c0: 8, c1: 16, c2: 49, c3: 64}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg225_1', 80*c1 + c3 + 16, {c0: 8, c1: 16, c2: 49, c3: 64}, None),
        MemoryDep('arg226_1', 80*c1 + c3 + 16, {c0: 8, c1: 16, c2: 49, c3: 64}, None),
        MemoryDep('arg227_1', 80*c1 + c3 + 16, {c0: 8, c1: 16, c2: 49, c3: 64}, None),
        MemoryDep('arg228_1', 80*c1 + c3 + 16, {c0: 8, c1: 16, c2: 49, c3: 64}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 49, 64], stride=[50176, 3136, 64, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (401408, 1)
op194.sizes = ([8, 16, 49, 64], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[392, 1280], stride=[1280, 1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 49, 64], stride=[50176, 3136, 64, 1])
class op194_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 49, z3: 64}
    index0 = 62720*z0 + 80*z1 + 1280*z2 + z3 + 16
    index1 = 80*z1 + z3 + 16
    index2 = 50176*z0 + 3136*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg225_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg227_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg228_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf194', get_index_5, add_1, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf193', mode=None), StarDep(name='buf194', mode=None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[128, 16, 64], stride=[1024, 64, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = extern_kernels.bmm


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 131072}, None)]
op196.unmet_dependencies = [   MemoryDep('buf195', 16384*c0 + 64*c1 + 1024*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 8, c1: 16, c2: 1024}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1024], stride=[16384, 1024, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (131072, 1)
op196.sizes = ([8, 16, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 64], stride=[1024, 64, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1024], stride=[16384, 1024, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 1024}
    index0 = 16384*z0 + 64*z1 + 1024*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf196', get_index_2, mul_1, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 49152}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 49152}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg238_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg239_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg240_1', c1, {c0: 128, c1: 384}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (49152, 1)
op198.sizes = ([128, 384], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
class op198_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf198', get_index_5, add_1, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 98304}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 98304}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg243_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg244_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg245_1', c1, {c0: 128, c1: 768}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (98304, 1)
op200.sizes = ([128, 768], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
class op200_loop_body:
    var_ranges = {z0: 128, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf200', get_index_5, add_1, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 98304}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 98304}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (98304, 1)
op201.sizes = ([98304], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
class op201_loop_body:
    var_ranges = {z0: 98304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf201', get_index_2, mul_1, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 49152}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 49152}, None),
        MemoryDep('buf202', c0, {c0: 49152}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg248_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg249_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg250_1', c1, {c0: 128, c1: 384}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (49152, 1)
op203.sizes = ([128, 384], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op203_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg248_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg249_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg250_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf203', get_index_6, add_2, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op204.node.kernel = extern_kernels.mm


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 24576}, None)]
op205.unmet_dependencies = [   MemoryDep('buf204', 12288*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg252_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg253_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg254_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg255_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (24576, 1)
op205.sizes = ([8, 12, 16, 16], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3
    index1 = 64*z1 + z3
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf205', get_index_5, add_1, None)
        return store


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 24576}, None)]
op206.unmet_dependencies = [   MemoryDep('buf204', 12288*c0 + 64*c1 + c2 + 768*c3 + 16, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg252_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg253_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg254_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg255_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (24576, 1)
op206.sizes = ([8, 12, 16, 16], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + z2 + 768*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf206', get_index_5, add_1, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf205', mode=None), StarDep(name='buf206', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op207.node.kernel = extern_kernels.bmm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 3072}, None)]
op208.unmet_dependencies = []
op208.met_dependencies = 
    [   MemoryDep('arg256_1', 16*c0 + tmp0, {c0: 12}, None),
        MemoryDep('arg257_1', c1, {c0: 12, c1: 256}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (3072, 1)
op208.sizes = ([12, 256], [])
arg257_1_layout = FixedLayout('cuda', torch.int64, size=[16, 16], stride=[16, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[12, 16], stride=[16, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
class op208_loop_body:
    var_ranges = {z0: 12, z1: 256}
    index0 = z1
    index1 = indirect0 + 16*z0
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg257_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf208', get_index_2, load_1, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 1536}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 24576}, None),
        MemoryDep('buf208', c1, {c0: 8, c1: 3072}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (1536, 16)
op209.sizes = ([8, 192], [16])
buf207_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op209_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf209', get_index_2, reduction)
        return store_reduction


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1536}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 24576}, None),
        MemoryDep('buf208', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf209', c0, {c0: 1536}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (1536, 16)
op210.sizes = ([8, 192], [16])
buf207_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf209', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_3, reduction)
        return store_reduction


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 24576}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 24576}, None),
        MemoryDep('buf208', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf209', c0, {c0: 1536}, None),
        MemoryDep('buf210', c0, {c0: 1536}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (24576, 1)
op211.sizes = ([8, 192, 16], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op211_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf209', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf210', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf211', get_index_4, truediv, None)
        return store


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 49152}, None)]
op212.unmet_dependencies = [   MemoryDep('buf204', 12288*c0 + 64*c1 + 768*c2 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg252_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg253_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg254_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg255_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (49152, 1)
op212.sizes = ([8, 12, 16, 32], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
class op212_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 32}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 6144*z0 + 512*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf212', get_index_5, add_1, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf211', mode=None), StarDep(name='buf212', mode=None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.node.kernel = extern_kernels.bmm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 49152}, None)]
op214.unmet_dependencies = [   MemoryDep('buf213', 6144*c0 + 32*c1 + 512*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 16, c2: 384}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (49152, 1)
op214.sizes = ([8, 16, 384], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op214_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 384}
    index0 = 6144*z0 + 32*z1 + 512*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 6144*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf214', get_index_2, mul_1, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 49152}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf203', c0, {c0: 49152}, None),
        MemoryDep('buf215', c0, {c0: 49152}, None)]
op216.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg260_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg261_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg262_1', c1, {c0: 128, c1: 384}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf216.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op216.group.device = cuda:0
op216.group.iteration = (49152, 1)
op216.sizes = ([128, 384], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op216_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg259_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg260_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg261_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg262_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf216', get_index_6, add_2, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op217.node.kernel = extern_kernels.mm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 98304}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304}, None)]
op218.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg265_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg266_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg267_1', c1, {c0: 128, c1: 768}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (98304, 1)
op218.sizes = ([128, 768], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
class op218_loop_body:
    var_ranges = {z0: 128, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg267_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf218', get_index_5, add_1, None)
        return store


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 98304}, None)]
op219.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 98304}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (98304, 1)
op219.sizes = ([98304], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
class op219_loop_body:
    var_ranges = {z0: 98304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf218', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf219', get_index_2, mul_1, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 49152}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 49152}, None),
        MemoryDep('buf220', c0, {c0: 49152}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg269_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg270_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg271_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg272_1', c1, {c0: 128, c1: 384}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (49152, 1)
op221.sizes = ([128, 384], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op221_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg269_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg270_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg271_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg272_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf221', get_index_6, add_2, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf222.users = [
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 24576}, None)]
op223.unmet_dependencies = [   MemoryDep('buf222', 12288*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg274_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg275_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg276_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg277_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (24576, 1)
op223.sizes = ([8, 12, 16, 16], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op223_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3
    index1 = 64*z1 + z3
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf223', get_index_5, add_1, None)
        return store


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 24576}, None)]
op224.unmet_dependencies = [   MemoryDep('buf222', 12288*c0 + 64*c1 + c2 + 768*c3 + 16, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op224.met_dependencies = 
    [   MemoryDep('arg274_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg275_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg276_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg277_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (24576, 1)
op224.sizes = ([8, 12, 16, 16], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + z2 + 768*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf224', get_index_5, add_1, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf223', mode=None), StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.bmm


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 3072}, None)]
op226.unmet_dependencies = []
op226.met_dependencies = 
    [   MemoryDep('arg278_1', 16*c0 + tmp0, {c0: 12}, None),
        MemoryDep('arg279_1', c1, {c0: 12, c1: 256}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (3072, 1)
op226.sizes = ([12, 256], [])
arg279_1_layout = FixedLayout('cuda', torch.int64, size=[16, 16], stride=[16, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[12, 16], stride=[16, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
class op226_loop_body:
    var_ranges = {z0: 12, z1: 256}
    index0 = z1
    index1 = indirect0 + 16*z0
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg279_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf226', get_index_2, load_1, None)
        return store


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 1536}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 24576}, None),
        MemoryDep('buf226', c1, {c0: 8, c1: 3072}, None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (1536, 16)
op227.sizes = ([8, 192], [16])
buf225_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_2, reduction)
        return store_reduction


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 1536}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 24576}, None),
        MemoryDep('buf226', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf227', c0, {c0: 1536}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (1536, 16)
op228.sizes = ([8, 192], [16])
buf225_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_3, reduction)
        return store_reduction


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 24576}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 24576}, None),
        MemoryDep('buf226', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf227', c0, {c0: 1536}, None),
        MemoryDep('buf228', c0, {c0: 1536}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (24576, 1)
op229.sizes = ([8, 192, 16], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op229_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf228', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf229', get_index_4, truediv, None)
        return store


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 49152}, None)]
op230.unmet_dependencies = [   MemoryDep('buf222', 12288*c0 + 64*c1 + 768*c2 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op230.met_dependencies = 
    [   MemoryDep('arg274_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg275_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg276_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg277_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (49152, 1)
op230.sizes = ([8, 12, 16, 32], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
class op230_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 32}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 6144*z0 + 512*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf230', get_index_5, add_1, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = extern_kernels.bmm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 49152}, None)]
op232.unmet_dependencies = [   MemoryDep('buf231', 6144*c0 + 32*c1 + 512*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 16, c2: 384}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (49152, 1)
op232.sizes = ([8, 16, 384], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op232_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 384}
    index0 = 6144*z0 + 32*z1 + 512*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 6144*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf232', get_index_2, mul_1, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 49152}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf221', c0, {c0: 49152}, None),
        MemoryDep('buf233', c0, {c0: 49152}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg281_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg282_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg283_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg284_1', c1, {c0: 128, c1: 384}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf234.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (49152, 1)
op234.sizes = ([128, 384], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op234_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg281_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg282_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg283_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg284_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf234', get_index_6, add_2, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.mm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 98304}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 98304}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg287_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg288_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg289_1', c1, {c0: 128, c1: 768}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (98304, 1)
op236.sizes = ([128, 768], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
class op236_loop_body:
    var_ranges = {z0: 128, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg287_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg288_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg289_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, add_1, None)
        return store


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 98304}, None)]
op237.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 98304}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (98304, 1)
op237.sizes = ([98304], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
class op237_loop_body:
    var_ranges = {z0: 98304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf236', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf237', get_index_2, mul_1, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg290_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 49152}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf234', c0, {c0: 49152}, None),
        MemoryDep('buf238', c0, {c0: 49152}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg291_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg292_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg293_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg294_1', c1, {c0: 128, c1: 384}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (49152, 1)
op239.sizes = ([128, 384], [])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op239_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg291_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg292_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg293_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg294_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf239', get_index_6, add_2, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 24576}, None)]
op241.unmet_dependencies = [   MemoryDep('buf240', 12288*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg296_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg297_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg298_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg299_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (24576, 1)
op241.sizes = ([8, 12, 16, 16], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op241_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3
    index1 = 64*z1 + z3
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg297_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg298_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg299_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf241', get_index_5, add_1, None)
        return store


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 24576}, None)]
op242.unmet_dependencies = [   MemoryDep('buf240', 12288*c0 + 64*c1 + c2 + 768*c3 + 16, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg296_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg297_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg298_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg299_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (24576, 1)
op242.sizes = ([8, 12, 16, 16], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op242_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + z2 + 768*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg297_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg298_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg299_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf242', get_index_5, add_1, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf241', mode=None), StarDep(name='buf242', mode=None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.bmm


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 3072}, None)]
op244.unmet_dependencies = []
op244.met_dependencies = 
    [   MemoryDep('arg300_1', 16*c0 + tmp0, {c0: 12}, None),
        MemoryDep('arg301_1', c1, {c0: 12, c1: 256}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (3072, 1)
op244.sizes = ([12, 256], [])
arg301_1_layout = FixedLayout('cuda', torch.int64, size=[16, 16], stride=[16, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[12, 16], stride=[16, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
class op244_loop_body:
    var_ranges = {z0: 12, z1: 256}
    index0 = z1
    index1 = indirect0 + 16*z0
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg301_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf244', get_index_2, load_1, None)
        return store


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1536}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 24576}, None),
        MemoryDep('buf244', c1, {c0: 8, c1: 3072}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (1536, 16)
op245.sizes = ([8, 192], [16])
buf243_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op245_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_2, reduction)
        return store_reduction


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 1536}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 24576}, None),
        MemoryDep('buf244', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf245', c0, {c0: 1536}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (1536, 16)
op246.sizes = ([8, 192], [16])
buf243_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op246_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf245', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf246', get_index_3, reduction)
        return store_reduction


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 24576}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 24576}, None),
        MemoryDep('buf244', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf245', c0, {c0: 1536}, None),
        MemoryDep('buf246', c0, {c0: 1536}, None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (24576, 1)
op247.sizes = ([8, 192, 16], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op247_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf245', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf246', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf247', get_index_4, truediv, None)
        return store


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 49152}, None)]
op248.unmet_dependencies = [   MemoryDep('buf240', 12288*c0 + 64*c1 + 768*c2 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg296_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg297_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg298_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg299_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (49152, 1)
op248.sizes = ([8, 12, 16, 32], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 32}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 6144*z0 + 512*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg297_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg298_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg299_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf248', get_index_5, add_1, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf247', mode=None), StarDep(name='buf248', mode=None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.bmm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 49152}, None)]
op250.unmet_dependencies = [   MemoryDep('buf249', 6144*c0 + 32*c1 + 512*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 16, c2: 384}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (49152, 1)
op250.sizes = ([8, 16, 384], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 384}
    index0 = 6144*z0 + 32*z1 + 512*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 6144*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf250', get_index_2, mul_1, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg302_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 49152}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 49152}, None),
        MemoryDep('buf251', c0, {c0: 49152}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg304_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg305_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg306_1', c1, {c0: 128, c1: 384}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (49152, 1)
op252.sizes = ([128, 384], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op252_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf251', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg305_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg306_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf252', get_index_6, add_2, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op253.node.kernel = extern_kernels.mm


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 98304}, None)]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 98304}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg309_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg310_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg311_1', c1, {c0: 128, c1: 768}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (98304, 1)
op254.sizes = ([128, 768], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
class op254_loop_body:
    var_ranges = {z0: 128, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg309_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg310_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg311_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf254', get_index_5, add_1, None)
        return store


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 98304}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 98304}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (98304, 1)
op255.sizes = ([98304], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
class op255_loop_body:
    var_ranges = {z0: 98304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf255', get_index_2, mul_1, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg312_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op256.node.kernel = extern_kernels.mm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 49152}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 49152}, None),
        MemoryDep('buf256', c0, {c0: 49152}, None)]
op257.met_dependencies = 
    [   MemoryDep('arg313_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg314_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg315_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg316_1', c1, {c0: 128, c1: 384}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf257.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (49152, 1)
op257.sizes = ([128, 384], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op257_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf256', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg315_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg316_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf257', get_index_6, add_2, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.mm


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 24576}, None)]
op259.unmet_dependencies = [   MemoryDep('buf258', 12288*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op259.met_dependencies = 
    [   MemoryDep('arg318_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg319_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg320_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None),
        MemoryDep('arg321_1', 64*c1 + c3, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (24576, 1)
op259.sizes = ([8, 12, 16, 16], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3
    index1 = 64*z1 + z3
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg319_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg320_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg321_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf259', get_index_5, add_1, None)
        return store


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 24576}, None)]
op260.unmet_dependencies = [   MemoryDep('buf258', 12288*c0 + 64*c1 + c2 + 768*c3 + 16, {c0: 8, c1: 12, c2: 16, c3: 16}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg318_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg319_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg320_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None),
        MemoryDep('arg321_1', 64*c1 + c2 + 16, {c0: 8, c1: 12, c2: 16}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (24576, 1)
op260.sizes = ([8, 12, 16, 16], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 16}
    index0 = 12288*z0 + 64*z1 + z2 + 768*z3 + 16
    index1 = 64*z1 + z2 + 16
    index2 = 3072*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg319_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg320_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg321_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf260', get_index_5, add_1, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf259', mode=None), StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.bmm


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 3072}, None)]
op262.unmet_dependencies = []
op262.met_dependencies = 
    [   MemoryDep('arg322_1', 16*c0 + tmp0, {c0: 12}, None),
        MemoryDep('arg323_1', c1, {c0: 12, c1: 256}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (3072, 1)
op262.sizes = ([12, 256], [])
arg323_1_layout = FixedLayout('cuda', torch.int64, size=[16, 16], stride=[16, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[12, 16], stride=[16, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
class op262_loop_body:
    var_ranges = {z0: 12, z1: 256}
    index0 = z1
    index1 = indirect0 + 16*z0
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg323_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf262', get_index_2, load_1, None)
        return store


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 1536}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 24576}, None),
        MemoryDep('buf262', c1, {c0: 8, c1: 3072}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (1536, 16)
op263.sizes = ([8, 192], [16])
buf261_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op263_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf262', get_index_1)
        add = ops.add(mul, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_2, reduction)
        return store_reduction


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1536}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 24576}, None),
        MemoryDep('buf262', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf263', c0, {c0: 1536}, None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (1536, 16)
op264.sizes = ([8, 192], [16])
buf261_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
class op264_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf262', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf263', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, reduction)
        return store_reduction


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 24576}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 24576}, None),
        MemoryDep('buf262', c1, {c0: 8, c1: 3072}, None),
        MemoryDep('buf263', c0, {c0: 1536}, None),
        MemoryDep('buf264', c0, {c0: 1536}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (24576, 1)
op265.sizes = ([8, 192, 16], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 16], stride=[256, 16, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[12, 16, 16], stride=[256, 16, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 1], stride=[192, 16, 1, 1536])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 16], stride=[3072, 256, 16, 1])
class op265_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 16}
    index0 = 3072*z0 + 16*z1 + z2
    index1 = 16*z1 + z2
    index2 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf262', get_index_1)
        add = ops.add(mul, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf263', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf264', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf265', get_index_4, truediv, None)
        return store


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 49152}, None)]
op266.unmet_dependencies = [   MemoryDep('buf258', 12288*c0 + 64*c1 + 768*c2 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg318_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg319_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg320_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None),
        MemoryDep('arg321_1', 64*c1 + c3 + 32, {c0: 8, c1: 12, c2: 16, c3: 32}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (49152, 1)
op266.sizes = ([8, 12, 16, 32], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 16, 32], stride=[6144, 512, 32, 1])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 12, z2: 16, z3: 32}
    index0 = 12288*z0 + 64*z1 + 768*z2 + z3 + 32
    index1 = 64*z1 + z3 + 32
    index2 = 6144*z0 + 512*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg319_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg320_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg321_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf266', get_index_5, add_1, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf265', mode=None), StarDep(name='buf266', mode=None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.bmm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 49152}, None)]
op268.unmet_dependencies = [   MemoryDep('buf267', 6144*c0 + 32*c1 + 512*((c2//32)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 16, c2: 384}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (49152, 1)
op268.sizes = ([8, 16, 384], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[96, 16, 32], stride=[512, 32, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op268_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 384}
    index0 = 6144*z0 + 32*z1 + 512*((z2//32)) + ModularIndexing(z2, 1, 32)
    index1 = 6144*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf267', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf268', get_index_2, mul_1, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = [StarDep(name='arg324_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 49152}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 49152}, None),
        MemoryDep('buf269', c0, {c0: 49152}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg325_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg326_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg327_1', c1, {c0: 128, c1: 384}, None),
        MemoryDep('arg328_1', c1, {c0: 128, c1: 384}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
    buf270.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
    ]
]
op270.group.device = cuda:0
op270.group.iteration = (49152, 1)
op270.sizes = ([128, 384], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
class op270_loop_body:
    var_ranges = {z0: 128, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf269', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg325_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg326_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg327_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg328_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf270', get_index_6, add_2, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg329_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 98304}, None)]
op272.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 98304}, None)]
op272.met_dependencies = 
    [   MemoryDep('arg330_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg331_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg332_1', c1, {c0: 128, c1: 768}, None),
        MemoryDep('arg333_1', c1, {c0: 128, c1: 768}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (98304, 1)
op272.sizes = ([128, 768], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
class op272_loop_body:
    var_ranges = {z0: 128, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg331_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg332_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg333_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf272', get_index_5, add_1, None)
        return store


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 98304}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 98304}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (98304, 1)
op273.sizes = ([98304], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[128, 768], stride=[768, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 768], stride=[12288, 768, 1])
class op273_loop_body:
    var_ranges = {z0: 98304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf273', get_index_2, mul_1, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg334_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 3072}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf270', 6144*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 16}, None),
        MemoryDep('buf274', 6144*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 16}, None)]
op275.met_dependencies = 
    [   MemoryDep('arg335_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg336_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg337_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg338_1', c1, {c0: 8, c1: 384}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (3072, 16)
op275.sizes = ([8, 384], [16])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 384], stride=[6144, 384, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[128, 384], stride=[384, 1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op275_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 16}
    index0 = 6144*z0 + z1 + 384*z2
    index1 = z1
    index2 = 384*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg335_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg336_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg337_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg338_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_6, reduction)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 3072}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 3072}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg340_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg341_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg342_1', c1, {c0: 8, c1: 384}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (3072, 1)
op276.sizes = ([8, 384], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        sub = ops.sub(truediv, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg340_1', get_index_2)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_1)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_2 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_2)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg341_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg342_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, add_1, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = [StarDep(name='arg343_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
]
op277.node.kernel = extern_kernels.mm


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 3072}, None)]
op278.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 3072}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg345_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg346_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg347_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg348_1', c1, {c0: 8, c1: 384}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (3072, 1)
op278.sizes = ([8, 384], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg345_1', get_index_1)
        sub = ops.sub(truediv, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg346_1', get_index_2)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_1)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_2 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_2)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg347_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg348_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf278', get_index_5, add_1, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg349_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 8000}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf277', c0, {c0: 8000}, None),
        MemoryDep('buf279', c0, {c0: 8000}, None)]
op280.met_dependencies = 
    [   MemoryDep('arg344_1', c1, {c0: 8, c1: 1000}, None),
        MemoryDep('arg350_1', c1, {c0: 8, c1: 1000}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf280.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (8000, 1)
op280.sizes = ([8, 1000], [])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg344_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf279', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg350_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf280', get_index_4, mul, None)
        return store



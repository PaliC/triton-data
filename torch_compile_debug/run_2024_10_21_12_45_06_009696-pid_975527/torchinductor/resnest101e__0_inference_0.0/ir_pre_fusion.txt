op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8388608}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 8388608}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg5_1', c1, {c0: 8, c1: 64}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (8388608, 1)
op1.sizes = ([8, 64, 16384], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 16384}
    index0 = 1048576*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1', get_index_5, relu, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 8388608}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 8388608}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 8, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (8388608, 1)
op3.sizes = ([8, 64, 16384], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 16384}
    index0 = 1048576*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelAlloc)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelAlloc
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.node.kernel = extern_kernels.convolution


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 16777216}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 16777216}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg13_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg14_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 128}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (16777216, 1)
op5.sizes = ([8, 128, 16384], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16384}
    index0 = 2097152*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, relu, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 4194304}, None)]
op6.unmet_dependencies = 
    [   MemoryDep('buf5', 256*c0 + 2*c1 + 1, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 + 127, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 + 128, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 + 129, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 - 1, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 - 127, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 - 128, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1 - 129, {c0: 65536, c1: 64}, None),
        MemoryDep('buf5', 256*c0 + 2*c1, {c0: 65536, c1: 64}, None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (4194304, 1)
op6.sizes = ([1024, 64, 64], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op6_loop_body:
    var_ranges = {z0: 1024, z1: 64, z2: 64}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 16384*z0 + 256*z1 + 2*z2 - 129
    index3 = 2*z2
    index4 = 16384*z0 + 256*z1 + 2*z2 - 128
    index5 = 2*z2 + 1
    index6 = 16384*z0 + 256*z1 + 2*z2 - 127
    index7 = 2*z1
    index8 = 16384*z0 + 256*z1 + 2*z2 - 1
    index9 = 16384*z0 + 256*z1 + 2*z2
    index10 = 16384*z0 + 256*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 16384*z0 + 256*z1 + 2*z2 + 127
    index13 = 16384*z0 + 256*z1 + 2*z2 + 128
    index14 = 16384*z0 + 256*z1 + 2*z2 + 129
    index15 = 4096*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(128, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(128, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(128, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(128, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(128, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(128, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(128, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(128, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(128, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(128, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(128, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(128, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(128, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(128, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(128, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(128, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf6', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf5', get_index)
        return load


op7: ExternKernelSchedulerNode(ExternKernelAlloc)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelAlloc
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.node.kernel = extern_kernels.convolution


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 2097152}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 2097152}, None)]
op8.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg19_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 8, c1: 64}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (2097152, 1)
op8.sizes = ([8, 64, 4096], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
class op8_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 262144*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf8', get_index_5, relu, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op9.node.kernel = extern_kernels.convolution


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 4194304}, None)]
op10.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 4194304}, None)]
op10.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg23_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg24_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg25_1', c1, {c0: 8, c1: 128}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (4194304, 1)
op10.sizes = ([8, 128, 4096], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf10', get_index_5, relu, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 512}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf10', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf10', 524288*c0 + c1, {c0: 8, c1: 262144}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (512, 4096)
op11.sizes = ([8, 64], [4096])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = 524288*z0 + 4096*z1 + z2 + 262144
    index2 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf10', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf11', get_index_2, reduction)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 512}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 512}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (512, 1)
op12.sizes = ([512], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op12_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf12', get_index_1, truediv, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 256}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 256}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg28_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg29_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg30_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg31_1', c1, {c0: 8, c1: 32}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (256, 1)
op14.sizes = ([8, 32], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg31_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf14', get_index_6, relu, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 1024}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf15', 128*c0 + c2 + 64, {c0: 8, c1: 2, c2: 64}, None),
        MemoryDep('buf15', 128*c0 + c2, {c0: 8, c1: 2, c2: 64}, None),
        MemoryDep('buf15', c0, {c0: 1024}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg33_1', c1 + 64, {c0: 16, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 16, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 8, c1: 128}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (1024, 1)
op16.sizes = ([8, 2, 64], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 64}
    index0 = 128*z0 + 64*z1 + z2
    index1 = 64*z1 + z2
    index2 = 128*z0 + z2
    index3 = z2
    index4 = 128*z0 + z2 + 64
    index5 = z2 + 64
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg33_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf15', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg33_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf16', get_index_6, exp, None)
        return store


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 2097152}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf10', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf10', 524288*c0 + c1, {c0: 8, c1: 262144}, None),
        MemoryDep('buf16', 128*c0 + c1 + 64, {c0: 8, c1: 64}, None),
        MemoryDep('buf16', 128*c0 + c1, {c0: 8, c1: 64}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (2097152, 1)
op17.sizes = ([8, 64, 4096], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = 128*z0 + z1
    index2 = 128*z0 + z1 + 64
    index3 = 524288*z0 + 4096*z1 + z2 + 262144
    index4 = 262144*z0 + 4096*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf16', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf16', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf10', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf16', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf16', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf16', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf17', get_index_8, add_2, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelAlloc)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelAlloc
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.convolution


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op19.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 8388608}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 8388608}, None),
        MemoryDep('buf19', c0, {c0: 8388608}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg36_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg37_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg41_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg42_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg43_1', c1, {c0: 8, c1: 256}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (8388608, 1)
op20.sizes = ([8, 256, 4096], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg36_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg38_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf19', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg40_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg41_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg42_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg43_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf20', get_index_10, add_4, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 8388608}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 8388608}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf21.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (8388608, 1)
op21.sizes = ([8388608], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op21_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf21', get_index_1, relu, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2097152}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 2097152}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg46_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg47_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg48_1', c1, {c0: 8, c1: 64}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2097152, 1)
op23.sizes = ([8, 64, 4096], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 262144*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg46_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg47_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg48_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf23', get_index_5, relu, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 4194304}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 4194304}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg51_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg52_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg53_1', c1, {c0: 8, c1: 128}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (4194304, 1)
op25.sizes = ([8, 128, 4096], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg52_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, relu, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 512}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf25', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf25', 524288*c0 + c1, {c0: 8, c1: 262144}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (512, 4096)
op26.sizes = ([8, 64], [4096])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = 524288*z0 + 4096*z1 + z2 + 262144
    index2 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_2, reduction)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 512}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 512}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (512, 1)
op27.sizes = ([512], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op27_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf27', get_index_1, truediv, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 256}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 256}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg56_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg57_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg58_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg59_1', c1, {c0: 8, c1: 32}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (256, 1)
op29.sizes = ([8, 32], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op29_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg58_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg59_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf29', get_index_6, relu, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 1024}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf30', 128*c0 + c2 + 64, {c0: 8, c1: 2, c2: 64}, None),
        MemoryDep('buf30', 128*c0 + c2, {c0: 8, c1: 2, c2: 64}, None),
        MemoryDep('buf30', c0, {c0: 1024}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg61_1', c1 + 64, {c0: 16, c1: 64}, None),
        MemoryDep('arg61_1', c1, {c0: 16, c1: 64}, None),
        MemoryDep('arg61_1', c1, {c0: 8, c1: 128}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (1024, 1)
op31.sizes = ([8, 2, 64], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 64}
    index0 = 128*z0 + 64*z1 + z2
    index1 = 64*z1 + z2
    index2 = 128*z0 + z2
    index3 = z2
    index4 = 128*z0 + z2 + 64
    index5 = z2 + 64
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg61_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf30', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg61_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf31', get_index_6, exp, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 2097152}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf25', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf25', 524288*c0 + c1, {c0: 8, c1: 262144}, None),
        MemoryDep('buf31', 128*c0 + c1 + 64, {c0: 8, c1: 64}, None),
        MemoryDep('buf31', 128*c0 + c1, {c0: 8, c1: 64}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (2097152, 1)
op32.sizes = ([8, 64, 4096], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
class op32_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = 128*z0 + z1
    index2 = 128*z0 + z1 + 64
    index3 = 524288*z0 + 4096*z1 + z2 + 262144
    index4 = 262144*z0 + 4096*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf31', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf31', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf25', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf31', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf31', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf31', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf32', get_index_8, add_2, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.convolution


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 8388608}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 8388608}, None),
        MemoryDep('buf33', c0, {c0: 8388608}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg65_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg66_1', c1, {c0: 8, c1: 256}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (8388608, 1)
op34.sizes = ([8, 256, 4096], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op34_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg65_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg66_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf21', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf34', get_index_6, relu, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 2097152}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 2097152}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg69_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg70_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg71_1', c1, {c0: 8, c1: 64}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (2097152, 1)
op36.sizes = ([8, 64, 4096], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 262144*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg69_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf36', get_index_5, relu, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 4194304}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 4194304}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg75_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg76_1', c1, {c0: 8, c1: 128}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op38.group.device = cuda:0
op38.group.iteration = (4194304, 1)
op38.sizes = ([8, 128, 4096], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg74_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg76_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, relu, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 512}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf38', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf38', 524288*c0 + c1, {c0: 8, c1: 262144}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (512, 4096)
op39.sizes = ([8, 64], [4096])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = 524288*z0 + 4096*z1 + z2 + 262144
    index2 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf38', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf39', get_index_2, reduction)
        return store_reduction


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 512}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 512}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (512, 1)
op40.sizes = ([512], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op40_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf40', get_index_1, truediv, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 256}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 256}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg79_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg80_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg81_1', c1, {c0: 8, c1: 32}, None),
        MemoryDep('arg82_1', c1, {c0: 8, c1: 32}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (256, 1)
op42.sizes = ([8, 32], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg81_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg82_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf42', get_index_6, relu, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelAlloc)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelAlloc
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.node.kernel = extern_kernels.convolution


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 1024}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf43', 128*c0 + c2 + 64, {c0: 8, c1: 2, c2: 64}, None),
        MemoryDep('buf43', 128*c0 + c2, {c0: 8, c1: 2, c2: 64}, None),
        MemoryDep('buf43', c0, {c0: 1024}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg84_1', c1 + 64, {c0: 16, c1: 64}, None),
        MemoryDep('arg84_1', c1, {c0: 16, c1: 64}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 128}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (1024, 1)
op44.sizes = ([8, 2, 64], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 64}
    index0 = 128*z0 + 64*z1 + z2
    index1 = 64*z1 + z2
    index2 = 128*z0 + z2
    index3 = z2
    index4 = 128*z0 + z2 + 64
    index5 = z2 + 64
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf43', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg84_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf43', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg84_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf44', get_index_6, exp, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2097152}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf38', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf38', 524288*c0 + c1, {c0: 8, c1: 262144}, None),
        MemoryDep('buf44', 128*c0 + c1 + 64, {c0: 8, c1: 64}, None),
        MemoryDep('buf44', 128*c0 + c1, {c0: 8, c1: 64}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (2097152, 1)
op45.sizes = ([8, 64, 4096], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 64], stride=[128, 64, 1024, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 4096, 64, 1])
class op45_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = 128*z0 + z1
    index2 = 128*z0 + z1 + 64
    index3 = 524288*z0 + 4096*z1 + z2 + 262144
    index4 = 262144*z0 + 4096*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf44', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf38', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf44', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf44', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf44', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf45', get_index_8, add_2, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 8388608}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 8388608}, None),
        MemoryDep('buf46', c0, {c0: 8388608}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg87_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg89_1', c1, {c0: 8, c1: 256}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf47.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (8388608, 1)
op47.sizes = ([8, 256, 4096], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg89_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf34', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf47', get_index_6, relu, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelAlloc)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelAlloc
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
]
op48.node.kernel = extern_kernels.convolution


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 4194304}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 4194304}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg92_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg93_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 128}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (4194304, 1)
op49.sizes = ([8, 128, 4096], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg94_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf49', get_index_5, relu, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 8388608}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 8388608}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg97_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 256}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (8388608, 1)
op51.sizes = ([8, 256, 4096], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op51_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg97_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg98_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg99_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, relu, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 1024}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf51', 1048576*c0 + c1 + 524288, {c0: 8, c1: 524288}, None),
        MemoryDep('buf51', 1048576*c0 + c1, {c0: 8, c1: 524288}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1024, 4096)
op52.sizes = ([8, 128], [4096])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = 1048576*z0 + 4096*z1 + z2 + 524288
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf52', get_index_2, reduction)
        return store_reduction


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 1024}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 1024}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (1024, 1)
op53.sizes = ([1024], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op53_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf53', get_index_1, truediv, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 512}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 512}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg102_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg103_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg104_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 64}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (512, 1)
op55.sizes = ([8, 64], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op55_loop_body:
    var_ranges = {z0: 8, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg103_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg104_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg105_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf55', get_index_6, relu, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2048}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf56', 256*c0 + c2 + 128, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf56', 256*c0 + c2, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf56', c0, {c0: 2048}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg107_1', c1 + 128, {c0: 16, c1: 128}, None),
        MemoryDep('arg107_1', c1, {c0: 16, c1: 128}, None),
        MemoryDep('arg107_1', c1, {c0: 8, c1: 256}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2048, 1)
op57.sizes = ([8, 2, 128], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 128}
    index0 = 256*z0 + 128*z1 + z2
    index1 = 128*z1 + z2
    index2 = 256*z0 + z2
    index3 = z2
    index4 = 256*z0 + z2 + 128
    index5 = z2 + 128
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf56', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg107_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf56', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg107_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf57', get_index_6, exp, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 4194304}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf51', 1048576*c0 + c1 + 524288, {c0: 8, c1: 524288}, None),
        MemoryDep('buf51', 1048576*c0 + c1, {c0: 8, c1: 524288}, None),
        MemoryDep('buf57', 256*c0 + c1 + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf57', 256*c0 + c1, {c0: 8, c1: 128}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (4194304, 1)
op58.sizes = ([8, 128, 4096], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = 256*z0 + z1
    index2 = 256*z0 + z1 + 128
    index3 = 1048576*z0 + 4096*z1 + z2 + 524288
    index4 = 524288*z0 + 4096*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf57', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf51', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf57', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf57', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf57', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf58', get_index_8, add_2, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1048576}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf58', 128*c0 + 2*c1 + 1, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 + 63, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 + 64, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 + 65, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 - 1, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 - 63, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 - 64, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1 - 65, {c0: 32768, c1: 32}, None),
        MemoryDep('buf58', 128*c0 + 2*c1, {c0: 32768, c1: 32}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1048576, 1)
op59.sizes = ([1024, 32, 32], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op59_loop_body:
    var_ranges = {z0: 1024, z1: 32, z2: 32}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 4096*z0 + 128*z1 + 2*z2 - 65
    index3 = 2*z2
    index4 = 4096*z0 + 128*z1 + 2*z2 - 64
    index5 = 2*z2 + 1
    index6 = 4096*z0 + 128*z1 + 2*z2 - 63
    index7 = 2*z1
    index8 = 4096*z0 + 128*z1 + 2*z2 - 1
    index9 = 4096*z0 + 128*z1 + 2*z2
    index10 = 4096*z0 + 128*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 4096*z0 + 128*z1 + 2*z2 + 63
    index13 = 4096*z0 + 128*z1 + 2*z2 + 64
    index14 = 4096*z0 + 128*z1 + 2*z2 + 65
    index15 = 4*z1*z2 - 2*z1*Min(65, 2*z2 + 2) - 2*z1 - 2*z2*Min(65, 2*z1 + 2) - 2*z2 + Min(65, 2*z1 + 2)*Min(65, 2*z2 + 2) + Min(65, 2*z1 + 2) + Min(65, 2*z2 + 2) + 1
    index16 = 1024*z0 + 32*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(64, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(64, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(64, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(64, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(64, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(64, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(64, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(64, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(64, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(64, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(64, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(64, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(64, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(64, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(64, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(64, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(64, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf59', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf58', get_index)
        return load


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 2097152}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf47', 128*c0 + 2*c1 + 1, {c0: 65536, c1: 32}, None),
        MemoryDep('buf47', 128*c0 + 2*c1 + 64, {c0: 65536, c1: 32}, None),
        MemoryDep('buf47', 128*c0 + 2*c1 + 65, {c0: 65536, c1: 32}, None),
        MemoryDep('buf47', 128*c0 + 2*c1, {c0: 65536, c1: 32}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (2097152, 1)
op61.sizes = ([65536, 32], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op61_loop_body:
    var_ranges = {z0: 65536, z1: 32}
    index0 = 128*z0 + 2*z1
    index1 = 128*z0 + 2*z1 + 1
    index2 = 128*z0 + 2*z1 + 64
    index3 = 128*z0 + 2*z1 + 65
    index4 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf47', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf61', get_index_4, mul, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 4194304}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 4194304}, None),
        MemoryDep('buf62', c0, {c0: 4194304}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg110_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg111_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg112_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg114_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg115_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg116_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg117_1', c1, {c0: 8, c1: 512}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (4194304, 1)
op63.sizes = ([8, 512, 1024], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg110_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf62', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg114_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg115_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg116_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg117_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf63', get_index_10, add_4, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 4194304}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 4194304}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf64.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (4194304, 1)
op64.sizes = ([4194304], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op64_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf64', get_index_1, relu, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.convolution


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 1048576}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 1048576}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg120_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg121_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 128}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (1048576, 1)
op66.sizes = ([8, 128, 1024], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 131072*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf66', get_index_5, relu, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 2097152}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 2097152}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg125_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg126_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg127_1', c1, {c0: 8, c1: 256}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (2097152, 1)
op68.sizes = ([8, 256, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg124_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, relu, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1024}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf68', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf68', 262144*c0 + c1, {c0: 8, c1: 131072}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (1024, 1024)
op69.sizes = ([8, 128], [1024])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
class op69_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = 262144*z0 + 1024*z1 + z2 + 131072
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf69', get_index_2, reduction)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1024}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 1024}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1024, 1)
op70.sizes = ([1024], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op70_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf70', get_index_1, truediv, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 512}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 512}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg131_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg132_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg133_1', c1, {c0: 8, c1: 64}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (512, 1)
op72.sizes = ([8, 64], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op72_loop_body:
    var_ranges = {z0: 8, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg133_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf72', get_index_6, relu, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelAlloc)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelAlloc
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = extern_kernels.convolution


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 2048}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf73', 256*c0 + c2 + 128, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf73', 256*c0 + c2, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf73', c0, {c0: 2048}, None)]
op74.met_dependencies = 
    [   MemoryDep('arg135_1', c1 + 128, {c0: 16, c1: 128}, None),
        MemoryDep('arg135_1', c1, {c0: 16, c1: 128}, None),
        MemoryDep('arg135_1', c1, {c0: 8, c1: 256}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (2048, 1)
op74.sizes = ([8, 2, 128], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
class op74_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 128}
    index0 = 256*z0 + 128*z1 + z2
    index1 = 128*z1 + z2
    index2 = 256*z0 + z2
    index3 = z2
    index4 = 256*z0 + z2 + 128
    index5 = z2 + 128
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf73', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg135_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf73', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg135_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf74', get_index_6, exp, None)
        return store


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1048576}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf68', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf68', 262144*c0 + c1, {c0: 8, c1: 131072}, None),
        MemoryDep('buf74', 256*c0 + c1 + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf74', 256*c0 + c1, {c0: 8, c1: 128}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1048576, 1)
op75.sizes = ([8, 128, 1024], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op75_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = 256*z0 + z1
    index2 = 256*z0 + z1 + 128
    index3 = 262144*z0 + 1024*z1 + z2 + 131072
    index4 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf74', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf74', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf68', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf74', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf74', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf74', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf75', get_index_8, add_2, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 4194304}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 4194304}, None),
        MemoryDep('buf76', c0, {c0: 4194304}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg138_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg140_1', c1, {c0: 8, c1: 512}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (4194304, 1)
op77.sizes = ([8, 512, 1024], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf64', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf77', get_index_6, relu, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.convolution


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1048576}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 1048576}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg143_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg144_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg145_1', c1, {c0: 8, c1: 128}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1048576, 1)
op79.sizes = ([8, 128, 1024], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op79_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 131072*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, relu, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 2097152}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 2097152}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg148_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 256}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (2097152, 1)
op81.sizes = ([8, 256, 1024], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1024}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf81', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf81', 262144*c0 + c1, {c0: 8, c1: 131072}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1024, 1024)
op82.sizes = ([8, 128], [1024])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
class op82_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = 262144*z0 + 1024*z1 + z2 + 131072
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf81', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf82', get_index_2, reduction)
        return store_reduction


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 1024}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1024}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (1024, 1)
op83.sizes = ([1024], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op83_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf83', get_index_1, truediv, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 512}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 512}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg153_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg154_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg155_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg156_1', c1, {c0: 8, c1: 64}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (512, 1)
op85.sizes = ([8, 64], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op85_loop_body:
    var_ranges = {z0: 8, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg156_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf85', get_index_6, relu, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 2048}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf86', 256*c0 + c2 + 128, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf86', 256*c0 + c2, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf86', c0, {c0: 2048}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg158_1', c1 + 128, {c0: 16, c1: 128}, None),
        MemoryDep('arg158_1', c1, {c0: 16, c1: 128}, None),
        MemoryDep('arg158_1', c1, {c0: 8, c1: 256}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (2048, 1)
op87.sizes = ([8, 2, 128], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
class op87_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 128}
    index0 = 256*z0 + 128*z1 + z2
    index1 = 128*z1 + z2
    index2 = 256*z0 + z2
    index3 = z2
    index4 = 256*z0 + z2 + 128
    index5 = z2 + 128
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg158_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf86', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg158_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf87', get_index_6, exp, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1048576}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf81', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf81', 262144*c0 + c1, {c0: 8, c1: 131072}, None),
        MemoryDep('buf87', 256*c0 + c1 + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf87', 256*c0 + c1, {c0: 8, c1: 128}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1048576, 1)
op88.sizes = ([8, 128, 1024], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = 256*z0 + z1
    index2 = 256*z0 + z1 + 128
    index3 = 262144*z0 + 1024*z1 + z2 + 131072
    index4 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf87', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf87', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf81', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf87', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf87', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf87', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf88', get_index_8, add_2, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 4194304}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 4194304}, None),
        MemoryDep('buf89', c0, {c0: 4194304}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg161_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg162_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg163_1', c1, {c0: 8, c1: 512}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (4194304, 1)
op90.sizes = ([8, 512, 1024], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg161_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg162_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg163_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf77', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf90', get_index_6, relu, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelAlloc)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelAlloc
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.convolution


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1048576}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 1048576}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg167_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg168_1', c1, {c0: 8, c1: 128}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (1048576, 1)
op92.sizes = ([8, 128, 1024], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 131072*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg166_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg167_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg168_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, relu, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelAlloc)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelAlloc
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.convolution


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 2097152}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 2097152}, None)]
op94.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg171_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg172_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 256}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (2097152, 1)
op94.sizes = ([8, 256, 1024], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op94_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg172_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg173_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf94', get_index_5, relu, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1024}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf94', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf94', 262144*c0 + c1, {c0: 8, c1: 131072}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1024, 1024)
op95.sizes = ([8, 128], [1024])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
class op95_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = 262144*z0 + 1024*z1 + z2 + 131072
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf94', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_2, reduction)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1024}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 1024}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1024, 1)
op96.sizes = ([1024], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op96_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf96', get_index_1, truediv, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 512}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 512}, None)]
op98.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg176_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg177_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg178_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg179_1', c1, {c0: 8, c1: 64}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (512, 1)
op98.sizes = ([8, 64], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg178_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg179_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf98', get_index_6, relu, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelAlloc)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelAlloc
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.convolution


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 2048}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf99', 256*c0 + c2 + 128, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf99', 256*c0 + c2, {c0: 8, c1: 2, c2: 128}, None),
        MemoryDep('buf99', c0, {c0: 2048}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg181_1', c1 + 128, {c0: 16, c1: 128}, None),
        MemoryDep('arg181_1', c1, {c0: 16, c1: 128}, None),
        MemoryDep('arg181_1', c1, {c0: 8, c1: 256}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (2048, 1)
op100.sizes = ([8, 2, 128], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 128}
    index0 = 256*z0 + 128*z1 + z2
    index1 = 128*z1 + z2
    index2 = 256*z0 + z2
    index3 = z2
    index4 = 256*z0 + z2 + 128
    index5 = z2 + 128
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf99', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg181_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf99', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg181_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf100', get_index_6, exp, None)
        return store


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 1048576}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', 256*c0 + c1 + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf100', 256*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf94', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf94', 262144*c0 + c1, {c0: 8, c1: 131072}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (1048576, 1)
op101.sizes = ([8, 128, 1024], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 128], stride=[256, 128, 2048, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = 256*z0 + z1
    index2 = 256*z0 + z1 + 128
    index3 = 262144*z0 + 1024*z1 + z2 + 131072
    index4 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf100', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf100', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf94', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf100', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf100', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf100', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf101', get_index_8, add_2, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 4194304}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 4194304}, None),
        MemoryDep('buf90', c0, {c0: 4194304}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg184_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg185_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 512}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (4194304, 1)
op103.sizes = ([8, 512, 1024], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op103_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg184_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg185_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg186_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf90', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf103', get_index_6, relu, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2097152}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 2097152}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg190_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg191_1', c1, {c0: 8, c1: 256}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2097152, 1)
op105.sizes = ([8, 256, 1024], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op105_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg190_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg191_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, relu, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 4194304}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 4194304}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg194_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 512}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (4194304, 1)
op107.sizes = ([8, 512, 1024], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg196_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf107', get_index_5, relu, None)
        return store


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 2048}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf107', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf107', 524288*c0 + c1, {c0: 8, c1: 262144}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (2048, 1024)
op108.sizes = ([8, 256], [1024])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op108_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = 524288*z0 + 1024*z1 + z2 + 262144
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_2, reduction)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 2048}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 2048}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (2048, 1)
op109.sizes = ([2048], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op109_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf109', get_index_1, truediv, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1024}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 1024}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg199_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg200_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg201_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg202_1', c1, {c0: 8, c1: 128}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1024, 1)
op111.sizes = ([8, 128], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg198_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg199_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg200_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg201_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg202_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf111', get_index_6, relu, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 4096}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf112', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf112', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf112', c0, {c0: 4096}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg204_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg204_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg204_1', c1, {c0: 8, c1: 512}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (4096, 1)
op113.sizes = ([8, 2, 256], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op113_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf112', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg204_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf112', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg204_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf113', get_index_6, exp, None)
        return store


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 2097152}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf107', 524288*c0 + c1 + 262144, {c0: 8, c1: 262144}, None),
        MemoryDep('buf107', 524288*c0 + c1, {c0: 8, c1: 262144}, None),
        MemoryDep('buf113', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf113', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (2097152, 1)
op114.sizes = ([8, 256, 1024], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 524288*z0 + 1024*z1 + z2 + 262144
    index4 = 262144*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf113', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf113', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf107', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf113', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf113', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf113', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf114', get_index_8, add_2, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 524288}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf114', 64*c0 + 2*c1 + 1, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 + 31, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 + 32, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 + 33, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 - 1, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 - 31, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 - 32, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1 - 33, {c0: 32768, c1: 16}, None),
        MemoryDep('buf114', 64*c0 + 2*c1, {c0: 32768, c1: 16}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (524288, 1)
op115.sizes = ([2048, 16, 16], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op115_loop_body:
    var_ranges = {z0: 2048, z1: 16, z2: 16}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 1024*z0 + 64*z1 + 2*z2 - 33
    index3 = 2*z2
    index4 = 1024*z0 + 64*z1 + 2*z2 - 32
    index5 = 2*z2 + 1
    index6 = 1024*z0 + 64*z1 + 2*z2 - 31
    index7 = 2*z1
    index8 = 1024*z0 + 64*z1 + 2*z2 - 1
    index9 = 1024*z0 + 64*z1 + 2*z2
    index10 = 1024*z0 + 64*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 1024*z0 + 64*z1 + 2*z2 + 31
    index13 = 1024*z0 + 64*z1 + 2*z2 + 32
    index14 = 1024*z0 + 64*z1 + 2*z2 + 33
    index15 = 4*z1*z2 - 2*z1*Min(33, 2*z2 + 2) - 2*z1 - 2*z2*Min(33, 2*z1 + 2) - 2*z2 + Min(33, 2*z1 + 2)*Min(33, 2*z2 + 2) + Min(33, 2*z1 + 2) + Min(33, 2*z2 + 2) + 1
    index16 = 256*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(32, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(32, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(32, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(32, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(32, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(32, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(32, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(32, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(32, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(32, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(32, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(32, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(32, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(32, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(32, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(32, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(32, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf115', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf114', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf114', get_index)
        return load


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1048576}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf103', 64*c0 + 2*c1 + 1, {c0: 65536, c1: 16}, None),
        MemoryDep('buf103', 64*c0 + 2*c1 + 32, {c0: 65536, c1: 16}, None),
        MemoryDep('buf103', 64*c0 + 2*c1 + 33, {c0: 65536, c1: 16}, None),
        MemoryDep('buf103', 64*c0 + 2*c1, {c0: 65536, c1: 16}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (1048576, 1)
op117.sizes = ([65536, 16], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op117_loop_body:
    var_ranges = {z0: 65536, z1: 16}
    index0 = 64*z0 + 2*z1
    index1 = 64*z0 + 2*z1 + 1
    index2 = 64*z0 + 2*z1 + 32
    index3 = 64*z0 + 2*z1 + 33
    index4 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf103', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf103', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf117', get_index_4, mul, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelAlloc)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelAlloc
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.convolution


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 2097152}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 2097152}, None),
        MemoryDep('buf118', c0, {c0: 2097152}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg207_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg208_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg209_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg211_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg212_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg213_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg214_1', c1, {c0: 8, c1: 1024}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (2097152, 1)
op119.sizes = ([8, 1024, 256], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg207_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg208_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg209_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf118', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg211_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg212_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg213_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg214_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf119', get_index_10, add_4, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 2097152}, None)]
op120.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 2097152}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (2097152, 1)
op120.sizes = ([2097152], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op120_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf120', get_index_1, relu, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelAlloc)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelAlloc
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.convolution


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 524288}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 524288}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg217_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg218_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg219_1', c1, {c0: 8, c1: 256}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (524288, 1)
op122.sizes = ([8, 256, 256], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg217_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg218_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg219_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf122', get_index_5, relu, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelAlloc)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelAlloc
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.convolution


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 1048576}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 1048576}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg222_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg223_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg224_1', c1, {c0: 8, c1: 512}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (1048576, 1)
op124.sizes = ([8, 512, 256], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg222_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg223_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg224_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, relu, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2048}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf124', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf124', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (2048, 256)
op125.sizes = ([8, 256], [256])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op125_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_2, reduction)
        return store_reduction


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 2048}, None)]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 2048}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (2048, 1)
op126.sizes = ([2048], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op126_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf126', get_index_1, truediv, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.node.kernel = extern_kernels.convolution


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1024}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1024}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg227_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg228_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg229_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg230_1', c1, {c0: 8, c1: 128}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1024, 1)
op128.sizes = ([8, 128], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op128_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg227_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg228_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg229_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg230_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf128', get_index_6, relu, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelAlloc)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelAlloc
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.convolution


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 4096}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf129', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf129', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf129', c0, {c0: 4096}, None)]
op130.met_dependencies = 
    [   MemoryDep('arg232_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg232_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg232_1', c1, {c0: 8, c1: 512}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (4096, 1)
op130.sizes = ([8, 2, 256], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf129', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg232_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf129', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg232_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf130', get_index_6, exp, None)
        return store


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 524288}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf124', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf124', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf130', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf130', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (524288, 1)
op131.sizes = ([8, 256, 256], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op131_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf130', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf130', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf124', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf130', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf130', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf130', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf131', get_index_8, add_2, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelAlloc)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelAlloc
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.node.kernel = extern_kernels.convolution


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 2097152}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf132', c0, {c0: 2097152}, None)]
op133.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg235_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg236_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg237_1', c1, {c0: 8, c1: 1024}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf133.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (2097152, 1)
op133.sizes = ([8, 1024, 256], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg235_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg236_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg237_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf120', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf133', get_index_6, relu, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelAlloc)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelAlloc
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.convolution


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 524288}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 524288}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg239_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg240_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg241_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg242_1', c1, {c0: 8, c1: 256}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (524288, 1)
op135.sizes = ([8, 256, 256], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op135_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg240_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg241_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg242_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, relu, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 1048576}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 1048576}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg244_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg245_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg246_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg247_1', c1, {c0: 8, c1: 512}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (1048576, 1)
op137.sizes = ([8, 512, 256], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg245_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg247_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf137', get_index_5, relu, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 2048}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf137', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf137', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf138.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (2048, 256)
op138.sizes = ([8, 256], [256])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf137', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_2, reduction)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 2048}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 2048}, None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (2048, 1)
op139.sizes = ([2048], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op139_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf139', get_index_1, truediv, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1024}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 1024}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg250_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg251_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg252_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg253_1', c1, {c0: 8, c1: 128}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1024, 1)
op141.sizes = ([8, 128], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg251_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg252_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg253_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf141', get_index_6, relu, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 4096}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf142', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf142', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf142', c0, {c0: 4096}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg255_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg255_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg255_1', c1, {c0: 8, c1: 512}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (4096, 1)
op143.sizes = ([8, 2, 256], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg255_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf142', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg255_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf142', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg255_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf143', get_index_6, exp, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 524288}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf137', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf137', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf143', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf143', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (524288, 1)
op144.sizes = ([8, 256, 256], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf143', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf143', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf137', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf143', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf143', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf143', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf144', get_index_8, add_2, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.node.kernel = extern_kernels.convolution


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 2097152}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 2097152}, None),
        MemoryDep('buf145', c0, {c0: 2097152}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg258_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg259_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg260_1', c1, {c0: 8, c1: 1024}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (2097152, 1)
op146.sizes = ([8, 1024, 256], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op146_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf133', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf146', get_index_6, relu, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 524288}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 524288}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg263_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg264_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg265_1', c1, {c0: 8, c1: 256}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (524288, 1)
op148.sizes = ([8, 256, 256], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op148_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf148', get_index_5, relu, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1048576}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 1048576}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg268_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg269_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg270_1', c1, {c0: 8, c1: 512}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (1048576, 1)
op150.sizes = ([8, 512, 256], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf150', get_index_5, relu, None)
        return store


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 2048}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf150', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf150', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (2048, 256)
op151.sizes = ([8, 256], [256])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf150', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_2, reduction)
        return store_reduction


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2048}, None)]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 2048}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (2048, 1)
op152.sizes = ([2048], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op152_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf152', get_index_1, truediv, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelAlloc)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelAlloc
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.node.kernel = extern_kernels.convolution


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1024}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 1024}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg273_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg274_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg275_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg276_1', c1, {c0: 8, c1: 128}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1024, 1)
op154.sizes = ([8, 128], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg276_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf154', get_index_6, relu, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelAlloc)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelAlloc
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.convolution


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 4096}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf155', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf155', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf155', c0, {c0: 4096}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg278_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg278_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg278_1', c1, {c0: 8, c1: 512}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (4096, 1)
op156.sizes = ([8, 2, 256], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg278_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf155', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg278_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf156', get_index_6, exp, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 524288}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf150', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf150', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf156', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf156', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (524288, 1)
op157.sizes = ([8, 256, 256], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op157_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf156', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf156', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf156', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf150', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf156', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf156', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf156', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf157', get_index_8, add_2, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelAlloc)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelAlloc
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.convolution


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 2097152}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 2097152}, None),
        MemoryDep('buf158', c0, {c0: 2097152}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg281_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg282_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg283_1', c1, {c0: 8, c1: 1024}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (2097152, 1)
op159.sizes = ([8, 1024, 256], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op159_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg281_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg282_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg283_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf146', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf159', get_index_6, relu, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg284_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 524288}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 524288}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg286_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg287_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg288_1', c1, {c0: 8, c1: 256}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (524288, 1)
op161.sizes = ([8, 256, 256], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg286_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg287_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg288_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf161', get_index_5, relu, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelAlloc)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelAlloc
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False)]
]
op162.node.kernel = extern_kernels.convolution


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 1048576}, None)]
op163.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 1048576}, None)]
op163.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg291_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg292_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg293_1', c1, {c0: 8, c1: 512}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (1048576, 1)
op163.sizes = ([8, 512, 256], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg290_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg291_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg292_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg293_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf163', get_index_5, relu, None)
        return store


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 2048}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf163', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf163', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (2048, 256)
op164.sizes = ([8, 256], [256])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf163', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_2, reduction)
        return store_reduction


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 2048}, None)]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 2048}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (2048, 1)
op165.sizes = ([2048], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op165_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf165', get_index_1, truediv, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelAlloc)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelAlloc
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.convolution


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 1024}, None)]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 1024}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg296_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg297_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg298_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg299_1', c1, {c0: 8, c1: 128}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (1024, 1)
op167.sizes = ([8, 128], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op167_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg295_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg297_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg298_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg299_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf167', get_index_6, relu, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.node.kernel = extern_kernels.convolution


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 4096}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf168', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf168', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf168', c0, {c0: 4096}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg301_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg301_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg301_1', c1, {c0: 8, c1: 512}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (4096, 1)
op169.sizes = ([8, 2, 256], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf168', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg301_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf168', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg301_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf169', get_index_6, exp, None)
        return store


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 524288}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf163', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf163', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf169', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf169', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (524288, 1)
op170.sizes = ([8, 256, 256], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op170_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf169', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf169', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf163', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf169', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf169', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf169', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf170', get_index_8, add_2, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelAlloc)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg302_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelAlloc
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.convolution


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 2097152}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 2097152}, None),
        MemoryDep('buf171', c0, {c0: 2097152}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg304_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg305_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg306_1', c1, {c0: 8, c1: 1024}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf172.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (2097152, 1)
op172.sizes = ([8, 1024, 256], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg303_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg304_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg305_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg306_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf159', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf172', get_index_6, relu, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelAlloc)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelAlloc
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.convolution


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 524288}, None)]
op174.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 524288}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg309_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg310_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg311_1', c1, {c0: 8, c1: 256}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (524288, 1)
op174.sizes = ([8, 256, 256], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg309_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg310_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg311_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf174', get_index_5, relu, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelAlloc)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg312_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelAlloc
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False)]
]
op175.node.kernel = extern_kernels.convolution


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 1048576}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 1048576}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg313_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg314_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg315_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg316_1', c1, {c0: 8, c1: 512}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (1048576, 1)
op176.sizes = ([8, 512, 256], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op176_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg313_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg314_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg315_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg316_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, relu, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2048}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf176', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf176', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2048, 256)
op177.sizes = ([8, 256], [256])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf176', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf177', get_index_2, reduction)
        return store_reduction


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 2048}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 2048}, None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (2048, 1)
op178.sizes = ([2048], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op178_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf178', get_index_1, truediv, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.convolution


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 1024}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 1024}, None)]
op180.met_dependencies = 
    [   MemoryDep('arg318_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg319_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg320_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg321_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg322_1', c1, {c0: 8, c1: 128}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (1024, 1)
op180.sizes = ([8, 128], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg319_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg320_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg321_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg322_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf180', get_index_6, relu, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.convolution


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 4096}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf181', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf181', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf181', c0, {c0: 4096}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg324_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg324_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg324_1', c1, {c0: 8, c1: 512}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (4096, 1)
op182.sizes = ([8, 2, 256], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf181', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg324_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf181', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg324_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf182', get_index_6, exp, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 524288}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf176', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf176', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf182', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf182', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (524288, 1)
op183.sizes = ([8, 256, 256], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf182', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf182', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf182', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf176', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf182', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf182', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf182', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf183', get_index_8, add_2, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelAlloc)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg325_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelAlloc
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.convolution


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 2097152}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 2097152}, None),
        MemoryDep('buf184', c0, {c0: 2097152}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg326_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg327_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg328_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg329_1', c1, {c0: 8, c1: 1024}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf185.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (2097152, 1)
op185.sizes = ([8, 1024, 256], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op185_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg326_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg327_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg328_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg329_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf172', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf185', get_index_6, relu, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg330_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 524288}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 524288}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg331_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg332_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg333_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg334_1', c1, {c0: 8, c1: 256}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (524288, 1)
op187.sizes = ([8, 256, 256], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg331_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg332_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg333_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg334_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf187', get_index_5, relu, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelAlloc)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelAlloc
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.convolution


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 1048576}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 1048576}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg336_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg337_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg338_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg339_1', c1, {c0: 8, c1: 512}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf189.users = [
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (1048576, 1)
op189.sizes = ([8, 512, 256], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op189_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg337_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg338_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg339_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, relu, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 2048}, None)]
op190.unmet_dependencies = 
    [   MemoryDep('buf189', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf189', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (2048, 256)
op190.sizes = ([8, 256], [256])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op190_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf189', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf190', get_index_2, reduction)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 2048}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 2048}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (2048, 1)
op191.sizes = ([2048], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op191_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf191', get_index_1, truediv, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelAlloc)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg340_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelAlloc
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.convolution


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 1024}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 1024}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg342_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg343_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg344_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg345_1', c1, {c0: 8, c1: 128}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (1024, 1)
op193.sizes = ([8, 128], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg341_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg342_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg343_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg344_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg345_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf193', get_index_6, relu, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 4096}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf194', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf194', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf194', c0, {c0: 4096}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg347_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg347_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg347_1', c1, {c0: 8, c1: 512}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (4096, 1)
op195.sizes = ([8, 2, 256], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op195_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf194', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg347_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf194', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg347_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf195', get_index_6, exp, None)
        return store


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 524288}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf189', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf189', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf195', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf195', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (524288, 1)
op196.sizes = ([8, 256, 256], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf195', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf195', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf189', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf195', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf195', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf195', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf196', get_index_8, add_2, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg348_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 2097152}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 2097152}, None),
        MemoryDep('buf197', c0, {c0: 2097152}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg349_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg350_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg351_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg352_1', c1, {c0: 8, c1: 1024}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (2097152, 1)
op198.sizes = ([8, 1024, 256], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg349_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg350_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg351_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg352_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf185', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf198', get_index_6, relu, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 524288}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 524288}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg355_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg356_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg357_1', c1, {c0: 8, c1: 256}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (524288, 1)
op200.sizes = ([8, 256, 256], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op200_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg354_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg355_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg356_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg357_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf200', get_index_5, relu, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg358_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 1048576}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 1048576}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg359_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg360_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg361_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg362_1', c1, {c0: 8, c1: 512}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (1048576, 1)
op202.sizes = ([8, 512, 256], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg359_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg360_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg361_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg362_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf202', get_index_5, relu, None)
        return store


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 2048}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf202', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf202', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (2048, 256)
op203.sizes = ([8, 256], [256])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op203_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_2, reduction)
        return store_reduction


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 2048}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 2048}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (2048, 1)
op204.sizes = ([2048], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op204_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf204', get_index_1, truediv, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelAlloc)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelAlloc
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.node.kernel = extern_kernels.convolution


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1024}, None)]
op206.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 1024}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg364_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg365_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg366_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg367_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg368_1', c1, {c0: 8, c1: 128}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1024, 1)
op206.sizes = ([8, 128], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg364_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg365_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg366_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg367_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg368_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf206', get_index_6, relu, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 4096}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf207', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf207', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf207', c0, {c0: 4096}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg370_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg370_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg370_1', c1, {c0: 8, c1: 512}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (4096, 1)
op208.sizes = ([8, 2, 256], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op208_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg370_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf207', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg370_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf208', get_index_6, exp, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 524288}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf202', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf202', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf208', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf208', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (524288, 1)
op209.sizes = ([8, 256, 256], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op209_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf208', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf208', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf202', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf208', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf208', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf208', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf209', get_index_8, add_2, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelAlloc)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op210.outputs = [
    buf210: ExternKernelAlloc
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.convolution


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 2097152}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf210', c0, {c0: 2097152}, None)]
op211.met_dependencies = 
    [   MemoryDep('arg372_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg373_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg374_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg375_1', c1, {c0: 8, c1: 1024}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (2097152, 1)
op211.sizes = ([8, 1024, 256], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op211_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg373_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg374_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg375_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf198', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf211', get_index_6, relu, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelAlloc)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg376_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelAlloc
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.node.kernel = extern_kernels.convolution


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 524288}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 524288}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg377_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg378_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg379_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg380_1', c1, {c0: 8, c1: 256}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (524288, 1)
op213.sizes = ([8, 256, 256], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg377_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg379_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf213', get_index_5, relu, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelAlloc)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg381_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelAlloc
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.node.kernel = extern_kernels.convolution


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 1048576}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 1048576}, None)]
op215.met_dependencies = 
    [   MemoryDep('arg382_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg383_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg384_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg385_1', c1, {c0: 8, c1: 512}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (1048576, 1)
op215.sizes = ([8, 512, 256], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg383_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf215', get_index_5, relu, None)
        return store


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 2048}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf215', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf215', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (2048, 256)
op216.sizes = ([8, 256], [256])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op216_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf215', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_2, reduction)
        return store_reduction


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 2048}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 2048}, None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (2048, 1)
op217.sizes = ([2048], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op217_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf217', get_index_1, truediv, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelAlloc)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg386_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelAlloc
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.convolution


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 1024}, None)]
op219.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 1024}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg387_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg388_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg389_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg390_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg391_1', c1, {c0: 8, c1: 128}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (1024, 1)
op219.sizes = ([8, 128], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op219_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg388_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg389_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg391_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf219', get_index_6, relu, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelAlloc)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg392_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelAlloc
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = extern_kernels.convolution


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 4096}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf220', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf220', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf220', c0, {c0: 4096}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg393_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg393_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg393_1', c1, {c0: 8, c1: 512}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (4096, 1)
op221.sizes = ([8, 2, 256], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op221_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf220', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg393_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf220', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg393_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf221', get_index_6, exp, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 524288}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf215', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf215', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf221', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf221', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (524288, 1)
op222.sizes = ([8, 256, 256], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op222_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf221', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf221', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf215', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf221', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf221', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf221', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf222', get_index_8, add_2, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelAlloc)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg394_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelAlloc
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False)]
]
op223.node.kernel = extern_kernels.convolution


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 2097152}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 2097152}, None),
        MemoryDep('buf223', c0, {c0: 2097152}, None)]
op224.met_dependencies = 
    [   MemoryDep('arg395_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg396_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg397_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg398_1', c1, {c0: 8, c1: 1024}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf224.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (2097152, 1)
op224.sizes = ([8, 1024, 256], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg395_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg396_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg397_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg398_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf211', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf224', get_index_6, relu, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False)]
]
op225.node.kernel = extern_kernels.convolution


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 524288}, None)]
op226.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 524288}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg400_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg401_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg402_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg403_1', c1, {c0: 8, c1: 256}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (524288, 1)
op226.sizes = ([8, 256, 256], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg400_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg401_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg402_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg403_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf226', get_index_5, relu, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelAlloc)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='arg404_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelAlloc
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False)]
]
op227.node.kernel = extern_kernels.convolution


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 1048576}, None)]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 1048576}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg405_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg406_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg407_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg408_1', c1, {c0: 8, c1: 512}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (1048576, 1)
op228.sizes = ([8, 512, 256], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg405_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg406_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg407_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg408_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf228', get_index_5, relu, None)
        return store


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 2048}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf228', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf228', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (2048, 256)
op229.sizes = ([8, 256], [256])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op229_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf229', get_index_2, reduction)
        return store_reduction


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 2048}, None)]
op230.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 2048}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (2048, 1)
op230.sizes = ([2048], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op230_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf230', get_index_1, truediv, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelAlloc)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg409_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelAlloc
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op231.node.kernel = extern_kernels.convolution


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 1024}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 1024}, None)]
op232.met_dependencies = 
    [   MemoryDep('arg410_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg411_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg412_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg413_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg414_1', c1, {c0: 8, c1: 128}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (1024, 1)
op232.sizes = ([8, 128], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op232_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg410_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg411_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg412_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg413_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg414_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf232', get_index_6, relu, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg415_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 4096}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf233', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf233', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf233', c0, {c0: 4096}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg416_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg416_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg416_1', c1, {c0: 8, c1: 512}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf234.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (4096, 1)
op234.sizes = ([8, 2, 256], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op234_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg416_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf233', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg416_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf233', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg416_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf234', get_index_6, exp, None)
        return store


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 524288}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf228', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf228', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf234', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf234', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (524288, 1)
op235.sizes = ([8, 256, 256], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op235_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf234', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf234', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf234', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf228', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf234', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf234', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf234', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf235', get_index_8, add_2, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelAlloc)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = [StarDep(name='arg417_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelAlloc
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.node.kernel = extern_kernels.convolution


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 2097152}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 2097152}, None),
        MemoryDep('buf236', c0, {c0: 2097152}, None)]
op237.met_dependencies = 
    [   MemoryDep('arg418_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg419_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg420_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg421_1', c1, {c0: 8, c1: 1024}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf237.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (2097152, 1)
op237.sizes = ([8, 1024, 256], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op237_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg418_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg419_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg420_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg421_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf224', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf237', get_index_6, relu, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelAlloc)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg422_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelAlloc
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.convolution


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 524288}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 524288}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg423_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg424_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg425_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg426_1', c1, {c0: 8, c1: 256}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (524288, 1)
op239.sizes = ([8, 256, 256], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg423_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg424_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg425_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg426_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf239', get_index_5, relu, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg427_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 1048576}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 1048576}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg428_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg429_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg430_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg431_1', c1, {c0: 8, c1: 512}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op241.group.device = cuda:0
op241.group.iteration = (1048576, 1)
op241.sizes = ([8, 512, 256], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op241_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg428_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg429_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg430_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg431_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf241', get_index_5, relu, None)
        return store


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 2048}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf241', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf241', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (2048, 256)
op242.sizes = ([8, 256], [256])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op242_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf241', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_2, reduction)
        return store_reduction


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 2048}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 2048}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (2048, 1)
op243.sizes = ([2048], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op243_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf243', get_index_1, truediv, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg432_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.convolution


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1024}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 1024}, None)]
op245.met_dependencies = 
    [   MemoryDep('arg433_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg434_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg435_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg436_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg437_1', c1, {c0: 8, c1: 128}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (1024, 1)
op245.sizes = ([8, 128], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op245_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg433_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg434_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg435_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg436_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg437_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf245', get_index_6, relu, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelAlloc)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg438_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelAlloc
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.convolution


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 4096}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf246', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf246', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf246', c0, {c0: 4096}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg439_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg439_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg439_1', c1, {c0: 8, c1: 512}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (4096, 1)
op247.sizes = ([8, 2, 256], [])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op247_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg439_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf246', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg439_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf246', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg439_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf247', get_index_6, exp, None)
        return store


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 524288}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf241', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf241', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf247', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf247', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (524288, 1)
op248.sizes = ([8, 256, 256], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf247', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf241', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf247', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf247', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf247', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf248', get_index_8, add_2, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelAlloc)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg440_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelAlloc
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.node.kernel = extern_kernels.convolution


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 2097152}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 2097152}, None),
        MemoryDep('buf249', c0, {c0: 2097152}, None)]
op250.met_dependencies = 
    [   MemoryDep('arg441_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg442_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg443_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg444_1', c1, {c0: 8, c1: 1024}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf250.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (2097152, 1)
op250.sizes = ([8, 1024, 256], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg441_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg441_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg442_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg443_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg444_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf237', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf250', get_index_6, relu, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelAlloc)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg445_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelAlloc
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.convolution


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 524288}, None)]
op252.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 524288}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg446_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg447_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg448_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg449_1', c1, {c0: 8, c1: 256}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (524288, 1)
op252.sizes = ([8, 256, 256], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg446_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg447_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg448_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg449_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, relu, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelAlloc)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg450_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelAlloc
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op253.node.kernel = extern_kernels.convolution


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 1048576}, None)]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 1048576}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg451_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg452_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg453_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg454_1', c1, {c0: 8, c1: 512}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (1048576, 1)
op254.sizes = ([8, 512, 256], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg451_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op254_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg451_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg452_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg453_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg454_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf254', get_index_5, relu, None)
        return store


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 2048}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf254', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf254', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (2048, 256)
op255.sizes = ([8, 256], [256])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf254', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_2, reduction)
        return store_reduction


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 2048}, None)]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 2048}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (2048, 1)
op256.sizes = ([2048], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op256_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf256', get_index_1, truediv, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelAlloc)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg455_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelAlloc
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.convolution


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 1024}, None)]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 1024}, None)]
op258.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg457_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg458_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg459_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg460_1', c1, {c0: 8, c1: 128}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (1024, 1)
op258.sizes = ([8, 128], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op258_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg456_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg457_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg458_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg459_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg460_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf258', get_index_6, relu, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelAlloc)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelAlloc
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.node.kernel = extern_kernels.convolution


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 4096}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf259', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf259', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf259', c0, {c0: 4096}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg462_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg462_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg462_1', c1, {c0: 8, c1: 512}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (4096, 1)
op260.sizes = ([8, 2, 256], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf259', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg462_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf259', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg462_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf260', get_index_6, exp, None)
        return store


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 524288}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf254', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf254', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf260', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf260', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (524288, 1)
op261.sizes = ([8, 256, 256], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op261_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf260', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf260', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf254', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf260', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf260', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf260', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf261', get_index_8, add_2, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelAlloc)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg463_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelAlloc
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op262.node.kernel = extern_kernels.convolution


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 2097152}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 2097152}, None),
        MemoryDep('buf262', c0, {c0: 2097152}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg464_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg465_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg466_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg467_1', c1, {c0: 8, c1: 1024}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (2097152, 1)
op263.sizes = ([8, 1024, 256], [])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op263_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg464_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg465_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg466_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg467_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf250', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf263', get_index_6, relu, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelAlloc)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg468_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelAlloc
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.convolution


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 524288}, None)]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 524288}, None)]
op265.met_dependencies = 
    [   MemoryDep('arg469_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg470_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg471_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg472_1', c1, {c0: 8, c1: 256}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (524288, 1)
op265.sizes = ([8, 256, 256], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op265_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg469_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg470_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg471_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg472_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf265', get_index_5, relu, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelAlloc)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg473_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelAlloc
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.convolution


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 1048576}, None)]
op267.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 1048576}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg474_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg475_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg476_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg477_1', c1, {c0: 8, c1: 512}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (1048576, 1)
op267.sizes = ([8, 512, 256], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg475_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op267_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg474_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg475_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg476_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg477_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, relu, None)
        return store


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 2048}, None)]
op268.unmet_dependencies = 
    [   MemoryDep('buf267', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf267', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (2048, 256)
op268.sizes = ([8, 256], [256])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op268_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf267', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf268', get_index_2, reduction)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 2048}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 2048}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (2048, 1)
op269.sizes = ([2048], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op269_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf269', get_index_1, truediv, None)
        return store


op270: ExternKernelSchedulerNode(ExternKernelAlloc)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg478_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelAlloc
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False)]
]
op270.node.kernel = extern_kernels.convolution


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 1024}, None)]
op271.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 1024}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg479_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg480_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg481_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg482_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg483_1', c1, {c0: 8, c1: 128}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (1024, 1)
op271.sizes = ([8, 128], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg481_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op271_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg479_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg480_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg481_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg482_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg483_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf271', get_index_6, relu, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg484_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.convolution


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 4096}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf272', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf272', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf272', c0, {c0: 4096}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg485_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg485_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg485_1', c1, {c0: 8, c1: 512}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (4096, 1)
op273.sizes = ([8, 2, 256], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg485_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg485_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf272', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg485_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf273', get_index_6, exp, None)
        return store


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 524288}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf267', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf267', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf273', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf273', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (524288, 1)
op274.sizes = ([8, 256, 256], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op274_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf273', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf267', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf273', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf273', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf273', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf274', get_index_8, add_2, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelAlloc)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg486_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelAlloc
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.node.kernel = extern_kernels.convolution


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 2097152}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf263', c0, {c0: 2097152}, None),
        MemoryDep('buf275', c0, {c0: 2097152}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg487_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg488_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg489_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg490_1', c1, {c0: 8, c1: 1024}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf276.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (2097152, 1)
op276.sizes = ([8, 1024, 256], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg487_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg488_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg490_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf263', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf276', get_index_6, relu, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelAlloc)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = [StarDep(name='arg491_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelAlloc
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False)]
]
op277.node.kernel = extern_kernels.convolution


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 524288}, None)]
op278.unmet_dependencies = [MemoryDep('buf277', c0, {c0: 524288}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg492_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg493_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg494_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg495_1', c1, {c0: 8, c1: 256}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (524288, 1)
op278.sizes = ([8, 256, 256], [])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg493_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg494_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg495_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf278', get_index_5, relu, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelAlloc)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg496_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelAlloc
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
]
op279.node.kernel = extern_kernels.convolution


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 1048576}, None)]
op280.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 1048576}, None)]
op280.met_dependencies = 
    [   MemoryDep('arg497_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg498_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg499_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg500_1', c1, {c0: 8, c1: 512}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
    ]
]
op280.group.device = cuda:0
op280.group.iteration = (1048576, 1)
op280.sizes = ([8, 512, 256], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg497_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg498_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg499_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg500_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf280', get_index_5, relu, None)
        return store


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 2048}, None)]
op281.unmet_dependencies = 
    [   MemoryDep('buf280', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf280', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (2048, 256)
op281.sizes = ([8, 256], [256])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op281_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf280', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf281', get_index_2, reduction)
        return store_reduction


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 2048}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 2048}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (2048, 1)
op282.sizes = ([2048], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op282_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf282', get_index_1, truediv, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelAlloc)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelAlloc
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op283.node.kernel = extern_kernels.convolution


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1024}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 1024}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg503_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg504_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg505_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg506_1', c1, {c0: 8, c1: 128}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (1024, 1)
op284.sizes = ([8, 128], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op284_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg503_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg504_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg505_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg506_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf284', get_index_6, relu, None)
        return store


op285: ExternKernelSchedulerNode(ExternKernelAlloc)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = [StarDep(name='arg507_1', mode=None)]
op285.outputs = [
    buf285: ExternKernelAlloc
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.node.kernel = extern_kernels.convolution


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 4096}, None)]
op286.unmet_dependencies = 
    [   MemoryDep('buf285', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf285', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf285', c0, {c0: 4096}, None)]
op286.met_dependencies = 
    [   MemoryDep('arg508_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg508_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg508_1', c1, {c0: 8, c1: 512}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (4096, 1)
op286.sizes = ([8, 2, 256], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op286_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg508_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf285', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg508_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf285', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg508_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf286', get_index_6, exp, None)
        return store


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 524288}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf280', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf280', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf286', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf286', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (524288, 1)
op287.sizes = ([8, 256, 256], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op287_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf286', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf280', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf286', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf286', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf286', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf287', get_index_8, add_2, None)
        return store


op288: ExternKernelSchedulerNode(ExternKernelAlloc)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg509_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelAlloc
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False)]
]
op288.node.kernel = extern_kernels.convolution


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 2097152}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 2097152}, None),
        MemoryDep('buf288', c0, {c0: 2097152}, None)]
op289.met_dependencies = 
    [   MemoryDep('arg510_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg511_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg512_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg513_1', c1, {c0: 8, c1: 1024}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf289.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op289.group.device = cuda:0
op289.group.iteration = (2097152, 1)
op289.sizes = ([8, 1024, 256], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op289_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg510_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg511_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg512_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg513_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf276', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf289', get_index_6, relu, None)
        return store


op290: ExternKernelSchedulerNode(ExternKernelAlloc)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = [StarDep(name='arg514_1', mode=None)]
op290.outputs = [
    buf290: ExternKernelAlloc
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf290.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False)]
]
op290.node.kernel = extern_kernels.convolution


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 524288}, None)]
op291.unmet_dependencies = [MemoryDep('buf290', c0, {c0: 524288}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg515_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg516_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg517_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg518_1', c1, {c0: 8, c1: 256}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (524288, 1)
op291.sizes = ([8, 256, 256], [])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg515_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op291_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg515_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg516_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg517_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg518_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf291', get_index_5, relu, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelAlloc)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op292.met_dependencies = [StarDep(name='arg519_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelAlloc
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False)]
]
op292.node.kernel = extern_kernels.convolution


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 1048576}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 1048576}, None)]
op293.met_dependencies = 
    [   MemoryDep('arg520_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg521_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg522_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg523_1', c1, {c0: 8, c1: 512}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (1048576, 1)
op293.sizes = ([8, 512, 256], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg520_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg521_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg522_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op293_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg520_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg521_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg522_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg523_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf293', get_index_5, relu, None)
        return store


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 2048}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf293', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf293', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (2048, 256)
op294.sizes = ([8, 256], [256])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op294_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf294', get_index_2, reduction)
        return store_reduction


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 2048}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 2048}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (2048, 1)
op295.sizes = ([2048], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op295_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf295', get_index_1, truediv, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelAlloc)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg524_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelAlloc
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf296.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False)]
]
op296.node.kernel = extern_kernels.convolution


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 1024}, None)]
op297.unmet_dependencies = [MemoryDep('buf296', c0, {c0: 1024}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg525_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg526_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg527_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg528_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg529_1', c1, {c0: 8, c1: 128}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (1024, 1)
op297.sizes = ([8, 128], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg526_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg527_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg528_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg529_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op297_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg525_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg526_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg527_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg528_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg529_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf297', get_index_6, relu, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelAlloc)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = [StarDep(name='arg530_1', mode=None)]
op298.outputs = [
    buf298: ExternKernelAlloc
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.node.kernel = extern_kernels.convolution


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 4096}, None)]
op299.unmet_dependencies = 
    [   MemoryDep('buf298', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf298', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf298', c0, {c0: 4096}, None)]
op299.met_dependencies = 
    [   MemoryDep('arg531_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg531_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg531_1', c1, {c0: 8, c1: 512}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf299.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (4096, 1)
op299.sizes = ([8, 2, 256], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op299_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg531_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg531_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf298', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg531_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf299', get_index_6, exp, None)
        return store


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 524288}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf293', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf293', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf299', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf299', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (524288, 1)
op300.sizes = ([8, 256, 256], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op300_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf299', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf299', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf293', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf299', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf299', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf299', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf300', get_index_8, add_2, None)
        return store


op301: ExternKernelSchedulerNode(ExternKernelAlloc)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf300', mode=None)]
op301.met_dependencies = [StarDep(name='arg532_1', mode=None)]
op301.outputs = [
    buf301: ExternKernelAlloc
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.convolution


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 2097152}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf289', c0, {c0: 2097152}, None),
        MemoryDep('buf301', c0, {c0: 2097152}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg533_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg534_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg535_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg536_1', c1, {c0: 8, c1: 1024}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf302.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (2097152, 1)
op302.sizes = ([8, 1024, 256], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg533_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg534_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg535_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg536_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg533_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg534_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg535_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg536_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf289', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf302', get_index_6, relu, None)
        return store


op303: ExternKernelSchedulerNode(ExternKernelAlloc)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='arg537_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelAlloc
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False)]
]
op303.node.kernel = extern_kernels.convolution


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 524288}, None)]
op304.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 524288}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg538_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg539_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg540_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg541_1', c1, {c0: 8, c1: 256}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (524288, 1)
op304.sizes = ([8, 256, 256], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg538_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg539_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg540_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg541_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg538_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg539_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg540_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg541_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf304', get_index_5, relu, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelAlloc)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg542_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelAlloc
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False)]
]
op305.node.kernel = extern_kernels.convolution


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 1048576}, None)]
op306.unmet_dependencies = [MemoryDep('buf305', c0, {c0: 1048576}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg543_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg544_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg545_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg546_1', c1, {c0: 8, c1: 512}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (1048576, 1)
op306.sizes = ([8, 512, 256], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg544_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg545_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg546_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op306_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg543_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg544_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg545_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg546_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf306', get_index_5, relu, None)
        return store


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 2048}, None)]
op307.unmet_dependencies = 
    [   MemoryDep('buf306', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf306', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (2048, 256)
op307.sizes = ([8, 256], [256])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op307_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf306', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf307', get_index_2, reduction)
        return store_reduction


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 2048}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 2048}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (2048, 1)
op308.sizes = ([2048], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op308_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf308', get_index_1, truediv, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelAlloc)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg547_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelAlloc
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.convolution


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 1024}, None)]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 1024}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg548_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg549_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg550_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg551_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg552_1', c1, {c0: 8, c1: 128}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (1024, 1)
op310.sizes = ([8, 128], [])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg549_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg550_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg551_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg552_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op310_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg548_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg549_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg550_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg551_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg552_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf310', get_index_6, relu, None)
        return store


op311: ExternKernelSchedulerNode(ExternKernelAlloc)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg553_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelAlloc
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.node.kernel = extern_kernels.convolution


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 4096}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf311', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf311', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf311', c0, {c0: 4096}, None)]
op312.met_dependencies = 
    [   MemoryDep('arg554_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg554_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg554_1', c1, {c0: 8, c1: 512}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (4096, 1)
op312.sizes = ([8, 2, 256], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op312_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg554_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf311', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg554_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf311', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg554_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf312', get_index_6, exp, None)
        return store


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 524288}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf306', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf306', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf312', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf312', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (524288, 1)
op313.sizes = ([8, 256, 256], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op313_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf312', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf312', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf312', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf306', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf312', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf312', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf312', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf313', get_index_8, add_2, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelAlloc)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg555_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelAlloc
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False)]
]
op314.node.kernel = extern_kernels.convolution


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 2097152}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 2097152}, None),
        MemoryDep('buf314', c0, {c0: 2097152}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg556_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg557_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg558_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg559_1', c1, {c0: 8, c1: 1024}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (2097152, 1)
op315.sizes = ([8, 1024, 256], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg556_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg557_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg558_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg559_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op315_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg556_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg557_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg558_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg559_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf302', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf315', get_index_6, relu, None)
        return store


op316: ExternKernelSchedulerNode(ExternKernelAlloc)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='arg560_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelAlloc
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf316.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False)]
]
op316.node.kernel = extern_kernels.convolution


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 524288}, None)]
op317.unmet_dependencies = [MemoryDep('buf316', c0, {c0: 524288}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg561_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg562_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg563_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg564_1', c1, {c0: 8, c1: 256}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (524288, 1)
op317.sizes = ([8, 256, 256], [])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg562_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg563_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg564_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op317_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg561_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg562_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg563_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg564_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf317', get_index_5, relu, None)
        return store


op318: ExternKernelSchedulerNode(ExternKernelAlloc)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='arg565_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelAlloc
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf318.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op318.node.kernel = extern_kernels.convolution


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 1048576}, None)]
op319.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 1048576}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg566_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg567_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg568_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg569_1', c1, {c0: 8, c1: 512}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (1048576, 1)
op319.sizes = ([8, 512, 256], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg567_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg569_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op319_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg566_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg567_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg568_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg569_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf319', get_index_5, relu, None)
        return store


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 2048}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf319', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf319', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf320.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (2048, 256)
op320.sizes = ([8, 256], [256])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op320_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf319', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf320', get_index_2, reduction)
        return store_reduction


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 2048}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 2048}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (2048, 1)
op321.sizes = ([2048], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op321_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf321', get_index_1, truediv, None)
        return store


op322: ExternKernelSchedulerNode(ExternKernelAlloc)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op322.met_dependencies = [StarDep(name='arg570_1', mode=None)]
op322.outputs = [
    buf322: ExternKernelAlloc
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False)]
]
op322.node.kernel = extern_kernels.convolution


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 1024}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 1024}, None)]
op323.met_dependencies = 
    [   MemoryDep('arg571_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg572_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg573_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg574_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg575_1', c1, {c0: 8, c1: 128}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (1024, 1)
op323.sizes = ([8, 128], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg571_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg572_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg574_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg575_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op323_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg571_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg572_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg573_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg574_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg575_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf323', get_index_6, relu, None)
        return store


op324: ExternKernelSchedulerNode(ExternKernelAlloc)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = [StarDep(name='arg576_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelAlloc
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.node.kernel = extern_kernels.convolution


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 4096}, None)]
op325.unmet_dependencies = 
    [   MemoryDep('buf324', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf324', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf324', c0, {c0: 4096}, None)]
op325.met_dependencies = 
    [   MemoryDep('arg577_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg577_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg577_1', c1, {c0: 8, c1: 512}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (4096, 1)
op325.sizes = ([8, 2, 256], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op325_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg577_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf324', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg577_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf324', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg577_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf325', get_index_6, exp, None)
        return store


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 524288}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf319', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf319', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf325', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf325', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (524288, 1)
op326.sizes = ([8, 256, 256], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op326_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf325', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf325', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf325', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf319', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf325', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf325', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf325', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf326', get_index_8, add_2, None)
        return store


op327: ExternKernelSchedulerNode(ExternKernelAlloc)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = [StarDep(name='arg578_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelAlloc
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False)]
]
op327.node.kernel = extern_kernels.convolution


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 2097152}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 2097152}, None),
        MemoryDep('buf327', c0, {c0: 2097152}, None)]
op328.met_dependencies = 
    [   MemoryDep('arg579_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg580_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg581_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg582_1', c1, {c0: 8, c1: 1024}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (2097152, 1)
op328.sizes = ([8, 1024, 256], [])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg580_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg581_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg582_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op328_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg579_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg580_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg581_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg582_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf315', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf328', get_index_6, relu, None)
        return store


op329: ExternKernelSchedulerNode(ExternKernelAlloc)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = [StarDep(name='arg583_1', mode=None)]
op329.outputs = [
    buf329: ExternKernelAlloc
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
]
op329.node.kernel = extern_kernels.convolution


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 524288}, None)]
op330.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 524288}, None)]
op330.met_dependencies = 
    [   MemoryDep('arg584_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg585_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg586_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg587_1', c1, {c0: 8, c1: 256}, None)]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (524288, 1)
op330.sizes = ([8, 256, 256], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg585_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg587_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op330_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg584_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg585_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg586_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg587_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf330', get_index_5, relu, None)
        return store


op331: ExternKernelSchedulerNode(ExternKernelAlloc)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op331.met_dependencies = [StarDep(name='arg588_1', mode=None)]
op331.outputs = [
    buf331: ExternKernelAlloc
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False)]
]
op331.node.kernel = extern_kernels.convolution


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1048576}, None)]
op332.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 1048576}, None)]
op332.met_dependencies = 
    [   MemoryDep('arg589_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg590_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg591_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg592_1', c1, {c0: 8, c1: 512}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (1048576, 1)
op332.sizes = ([8, 512, 256], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg589_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg590_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg592_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op332_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg589_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg590_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg591_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg592_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf332', get_index_5, relu, None)
        return store


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 2048}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf332', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf332', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (2048, 256)
op333.sizes = ([8, 256], [256])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op333_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf333', get_index_2, reduction)
        return store_reduction


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 2048}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 2048}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (2048, 1)
op334.sizes = ([2048], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op334_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf334', get_index_1, truediv, None)
        return store


op335: ExternKernelSchedulerNode(ExternKernelAlloc)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='arg593_1', mode=None)]
op335.outputs = [
    buf335: ExternKernelAlloc
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf335.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False)]
]
op335.node.kernel = extern_kernels.convolution


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 1024}, None)]
op336.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 1024}, None)]
op336.met_dependencies = 
    [   MemoryDep('arg594_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg595_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg596_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg597_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg598_1', c1, {c0: 8, c1: 128}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (1024, 1)
op336.sizes = ([8, 128], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg594_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg595_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg596_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg598_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op336_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg594_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg595_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg596_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg597_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg598_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf336', get_index_6, relu, None)
        return store


op337: ExternKernelSchedulerNode(ExternKernelAlloc)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf336', mode=None)]
op337.met_dependencies = [StarDep(name='arg599_1', mode=None)]
op337.outputs = [
    buf337: ExternKernelAlloc
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.node.kernel = extern_kernels.convolution


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 4096}, None)]
op338.unmet_dependencies = 
    [   MemoryDep('buf337', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf337', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf337', c0, {c0: 4096}, None)]
op338.met_dependencies = 
    [   MemoryDep('arg600_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg600_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg600_1', c1, {c0: 8, c1: 512}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (4096, 1)
op338.sizes = ([8, 2, 256], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op338_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg600_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf337', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg600_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf337', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg600_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf338', get_index_6, exp, None)
        return store


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 524288}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf332', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf332', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf338', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf338', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (524288, 1)
op339.sizes = ([8, 256, 256], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op339_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf338', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf338', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf332', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf338', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf338', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf338', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf339', get_index_8, add_2, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg601_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False)]
]
op340.node.kernel = extern_kernels.convolution


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 2097152}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 2097152}, None),
        MemoryDep('buf340', c0, {c0: 2097152}, None)]
op341.met_dependencies = 
    [   MemoryDep('arg602_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg603_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg604_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg605_1', c1, {c0: 8, c1: 1024}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf341.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op341.group.device = cuda:0
op341.group.iteration = (2097152, 1)
op341.sizes = ([8, 1024, 256], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg603_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg605_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg602_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg603_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg604_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg605_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf328', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf341', get_index_6, relu, None)
        return store


op342: ExternKernelSchedulerNode(ExternKernelAlloc)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='arg606_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelAlloc
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op342.node.kernel = extern_kernels.convolution


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 524288}, None)]
op343.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 524288}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg607_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg608_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg609_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg610_1', c1, {c0: 8, c1: 256}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (524288, 1)
op343.sizes = ([8, 256, 256], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg607_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg608_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg610_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op343_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg607_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg608_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg609_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg610_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf343', get_index_5, relu, None)
        return store


op344: ExternKernelSchedulerNode(ExternKernelAlloc)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='arg611_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelAlloc
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
]
op344.node.kernel = extern_kernels.convolution


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 1048576}, None)]
op345.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 1048576}, None)]
op345.met_dependencies = 
    [   MemoryDep('arg612_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg613_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg614_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg615_1', c1, {c0: 8, c1: 512}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (1048576, 1)
op345.sizes = ([8, 512, 256], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg612_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg613_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg614_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op345_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg612_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg613_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg614_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg615_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf345', get_index_5, relu, None)
        return store


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 2048}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf345', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf345', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (2048, 256)
op346.sizes = ([8, 256], [256])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op346_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf345', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf346', get_index_2, reduction)
        return store_reduction


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 2048}, None)]
op347.unmet_dependencies = [MemoryDep('buf346', c0, {c0: 2048}, None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (2048, 1)
op347.sizes = ([2048], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op347_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf347', get_index_1, truediv, None)
        return store


op348: ExternKernelSchedulerNode(ExternKernelAlloc)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg616_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelAlloc
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op348.node.kernel = extern_kernels.convolution


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 1024}, None)]
op349.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 1024}, None)]
op349.met_dependencies = 
    [   MemoryDep('arg617_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg618_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg619_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg620_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg621_1', c1, {c0: 8, c1: 128}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (1024, 1)
op349.sizes = ([8, 128], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg617_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg618_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg619_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg621_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op349_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg617_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg618_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg619_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg620_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg621_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf349', get_index_6, relu, None)
        return store


op350: ExternKernelSchedulerNode(ExternKernelAlloc)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op350.met_dependencies = [StarDep(name='arg622_1', mode=None)]
op350.outputs = [
    buf350: ExternKernelAlloc
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf350.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.node.kernel = extern_kernels.convolution


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 4096}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf350', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf350', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf350', c0, {c0: 4096}, None)]
op351.met_dependencies = 
    [   MemoryDep('arg623_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg623_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg623_1', c1, {c0: 8, c1: 512}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (4096, 1)
op351.sizes = ([8, 2, 256], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg623_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf350', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg623_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf350', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg623_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf351', get_index_6, exp, None)
        return store


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 524288}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf345', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf345', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf351', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf351', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (524288, 1)
op352.sizes = ([8, 256, 256], [])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf351', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf351', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf351', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf345', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf351', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf351', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf351', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf352', get_index_8, add_2, None)
        return store


op353: ExternKernelSchedulerNode(ExternKernelAlloc)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='arg624_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelAlloc
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.convolution


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 2097152}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf341', c0, {c0: 2097152}, None),
        MemoryDep('buf353', c0, {c0: 2097152}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg625_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg626_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg627_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg628_1', c1, {c0: 8, c1: 1024}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf354.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (2097152, 1)
op354.sizes = ([8, 1024, 256], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg625_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg626_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg628_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg625_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg626_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg627_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg628_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf341', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf354', get_index_6, relu, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelAlloc)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg629_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelAlloc
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False)]
]
op355.node.kernel = extern_kernels.convolution


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 524288}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 524288}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg630_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg631_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg632_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg633_1', c1, {c0: 8, c1: 256}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (524288, 1)
op356.sizes = ([8, 256, 256], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg630_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg631_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg632_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op356_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg630_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg631_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg632_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg633_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf356', get_index_5, relu, None)
        return store


op357: ExternKernelSchedulerNode(ExternKernelAlloc)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = [StarDep(name='arg634_1', mode=None)]
op357.outputs = [
    buf357: ExternKernelAlloc
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
]
op357.node.kernel = extern_kernels.convolution


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 1048576}, None)]
op358.unmet_dependencies = [MemoryDep('buf357', c0, {c0: 1048576}, None)]
op358.met_dependencies = 
    [   MemoryDep('arg635_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg636_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg637_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg638_1', c1, {c0: 8, c1: 512}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
    ]
]
op358.group.device = cuda:0
op358.group.iteration = (1048576, 1)
op358.sizes = ([8, 512, 256], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg635_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg636_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg637_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op358_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg635_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg636_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg637_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg638_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf358', get_index_5, relu, None)
        return store


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 2048}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf358', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf358', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf359.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (2048, 256)
op359.sizes = ([8, 256], [256])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op359_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf358', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf359', get_index_2, reduction)
        return store_reduction


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 2048}, None)]
op360.unmet_dependencies = [MemoryDep('buf359', c0, {c0: 2048}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (2048, 1)
op360.sizes = ([2048], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op360_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf360', get_index_1, truediv, None)
        return store


op361: ExternKernelSchedulerNode(ExternKernelAlloc)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg639_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelAlloc
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False)]
]
op361.node.kernel = extern_kernels.convolution


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 1024}, None)]
op362.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 1024}, None)]
op362.met_dependencies = 
    [   MemoryDep('arg640_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg641_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg642_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg643_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg644_1', c1, {c0: 8, c1: 128}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (1024, 1)
op362.sizes = ([8, 128], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg641_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg642_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg643_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg644_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op362_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg640_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg641_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg642_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg643_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg644_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf362', get_index_6, relu, None)
        return store


op363: ExternKernelSchedulerNode(ExternKernelAlloc)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg645_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelAlloc
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf363.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.node.kernel = extern_kernels.convolution


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 4096}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf363', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf363', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf363', c0, {c0: 4096}, None)]
op364.met_dependencies = 
    [   MemoryDep('arg646_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg646_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg646_1', c1, {c0: 8, c1: 512}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (4096, 1)
op364.sizes = ([8, 2, 256], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg646_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg646_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg646_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op364_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg646_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf363', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg646_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf363', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg646_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf364', get_index_6, exp, None)
        return store


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 524288}, None)]
op365.unmet_dependencies = 
    [   MemoryDep('buf358', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf358', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf364', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf364', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf365.users = [NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (524288, 1)
op365.sizes = ([8, 256, 256], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op365_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf364', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf364', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf364', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf358', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf364', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf364', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf364', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf365', get_index_8, add_2, None)
        return store


op366: ExternKernelSchedulerNode(ExternKernelAlloc)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op366.met_dependencies = [StarDep(name='arg647_1', mode=None)]
op366.outputs = [
    buf366: ExternKernelAlloc
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf366.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
]
op366.node.kernel = extern_kernels.convolution


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 2097152}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf366', c0, {c0: 2097152}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg648_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg649_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg650_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg651_1', c1, {c0: 8, c1: 1024}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf367.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
]
op367.group.device = cuda:0
op367.group.iteration = (2097152, 1)
op367.sizes = ([8, 1024, 256], [])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg648_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg649_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg650_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg651_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op367_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg648_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg649_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg650_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg651_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf354', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf367', get_index_6, relu, None)
        return store


op368: ExternKernelSchedulerNode(ExternKernelAlloc)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg652_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelAlloc
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False)]
]
op368.node.kernel = extern_kernels.convolution


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 524288}, None)]
op369.unmet_dependencies = [MemoryDep('buf368', c0, {c0: 524288}, None)]
op369.met_dependencies = 
    [   MemoryDep('arg653_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg654_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg655_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg656_1', c1, {c0: 8, c1: 256}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (524288, 1)
op369.sizes = ([8, 256, 256], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg654_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg655_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg656_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op369_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg653_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg654_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg655_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg656_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf369', get_index_5, relu, None)
        return store


op370: ExternKernelSchedulerNode(ExternKernelAlloc)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op370.met_dependencies = [StarDep(name='arg657_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelAlloc
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf370.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=True, is_weak=False)]
]
op370.node.kernel = extern_kernels.convolution


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 1048576}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 1048576}, None)]
op371.met_dependencies = 
    [   MemoryDep('arg658_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg659_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg660_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg661_1', c1, {c0: 8, c1: 512}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf371.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op371.group.device = cuda:0
op371.group.iteration = (1048576, 1)
op371.sizes = ([8, 512, 256], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg658_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg659_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg660_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg661_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op371_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg658_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg659_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg660_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg661_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf371', get_index_5, relu, None)
        return store


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 2048}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf371', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf371', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (2048, 256)
op372.sizes = ([8, 256], [256])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf371', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf372', get_index_2, reduction)
        return store_reduction


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 2048}, None)]
op373.unmet_dependencies = [MemoryDep('buf372', c0, {c0: 2048}, None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (2048, 1)
op373.sizes = ([2048], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op373_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf373', get_index_1, truediv, None)
        return store


op374: ExternKernelSchedulerNode(ExternKernelAlloc)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf373', mode=None)]
op374.met_dependencies = [StarDep(name='arg662_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelAlloc
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False)]
]
op374.node.kernel = extern_kernels.convolution


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 1024}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 1024}, None)]
op375.met_dependencies = 
    [   MemoryDep('arg663_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg664_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg665_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg666_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg667_1', c1, {c0: 8, c1: 128}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (1024, 1)
op375.sizes = ([8, 128], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg664_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg665_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg666_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg667_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op375_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg663_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg664_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg665_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg666_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg667_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf375', get_index_6, relu, None)
        return store


op376: ExternKernelSchedulerNode(ExternKernelAlloc)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf375', mode=None)]
op376.met_dependencies = [StarDep(name='arg668_1', mode=None)]
op376.outputs = [
    buf376: ExternKernelAlloc
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf376.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.node.kernel = extern_kernels.convolution


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 4096}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf376', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf376', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf376', c0, {c0: 4096}, None)]
op377.met_dependencies = 
    [   MemoryDep('arg669_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg669_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg669_1', c1, {c0: 8, c1: 512}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (4096, 1)
op377.sizes = ([8, 2, 256], [])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg669_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg669_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg669_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op377_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg669_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf376', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg669_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf376', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg669_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf377', get_index_6, exp, None)
        return store


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 524288}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf371', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf371', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf377', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf377', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (524288, 1)
op378.sizes = ([8, 256, 256], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op378_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf377', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf377', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf371', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf377', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf377', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf377', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf378', get_index_8, add_2, None)
        return store


op379: ExternKernelSchedulerNode(ExternKernelAlloc)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = [StarDep(name='arg670_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelAlloc
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf379.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False)]
]
op379.node.kernel = extern_kernels.convolution


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 2097152}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 2097152}, None),
        MemoryDep('buf379', c0, {c0: 2097152}, None)]
op380.met_dependencies = 
    [   MemoryDep('arg671_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg672_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg673_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg674_1', c1, {c0: 8, c1: 1024}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf380.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
    ]
]
op380.group.device = cuda:0
op380.group.iteration = (2097152, 1)
op380.sizes = ([8, 1024, 256], [])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg672_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg673_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg674_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op380_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg671_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg672_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg673_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg674_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf367', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf380', get_index_6, relu, None)
        return store


op381: ExternKernelSchedulerNode(ExternKernelAlloc)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='arg675_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelAlloc
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf381.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False)]
]
op381.node.kernel = extern_kernels.convolution


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 524288}, None)]
op382.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 524288}, None)]
op382.met_dependencies = 
    [   MemoryDep('arg676_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg677_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg678_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg679_1', c1, {c0: 8, c1: 256}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (524288, 1)
op382.sizes = ([8, 256, 256], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg676_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg677_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg678_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg679_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op382_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg676_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg677_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg678_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg679_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf382', get_index_5, relu, None)
        return store


op383: ExternKernelSchedulerNode(ExternKernelAlloc)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op383.met_dependencies = [StarDep(name='arg680_1', mode=None)]
op383.outputs = [
    buf383: ExternKernelAlloc
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf383.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False)]
]
op383.node.kernel = extern_kernels.convolution


op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 1048576}, None)]
op384.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 1048576}, None)]
op384.met_dependencies = 
    [   MemoryDep('arg681_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg682_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg683_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg684_1', c1, {c0: 8, c1: 512}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (1048576, 1)
op384.sizes = ([8, 512, 256], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg682_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg683_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg684_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op384_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg681_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg682_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg683_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg684_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf384', get_index_5, relu, None)
        return store


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 2048}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf384', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf384', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=True, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (2048, 256)
op385.sizes = ([8, 256], [256])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op385_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf384', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf385', get_index_2, reduction)
        return store_reduction


op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 2048}, None)]
op386.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 2048}, None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf386.users = [NodeUser(node=ExternKernelSchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (2048, 1)
op386.sizes = ([2048], [])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op386_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf386', get_index_1, truediv, None)
        return store


op387: ExternKernelSchedulerNode(ExternKernelAlloc)
op387.writes = [StarDep(name='buf387', mode=None)]
op387.unmet_dependencies = [StarDep(name='buf386', mode=None)]
op387.met_dependencies = [StarDep(name='arg685_1', mode=None)]
op387.outputs = [
    buf387: ExternKernelAlloc
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf387.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False)]
]
op387.node.kernel = extern_kernels.convolution


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1024}, None)]
op388.unmet_dependencies = [MemoryDep('buf387', c0, {c0: 1024}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg686_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg687_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg688_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg689_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg690_1', c1, {c0: 8, c1: 128}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1024, 1)
op388.sizes = ([8, 128], [])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg686_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg687_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg688_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg689_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg690_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op388_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg686_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg687_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg688_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg689_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg690_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf388', get_index_6, relu, None)
        return store


op389: ExternKernelSchedulerNode(ExternKernelAlloc)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op389.met_dependencies = [StarDep(name='arg691_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelAlloc
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.node.kernel = extern_kernels.convolution


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 4096}, None)]
op390.unmet_dependencies = 
    [   MemoryDep('buf389', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf389', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf389', c0, {c0: 4096}, None)]
op390.met_dependencies = 
    [   MemoryDep('arg692_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg692_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg692_1', c1, {c0: 8, c1: 512}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf390.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (4096, 1)
op390.sizes = ([8, 2, 256], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg692_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg692_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg692_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op390_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg692_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf389', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg692_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf389', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg692_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf390', get_index_6, exp, None)
        return store


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 524288}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf384', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf384', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf390', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf390', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op391.met_dependencies = []
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (524288, 1)
op391.sizes = ([8, 256, 256], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op391_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf390', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf390', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf390', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf384', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf390', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf390', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf390', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf391', get_index_8, add_2, None)
        return store


op392: ExternKernelSchedulerNode(ExternKernelAlloc)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op392.met_dependencies = [StarDep(name='arg693_1', mode=None)]
op392.outputs = [
    buf392: ExternKernelAlloc
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf392.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
]
op392.node.kernel = extern_kernels.convolution


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 2097152}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 2097152}, None),
        MemoryDep('buf392', c0, {c0: 2097152}, None)]
op393.met_dependencies = 
    [   MemoryDep('arg694_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg695_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg696_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg697_1', c1, {c0: 8, c1: 1024}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf393.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op393.group.device = cuda:0
op393.group.iteration = (2097152, 1)
op393.sizes = ([8, 1024, 256], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg694_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg695_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg696_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg697_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op393_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg694_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg695_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg696_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg697_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf380', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf393', get_index_6, relu, None)
        return store


op394: ExternKernelSchedulerNode(ExternKernelAlloc)
op394.writes = [StarDep(name='buf394', mode=None)]
op394.unmet_dependencies = [StarDep(name='buf393', mode=None)]
op394.met_dependencies = [StarDep(name='arg698_1', mode=None)]
op394.outputs = [
    buf394: ExternKernelAlloc
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf394.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False)]
]
op394.node.kernel = extern_kernels.convolution


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 524288}, None)]
op395.unmet_dependencies = [MemoryDep('buf394', c0, {c0: 524288}, None)]
op395.met_dependencies = 
    [   MemoryDep('arg699_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg700_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg701_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg702_1', c1, {c0: 8, c1: 256}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (524288, 1)
op395.sizes = ([8, 256, 256], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
arg699_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg700_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg701_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg702_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op395_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg699_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg700_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg701_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg702_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf395', get_index_5, relu, None)
        return store


op396: ExternKernelSchedulerNode(ExternKernelAlloc)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op396.met_dependencies = [StarDep(name='arg703_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelAlloc
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf396.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False)]
]
op396.node.kernel = extern_kernels.convolution


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 1048576}, None)]
op397.unmet_dependencies = [MemoryDep('buf396', c0, {c0: 1048576}, None)]
op397.met_dependencies = 
    [   MemoryDep('arg704_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg705_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg706_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg707_1', c1, {c0: 8, c1: 512}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
    ]
]
op397.group.device = cuda:0
op397.group.iteration = (1048576, 1)
op397.sizes = ([8, 512, 256], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg704_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg705_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg706_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg707_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op397_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg704_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg705_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg706_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg707_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf397', get_index_5, relu, None)
        return store


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 2048}, None)]
op398.unmet_dependencies = 
    [   MemoryDep('buf397', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf397', 131072*c0 + c1, {c0: 8, c1: 65536}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (2048, 256)
op398.sizes = ([8, 256], [256])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op398_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 131072*z0 + 256*z1 + z2 + 65536
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf397', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf398', get_index_2, reduction)
        return store_reduction


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 2048}, None)]
op399.unmet_dependencies = [MemoryDep('buf398', c0, {c0: 2048}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (2048, 1)
op399.sizes = ([2048], [])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op399_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf399', get_index_1, truediv, None)
        return store


op400: ExternKernelSchedulerNode(ExternKernelAlloc)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf399', mode=None)]
op400.met_dependencies = [StarDep(name='arg708_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelAlloc
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False)]
]
op400.node.kernel = extern_kernels.convolution


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 1024}, None)]
op401.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 1024}, None)]
op401.met_dependencies = 
    [   MemoryDep('arg709_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg710_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg711_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg712_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg713_1', c1, {c0: 8, c1: 128}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (1024, 1)
op401.sizes = ([8, 128], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg709_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg710_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg711_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg712_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg713_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op401_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg709_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg710_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg711_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg712_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg713_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf401', get_index_6, relu, None)
        return store


op402: ExternKernelSchedulerNode(ExternKernelAlloc)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf401', mode=None)]
op402.met_dependencies = [StarDep(name='arg714_1', mode=None)]
op402.outputs = [
    buf402: ExternKernelAlloc
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op402.node.kernel = extern_kernels.convolution


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 4096}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf402', 512*c0 + c2 + 256, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf402', 512*c0 + c2, {c0: 8, c1: 2, c2: 256}, None),
        MemoryDep('buf402', c0, {c0: 4096}, None)]
op403.met_dependencies = 
    [   MemoryDep('arg715_1', c1 + 256, {c0: 16, c1: 256}, None),
        MemoryDep('arg715_1', c1, {c0: 16, c1: 256}, None),
        MemoryDep('arg715_1', c1, {c0: 8, c1: 512}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
    buf403.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (4096, 1)
op403.sizes = ([8, 2, 256], [])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg715_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg715_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg715_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
class op403_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 256}
    index0 = 512*z0 + 256*z1 + z2
    index1 = 256*z1 + z2
    index2 = 512*z0 + z2
    index3 = z2
    index4 = 512*z0 + z2 + 256
    index5 = z2 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg715_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf402', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg715_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf402', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg715_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf403', get_index_6, exp, None)
        return store


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 524288}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf397', 131072*c0 + c1 + 65536, {c0: 8, c1: 65536}, None),
        MemoryDep('buf397', 131072*c0 + c1, {c0: 8, c1: 65536}, None),
        MemoryDep('buf403', 512*c0 + c1 + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf403', 512*c0 + c1, {c0: 8, c1: 256}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf404.users = [NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (524288, 1)
op404.sizes = ([8, 256, 256], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 256], stride=[512, 256, 4096, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op404_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = 512*z0 + z1
    index2 = 512*z0 + z1 + 256
    index3 = 131072*z0 + 256*z1 + z2 + 65536
    index4 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf403', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf403', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf403', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf397', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf403', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf403', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf403', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf404', get_index_8, add_2, None)
        return store


op405: ExternKernelSchedulerNode(ExternKernelAlloc)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf404', mode=None)]
op405.met_dependencies = [StarDep(name='arg716_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelAlloc
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op405.node.kernel = extern_kernels.convolution


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 2097152}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 2097152}, None),
        MemoryDep('buf405', c0, {c0: 2097152}, None)]
op406.met_dependencies = 
    [   MemoryDep('arg717_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg718_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg719_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg720_1', c1, {c0: 8, c1: 1024}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf406.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (2097152, 1)
op406.sizes = ([8, 1024, 256], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg717_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg718_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg719_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg720_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op406_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg717_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg718_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg719_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg720_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf393', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf406', get_index_6, relu, None)
        return store


op407: ExternKernelSchedulerNode(ExternKernelAlloc)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf406', mode=None)]
op407.met_dependencies = [StarDep(name='arg721_1', mode=None)]
op407.outputs = [
    buf407: ExternKernelAlloc
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=True, is_weak=False)]
]
op407.node.kernel = extern_kernels.convolution


op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 1048576}, None)]
op408.unmet_dependencies = [MemoryDep('buf407', c0, {c0: 1048576}, None)]
op408.met_dependencies = 
    [   MemoryDep('arg722_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg723_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg724_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg725_1', c1, {c0: 8, c1: 512}, None)]
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf408.users = [NodeUser(node=ExternKernelSchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (1048576, 1)
op408.sizes = ([8, 512, 256], [])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
arg722_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg723_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg724_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg725_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op408_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 131072*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg722_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg723_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg724_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg725_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf408', get_index_5, relu, None)
        return store


op409: ExternKernelSchedulerNode(ExternKernelAlloc)
op409.writes = [StarDep(name='buf409', mode=None)]
op409.unmet_dependencies = [StarDep(name='buf408', mode=None)]
op409.met_dependencies = [StarDep(name='arg726_1', mode=None)]
op409.outputs = [
    buf409: ExternKernelAlloc
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf409.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False)]
]
op409.node.kernel = extern_kernels.convolution


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 2097152}, None)]
op410.unmet_dependencies = [MemoryDep('buf409', c0, {c0: 2097152}, None)]
op410.met_dependencies = 
    [   MemoryDep('arg727_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg728_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg729_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg730_1', c1, {c0: 8, c1: 1024}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
    ]
]
op410.group.device = cuda:0
op410.group.iteration = (2097152, 1)
op410.sizes = ([8, 1024, 256], [])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
arg727_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg728_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg729_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg730_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
class op410_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf409', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg727_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg728_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg729_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg730_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf410', get_index_5, relu, None)
        return store


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 4096}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf410', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf410', 262144*c0 + c1, {c0: 8, c1: 131072}, None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf411.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (4096, 256)
op411.sizes = ([8, 512], [256])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
class op411_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = 262144*z0 + 256*z1 + z2 + 131072
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf410', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf411', get_index_2, reduction)
        return store_reduction


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 4096}, None)]
op412.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 4096}, None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf412.users = [NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (4096, 1)
op412.sizes = ([4096], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
class op412_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf412', get_index_1, truediv, None)
        return store


op413: ExternKernelSchedulerNode(ExternKernelAlloc)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf412', mode=None)]
op413.met_dependencies = [StarDep(name='arg731_1', mode=None)]
op413.outputs = [
    buf413: ExternKernelAlloc
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf413.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False)]
]
op413.node.kernel = extern_kernels.convolution


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 2048}, None)]
op414.unmet_dependencies = [MemoryDep('buf413', c0, {c0: 2048}, None)]
op414.met_dependencies = 
    [   MemoryDep('arg732_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg733_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg734_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg735_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg736_1', c1, {c0: 8, c1: 256}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (2048, 1)
op414.sizes = ([8, 256], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg732_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg733_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg734_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg735_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg736_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op414_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg732_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg733_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg734_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg735_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg736_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf414', get_index_6, relu, None)
        return store


op415: ExternKernelSchedulerNode(ExternKernelAlloc)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf414', mode=None)]
op415.met_dependencies = [StarDep(name='arg737_1', mode=None)]
op415.outputs = [
    buf415: ExternKernelAlloc
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.node.kernel = extern_kernels.convolution


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 8192}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf415', 1024*c0 + c2 + 512, {c0: 8, c1: 2, c2: 512}, None),
        MemoryDep('buf415', 1024*c0 + c2, {c0: 8, c1: 2, c2: 512}, None),
        MemoryDep('buf415', c0, {c0: 8192}, None)]
op416.met_dependencies = 
    [   MemoryDep('arg738_1', c1 + 512, {c0: 16, c1: 512}, None),
        MemoryDep('arg738_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg738_1', c1, {c0: 8, c1: 1024}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
    buf416.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (8192, 1)
op416.sizes = ([8, 2, 512], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg738_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg738_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg738_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
class op416_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 512}
    index0 = 1024*z0 + 512*z1 + z2
    index1 = 512*z1 + z2
    index2 = 1024*z0 + z2
    index3 = z2
    index4 = 1024*z0 + z2 + 512
    index5 = z2 + 512
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg738_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf415', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg738_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf415', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg738_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf416', get_index_6, exp, None)
        return store


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 1048576}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf410', 262144*c0 + c1 + 131072, {c0: 8, c1: 131072}, None),
        MemoryDep('buf410', 262144*c0 + c1, {c0: 8, c1: 131072}, None),
        MemoryDep('buf416', 1024*c0 + c1 + 512, {c0: 8, c1: 512}, None),
        MemoryDep('buf416', 1024*c0 + c1, {c0: 8, c1: 512}, None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (1048576, 1)
op417.sizes = ([8, 512, 256], [])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op417_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 262144*z0 + 256*z1 + z2
    index1 = 1024*z0 + z1
    index2 = 1024*z0 + z1 + 512
    index3 = 262144*z0 + 256*z1 + z2 + 131072
    index4 = 131072*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf416', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf416', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf416', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf410', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf416', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf416', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf416', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf417', get_index_8, add_2, None)
        return store


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 262144}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf417', 32*c0 + 2*c1 + 1, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 + 15, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 + 16, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 + 17, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 - 1, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 - 15, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 - 16, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1 - 17, {c0: 32768, c1: 8}, None),
        MemoryDep('buf417', 32*c0 + 2*c1, {c0: 32768, c1: 8}, None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (262144, 1)
op418.sizes = ([4096, 8, 8], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op418_loop_body:
    var_ranges = {z0: 4096, z1: 8, z2: 8}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 256*z0 + 32*z1 + 2*z2 - 17
    index3 = 2*z2
    index4 = 256*z0 + 32*z1 + 2*z2 - 16
    index5 = 2*z2 + 1
    index6 = 256*z0 + 32*z1 + 2*z2 - 15
    index7 = 2*z1
    index8 = 256*z0 + 32*z1 + 2*z2 - 1
    index9 = 256*z0 + 32*z1 + 2*z2
    index10 = 256*z0 + 32*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 256*z0 + 32*z1 + 2*z2 + 15
    index13 = 256*z0 + 32*z1 + 2*z2 + 16
    index14 = 256*z0 + 32*z1 + 2*z2 + 17
    index15 = 4*z1*z2 - 2*z1*Min(17, 2*z2 + 2) - 2*z1 - 2*z2*Min(17, 2*z1 + 2) - 2*z2 + Min(17, 2*z1 + 2)*Min(17, 2*z2 + 2) + Min(17, 2*z1 + 2) + Min(17, 2*z2 + 2) + 1
    index16 = 64*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(16, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(16, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(16, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(16, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(16, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(16, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(16, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(16, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(16, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(16, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(16, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(16, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(16, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(16, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(16, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(16, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf418', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf417', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf417', get_index)
        return load


op419: ExternKernelSchedulerNode(ExternKernelAlloc)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op419.met_dependencies = [StarDep(name='arg739_1', mode=None)]
op419.outputs = [
    buf419: ExternKernelAlloc
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf419.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False)]
]
op419.node.kernel = extern_kernels.convolution


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 524288}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf406', 32*c0 + 2*c1 + 1, {c0: 65536, c1: 8}, None),
        MemoryDep('buf406', 32*c0 + 2*c1 + 16, {c0: 65536, c1: 8}, None),
        MemoryDep('buf406', 32*c0 + 2*c1 + 17, {c0: 65536, c1: 8}, None),
        MemoryDep('buf406', 32*c0 + 2*c1, {c0: 65536, c1: 8}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
    buf420.users = [NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (524288, 1)
op420.sizes = ([65536, 8], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 256, 16, 1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
class op420_loop_body:
    var_ranges = {z0: 65536, z1: 8}
    index0 = 32*z0 + 2*z1
    index1 = 32*z0 + 2*z1 + 1
    index2 = 32*z0 + 2*z1 + 16
    index3 = 32*z0 + 2*z1 + 17
    index4 = 8*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf406', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf406', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf406', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf420', get_index_4, mul, None)
        return store


op421: ExternKernelSchedulerNode(ExternKernelAlloc)
op421.writes = [StarDep(name='buf421', mode=None)]
op421.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op421.met_dependencies = [StarDep(name='arg744_1', mode=None)]
op421.outputs = [
    buf421: ExternKernelAlloc
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf421.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False)]
]
op421.node.kernel = extern_kernels.convolution


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 1048576}, None)]
op422.unmet_dependencies = 
    [   MemoryDep('buf419', c0, {c0: 1048576}, None),
        MemoryDep('buf421', c0, {c0: 1048576}, None)]
op422.met_dependencies = 
    [   MemoryDep('arg740_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg741_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg742_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg743_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg745_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg746_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg747_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg748_1', c1, {c0: 8, c1: 2048}, None)]
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (1048576, 1)
op422.sizes = ([8, 2048, 64], [])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
arg740_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg741_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg742_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg743_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
arg745_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg746_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg747_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg748_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
class op422_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 64}
    index0 = 131072*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg740_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg741_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg742_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg743_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf421', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg745_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg746_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg747_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg748_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf422', get_index_10, add_4, None)
        return store


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 1048576}, None)]
op423.unmet_dependencies = [MemoryDep('buf422', c0, {c0: 1048576}, None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf423.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
    ]
]
op423.group.device = cuda:0
op423.group.iteration = (1048576, 1)
op423.sizes = ([1048576], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
class op423_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf423', get_index_1, relu, None)
        return store


op424: ExternKernelSchedulerNode(ExternKernelAlloc)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg749_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelAlloc
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf424.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False)]
]
op424.node.kernel = extern_kernels.convolution


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 262144}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 262144}, None)]
op425.met_dependencies = 
    [   MemoryDep('arg750_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg751_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg752_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg753_1', c1, {c0: 8, c1: 512}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (262144, 1)
op425.sizes = ([8, 512, 64], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
arg750_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg751_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg752_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg753_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op425_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 32768*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg750_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg751_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg752_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg753_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf425', get_index_5, relu, None)
        return store


op426: ExternKernelSchedulerNode(ExternKernelAlloc)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf425', mode=None)]
op426.met_dependencies = [StarDep(name='arg754_1', mode=None)]
op426.outputs = [
    buf426: ExternKernelAlloc
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
    buf426.users = [NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False)]
]
op426.node.kernel = extern_kernels.convolution


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 524288}, None)]
op427.unmet_dependencies = [MemoryDep('buf426', c0, {c0: 524288}, None)]
op427.met_dependencies = 
    [   MemoryDep('arg755_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg756_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg757_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg758_1', c1, {c0: 8, c1: 1024}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
    buf427.users = [
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
    ]
]
op427.group.device = cuda:0
op427.group.iteration = (524288, 1)
op427.sizes = ([8, 1024, 64], [])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
arg755_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg756_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg757_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg758_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
class op427_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 64}
    index0 = 65536*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf426', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg755_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg756_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg757_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg758_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf427', get_index_5, relu, None)
        return store


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 4096}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf427', 65536*c0 + c1 + 32768, {c0: 8, c1: 32768}, None),
        MemoryDep('buf427', 65536*c0 + c1, {c0: 8, c1: 32768}, None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf428.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=True, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (4096, 64)
op428.sizes = ([8, 512], [64])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
class op428_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 65536*z0 + 64*z1 + z2
    index1 = 65536*z0 + 64*z1 + z2 + 32768
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf427', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf428', get_index_2, reduction)
        return store_reduction


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 4096}, None)]
op429.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 4096}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (4096, 1)
op429.sizes = ([4096], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
class op429_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf429', get_index_1, truediv, None)
        return store


op430: ExternKernelSchedulerNode(ExternKernelAlloc)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op430.met_dependencies = [StarDep(name='arg759_1', mode=None)]
op430.outputs = [
    buf430: ExternKernelAlloc
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf430.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False)]
]
op430.node.kernel = extern_kernels.convolution


op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 2048}, None)]
op431.unmet_dependencies = [MemoryDep('buf430', c0, {c0: 2048}, None)]
op431.met_dependencies = 
    [   MemoryDep('arg760_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg761_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg762_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg763_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg764_1', c1, {c0: 8, c1: 256}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf431.users = [NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op431.group.device = cuda:0
op431.group.iteration = (2048, 1)
op431.sizes = ([8, 256], [])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg760_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg761_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg762_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg763_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg764_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op431_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg760_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg761_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg762_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg763_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg764_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf431', get_index_6, relu, None)
        return store


op432: ExternKernelSchedulerNode(ExternKernelAlloc)
op432.writes = [StarDep(name='buf432', mode=None)]
op432.unmet_dependencies = [StarDep(name='buf431', mode=None)]
op432.met_dependencies = [StarDep(name='arg765_1', mode=None)]
op432.outputs = [
    buf432: ExternKernelAlloc
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.node.kernel = extern_kernels.convolution


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 8192}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf432', 1024*c0 + c2 + 512, {c0: 8, c1: 2, c2: 512}, None),
        MemoryDep('buf432', 1024*c0 + c2, {c0: 8, c1: 2, c2: 512}, None),
        MemoryDep('buf432', c0, {c0: 8192}, None)]
op433.met_dependencies = 
    [   MemoryDep('arg766_1', c1 + 512, {c0: 16, c1: 512}, None),
        MemoryDep('arg766_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg766_1', c1, {c0: 8, c1: 1024}, None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (8192, 1)
op433.sizes = ([8, 2, 512], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg766_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg766_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg766_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
class op433_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 512}
    index0 = 1024*z0 + 512*z1 + z2
    index1 = 512*z1 + z2
    index2 = 1024*z0 + z2
    index3 = z2
    index4 = 1024*z0 + z2 + 512
    index5 = z2 + 512
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg766_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf432', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg766_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf432', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg766_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf433', get_index_6, exp, None)
        return store


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 262144}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf427', 65536*c0 + c1 + 32768, {c0: 8, c1: 32768}, None),
        MemoryDep('buf427', 65536*c0 + c1, {c0: 8, c1: 32768}, None),
        MemoryDep('buf433', 1024*c0 + c1 + 512, {c0: 8, c1: 512}, None),
        MemoryDep('buf433', 1024*c0 + c1, {c0: 8, c1: 512}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (262144, 1)
op434.sizes = ([8, 512, 64], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op434_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 65536*z0 + 64*z1 + z2
    index1 = 1024*z0 + z1
    index2 = 1024*z0 + z1 + 512
    index3 = 65536*z0 + 64*z1 + z2 + 32768
    index4 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf433', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf433', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf433', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf427', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf433', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf433', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf433', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf434', get_index_8, add_2, None)
        return store


op435: ExternKernelSchedulerNode(ExternKernelAlloc)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf434', mode=None)]
op435.met_dependencies = [StarDep(name='arg767_1', mode=None)]
op435.outputs = [
    buf435: ExternKernelAlloc
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf435.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False)]
]
op435.node.kernel = extern_kernels.convolution


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 1048576}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf423', c0, {c0: 1048576}, None),
        MemoryDep('buf435', c0, {c0: 1048576}, None)]
op436.met_dependencies = 
    [   MemoryDep('arg768_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg769_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg770_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg771_1', c1, {c0: 8, c1: 2048}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf436.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
    ]
]
op436.group.device = cuda:0
op436.group.iteration = (1048576, 1)
op436.sizes = ([8, 2048, 64], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
arg768_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg769_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg770_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg771_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
class op436_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 64}
    index0 = 131072*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg768_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg769_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg770_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg771_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf423', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf436', get_index_6, relu, None)
        return store


op437: ExternKernelSchedulerNode(ExternKernelAlloc)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op437.met_dependencies = [StarDep(name='arg772_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelAlloc
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
]
op437.node.kernel = extern_kernels.convolution


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 262144}, None)]
op438.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 262144}, None)]
op438.met_dependencies = 
    [   MemoryDep('arg773_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg774_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg775_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg776_1', c1, {c0: 8, c1: 512}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (262144, 1)
op438.sizes = ([8, 512, 64], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
arg773_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg774_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg775_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg776_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op438_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 32768*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg773_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg774_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg775_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg776_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf438', get_index_5, relu, None)
        return store


op439: ExternKernelSchedulerNode(ExternKernelAlloc)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='arg777_1', mode=None)]
op439.outputs = [
    buf439: ExternKernelAlloc
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
    buf439.users = [NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False)]
]
op439.node.kernel = extern_kernels.convolution


op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 524288}, None)]
op440.unmet_dependencies = [MemoryDep('buf439', c0, {c0: 524288}, None)]
op440.met_dependencies = 
    [   MemoryDep('arg778_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg779_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg780_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg781_1', c1, {c0: 8, c1: 1024}, None)]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
]
op440.group.device = cuda:0
op440.group.iteration = (524288, 1)
op440.sizes = ([8, 1024, 64], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
arg778_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg779_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg780_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg781_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
class op440_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 64}
    index0 = 65536*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg778_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg779_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg780_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg781_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf440', get_index_5, relu, None)
        return store


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 4096}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf440', 65536*c0 + c1 + 32768, {c0: 8, c1: 32768}, None),
        MemoryDep('buf440', 65536*c0 + c1, {c0: 8, c1: 32768}, None)]
op441.met_dependencies = []
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf441.users = [NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (4096, 64)
op441.sizes = ([8, 512], [64])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 65536*z0 + 64*z1 + z2
    index1 = 65536*z0 + 64*z1 + z2 + 32768
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf440', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf441', get_index_2, reduction)
        return store_reduction


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 4096}, None)]
op442.unmet_dependencies = [MemoryDep('buf441', c0, {c0: 4096}, None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf442.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (4096, 1)
op442.sizes = ([4096], [])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
class op442_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf442', get_index_1, truediv, None)
        return store


op443: ExternKernelSchedulerNode(ExternKernelAlloc)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf442', mode=None)]
op443.met_dependencies = [StarDep(name='arg782_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelAlloc
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op443.node.kernel = extern_kernels.convolution


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 2048}, None)]
op444.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 2048}, None)]
op444.met_dependencies = 
    [   MemoryDep('arg783_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg784_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg785_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg786_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg787_1', c1, {c0: 8, c1: 256}, None)]
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (2048, 1)
op444.sizes = ([8, 256], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg783_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg784_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg785_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg786_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg787_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op444_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg783_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg784_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg785_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg786_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg787_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf444', get_index_6, relu, None)
        return store


op445: ExternKernelSchedulerNode(ExternKernelAlloc)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf444', mode=None)]
op445.met_dependencies = [StarDep(name='arg788_1', mode=None)]
op445.outputs = [
    buf445: ExternKernelAlloc
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
    buf445.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.node.kernel = extern_kernels.convolution


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 8192}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf445', 1024*c0 + c2 + 512, {c0: 8, c1: 2, c2: 512}, None),
        MemoryDep('buf445', 1024*c0 + c2, {c0: 8, c1: 2, c2: 512}, None),
        MemoryDep('buf445', c0, {c0: 8192}, None)]
op446.met_dependencies = 
    [   MemoryDep('arg789_1', c1 + 512, {c0: 16, c1: 512}, None),
        MemoryDep('arg789_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg789_1', c1, {c0: 8, c1: 1024}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (8192, 1)
op446.sizes = ([8, 2, 512], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg789_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg789_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
arg789_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
class op446_loop_body:
    var_ranges = {z0: 8, z1: 2, z2: 512}
    index0 = 1024*z0 + 512*z1 + z2
    index1 = 512*z1 + z2
    index2 = 1024*z0 + z2
    index3 = z2
    index4 = 1024*z0 + z2 + 512
    index5 = z2 + 512
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg789_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf445', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg789_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf445', get_index_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg789_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        maximum = ops.maximum(add_1, add_2)
        sub = ops.sub(add, maximum)
        exp = ops.exp(sub)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf446', get_index_6, exp, None)
        return store


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 262144}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf440', 65536*c0 + c1 + 32768, {c0: 8, c1: 32768}, None),
        MemoryDep('buf440', 65536*c0 + c1, {c0: 8, c1: 32768}, None),
        MemoryDep('buf446', 1024*c0 + c1 + 512, {c0: 8, c1: 512}, None),
        MemoryDep('buf446', 1024*c0 + c1, {c0: 8, c1: 512}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (262144, 1)
op447.sizes = ([8, 512, 64], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 2, 1, 512], stride=[1024, 512, 8192, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 64, 8, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op447_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 65536*z0 + 64*z1 + z2
    index1 = 1024*z0 + z1
    index2 = 1024*z0 + z1 + 512
    index3 = 65536*z0 + 64*z1 + z2 + 32768
    index4 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf446', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf446', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf446', get_index_3)
        add = ops.add(load_2, load_3)
        truediv = ops.truediv(load_1, add)
        mul = ops.mul(load, truediv)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf440', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf446', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf446', get_index_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf446', get_index_7)
        add_1 = ops.add(load_6, load_7)
        truediv_1 = ops.truediv(load_5, add_1)
        mul_1 = ops.mul(load_4, truediv_1)
        add_2 = ops.add(mul, mul_1)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf447', get_index_8, add_2, None)
        return store


op448: ExternKernelSchedulerNode(ExternKernelAlloc)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg790_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelAlloc
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
    buf448.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.node.kernel = extern_kernels.convolution


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 16384}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf436', c0, {c0: 1048576}, None),
        MemoryDep('buf448', c0, {c0: 1048576}, None)]
op449.met_dependencies = 
    [   MemoryDep('arg791_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg792_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg793_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg794_1', c1, {c0: 8, c1: 2048}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=True, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (16384, 64)
op449.sizes = ([8, 2048], [64])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
arg791_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg792_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg793_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg794_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 64, 8, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op449_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 64}
    index0 = 131072*z0 + 64*z1 + z2
    index1 = z1
    index2 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg791_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg792_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg793_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg794_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf436', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf449', get_index_6, reduction)
        return store_reduction


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 16384}, None)]
op450.unmet_dependencies = [MemoryDep('buf449', c0, {c0: 16384}, None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (16384, 1)
op450.sizes = ([16384], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op450_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf450', get_index_1, truediv, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf450', mode=None)]
op451.met_dependencies = [StarDep(name='arg795_1', mode=None), StarDep(name='arg796_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf451.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op451.node.kernel = extern_kernels.addmm



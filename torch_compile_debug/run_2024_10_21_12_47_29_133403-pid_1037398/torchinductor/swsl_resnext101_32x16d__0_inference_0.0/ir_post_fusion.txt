op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 147*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 49}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 9408}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 1, 21, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (9408, 1)
op1.sizes = ([64, 3, 49], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 1, 21, 3])
class op1_loop_body:
    var_ranges = {z0: 64, z1: 3, z2: 49}
    index0 = 147*z0 + 49*z1 + z2
    index1 = 147*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 6422528}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 6422528}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (6422528, 1)
op3.sizes = ([100352, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1605632}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 64, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 7104, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 7168, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 7232, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 64, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 7104, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 7168, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 7232, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2, {c0: 448, c1: 56, c2: 64}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (1605632, 1)
op4.sizes = ([8, 56, 56, 64], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 56, z3: 64}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 7232
    index3 = 2*z2
    index4 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 7168
    index5 = 2*z2 + 1
    index6 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 7104
    index7 = 2*z1
    index8 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 64
    index9 = 802816*z0 + 14336*z1 + 128*z2 + z3
    index10 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 64
    index11 = 2*z1 + 1
    index12 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 7104
    index13 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 7168
    index14 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 7232
    index15 = 200704*z0 + 3584*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(112, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(112, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(112, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(112, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(112, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(112, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(112, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(112, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(112, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(112, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(112, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(112, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(112, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(112, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(112, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(112, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf4', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf3', get_index)
        return load


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 12845056}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 12845056}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg7_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg8_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg9_1', c1, {c0: 25088, c1: 512}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (12845056, 1)
op6.sizes = ([25088, 512], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
class op6_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 144*c0 + c1 + 16*c2, {c0: 512, c1: 16, c2: 9}, None)]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 73728}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 1, 48, 16])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (73728, 1)
op7.sizes = ([512, 16, 9], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 9, 3, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 1, 48, 16])
class op7_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 12845056}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 12845056}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg13_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg14_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg15_1', c1, {c0: 25088, c1: 512}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (12845056, 1)
op9.sizes = ([25088, 512], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
class op9_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf9', get_index_5, relu, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: ExternKernelSchedulerNode(ExternKernelAlloc)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op11.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelAlloc
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.node.kernel = extern_kernels.convolution


op12_op13: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op12_op13.writes = 
    [   MemoryDep('buf12', c0, {c0: 6422528}, None),
        MemoryDep('buf13', c0, {c0: 6422528}, None)]
op12_op13.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 6422528}, None),
        MemoryDep('buf11', c0, {c0: 6422528}, None)]
op12_op13.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg20_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg22_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 256}, None)]
op12_op13.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op12_op13.snodes[0] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 6422528}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 6422528}, None),
        MemoryDep('buf11', c0, {c0: 6422528}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg20_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg22_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 256}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (6422528, 1)
op12.sizes = ([25088, 256], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op12_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf11', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg22_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg23_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg24_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg25_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf12', get_index_10, add_4, None)
        return store
op12_op13.snodes[1] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 6422528}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 6422528}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (6422528, 1)
op13.sizes = ([6422528], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op13_loop_body:
    var_ranges = {z0: 6422528}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf13', get_index_1, relu, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 12845056}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 12845056}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg28_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg29_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg30_1', c1, {c0: 25088, c1: 512}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (12845056, 1)
op15.sizes = ([25088, 512], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
class op15_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf15', get_index_5, relu, None)
        return store


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', 144*c0 + c1 + 16*c2, {c0: 512, c1: 16, c2: 9}, None)]
op16.unmet_dependencies = []
op16.met_dependencies = [MemoryDep('arg31_1', c0, {c0: 73728}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 1, 48, 16])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (73728, 1)
op16.sizes = ([512, 16, 9], [])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 9, 3, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 1, 48, 16])
class op16_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg31_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf16', get_index_1, load, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf15', mode=None), StarDep(name='buf16', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 12845056}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 12845056}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 512}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (12845056, 1)
op18.sizes = ([25088, 512], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
class op18_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf18', get_index_5, relu, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 6422528}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6422528}, None),
        MemoryDep('buf19', c0, {c0: 6422528}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 256}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (6422528, 1)
op20.sizes = ([25088, 256], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op20_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf13', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf20', get_index_6, relu, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 12845056}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 12845056}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 512}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (12845056, 1)
op22.sizes = ([25088, 512], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
class op22_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, relu, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', 144*c0 + c1 + 16*c2, {c0: 512, c1: 16, c2: 9}, None)]
op23.unmet_dependencies = []
op23.met_dependencies = [MemoryDep('arg46_1', c0, {c0: 73728}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 1, 48, 16])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (73728, 1)
op23.sizes = ([512, 16, 9], [])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 9, 3, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[512, 16, 3, 3], stride=[144, 1, 48, 16])
class op23_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg46_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf23', get_index_1, load, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None), StarDep(name='buf23', mode=None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 12845056}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 12845056}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 512}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 512}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (12845056, 1)
op25.sizes = ([25088, 512], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 56, 56], stride=[1605632, 1, 28672, 512])
class op25_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, relu, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 6422528}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 6422528}, None),
        MemoryDep('buf26', c0, {c0: 6422528}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 256}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf27.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (6422528, 1)
op27.sizes = ([25088, 256], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op27_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf20', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf27', get_index_6, relu, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 56, 56], stride=[3211264, 1, 57344, 1024])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 25690112}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 25690112}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 25088, c1: 1024}, None),
        MemoryDep('arg58_1', c1, {c0: 25088, c1: 1024}, None),
        MemoryDep('arg59_1', c1, {c0: 25088, c1: 1024}, None),
        MemoryDep('arg60_1', c1, {c0: 25088, c1: 1024}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 56, 56], stride=[3211264, 1, 57344, 1024])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (25690112, 1)
op29.sizes = ([25088, 1024], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 56, 56], stride=[3211264, 1, 57344, 1024])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 56, 56], stride=[3211264, 1, 57344, 1024])
class op29_loop_body:
    var_ranges = {z0: 25088, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf29', get_index_5, relu, None)
        return store


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', 288*c0 + c1 + 32*c2, {c0: 1024, c1: 32, c2: 9}, None)]
op30.unmet_dependencies = []
op30.met_dependencies = [MemoryDep('arg61_1', c0, {c0: 294912}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (294912, 1)
op30.sizes = ([1024, 32, 9], [])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 9, 3, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
class op30_loop_body:
    var_ranges = {z0: 1024, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg61_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf30', get_index_1, load, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None), StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 6422528}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 6422528}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg63_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg64_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg65_1', c1, {c0: 6272, c1: 1024}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (6422528, 1)
op32.sizes = ([6272, 1024], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op32_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, relu, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.convolution


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op34.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op35_op36.writes = 
    [   MemoryDep('buf35', c0, {c0: 3211264}, None),
        MemoryDep('buf36', c0, {c0: 3211264}, None)]
op35_op36.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 3211264}, None),
        MemoryDep('buf34', c0, {c0: 3211264}, None)]
op35_op36.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg68_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg69_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg70_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg74_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 6272, c1: 512}, None)]
op35_op36.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op35_op36.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 3211264}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 3211264}, None),
        MemoryDep('buf34', c0, {c0: 3211264}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg68_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg69_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg70_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg74_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 6272, c1: 512}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (3211264, 1)
op35.sizes = ([6272, 512], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op35_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf34', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg72_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg73_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg74_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg75_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf35', get_index_10, add_4, None)
        return store
op35_op36.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 3211264}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 3211264}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (3211264, 1)
op36.sizes = ([3211264], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op36_loop_body:
    var_ranges = {z0: 3211264}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf36', get_index_1, relu, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 6422528}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 6422528}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg78_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg79_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg80_1', c1, {c0: 6272, c1: 1024}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (6422528, 1)
op38.sizes = ([6272, 1024], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op38_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, relu, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', 288*c0 + c1 + 32*c2, {c0: 1024, c1: 32, c2: 9}, None)]
op39.unmet_dependencies = []
op39.met_dependencies = [MemoryDep('arg81_1', c0, {c0: 294912}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (294912, 1)
op39.sizes = ([1024, 32, 9], [])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 9, 3, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
class op39_loop_body:
    var_ranges = {z0: 1024, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg81_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf38', mode=None), StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 6422528}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 6422528}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg83_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg84_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 1024}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (6422528, 1)
op41.sizes = ([6272, 1024], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op41_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf41', get_index_5, relu, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 3211264}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 3211264}, None),
        MemoryDep('buf42', c0, {c0: 3211264}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg88_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg89_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg90_1', c1, {c0: 6272, c1: 512}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (3211264, 1)
op43.sizes = ([6272, 512], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op43_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf36', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf43', get_index_6, relu, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 6422528}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 6422528}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 1024}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (6422528, 1)
op45.sizes = ([6272, 1024], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op45_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf45', get_index_5, relu, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', 288*c0 + c1 + 32*c2, {c0: 1024, c1: 32, c2: 9}, None)]
op46.unmet_dependencies = []
op46.met_dependencies = [MemoryDep('arg96_1', c0, {c0: 294912}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (294912, 1)
op46.sizes = ([1024, 32, 9], [])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 9, 3, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
class op46_loop_body:
    var_ranges = {z0: 1024, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf46', get_index_1, load, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf45', mode=None), StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 6422528}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 6422528}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg97_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg98_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 6272, c1: 1024}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (6422528, 1)
op48.sizes = ([6272, 1024], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op48_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf48', get_index_5, relu, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.convolution


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 3211264}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 3211264}, None),
        MemoryDep('buf49', c0, {c0: 3211264}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg103_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg104_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg105_1', c1, {c0: 6272, c1: 512}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (3211264, 1)
op50.sizes = ([6272, 512], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op50_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf43', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf50', get_index_6, relu, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.convolution


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 6422528}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 6422528}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg108_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg109_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg110_1', c1, {c0: 6272, c1: 1024}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (6422528, 1)
op52.sizes = ([6272, 1024], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op52_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf52', get_index_5, relu, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', 288*c0 + c1 + 32*c2, {c0: 1024, c1: 32, c2: 9}, None)]
op53.unmet_dependencies = []
op53.met_dependencies = [MemoryDep('arg111_1', c0, {c0: 294912}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (294912, 1)
op53.sizes = ([1024, 32, 9], [])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 9, 3, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[1024, 32, 3, 3], stride=[288, 1, 96, 32])
class op53_loop_body:
    var_ranges = {z0: 1024, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg111_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf53', get_index_1, load, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf52', mode=None), StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 6422528}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 6422528}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg113_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg114_1', c1, {c0: 6272, c1: 1024}, None),
        MemoryDep('arg115_1', c1, {c0: 6272, c1: 1024}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (6422528, 1)
op55.sizes = ([6272, 1024], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 28, 28], stride=[802816, 1, 28672, 1024])
class op55_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf55', get_index_5, relu, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 3211264}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 3211264}, None),
        MemoryDep('buf56', c0, {c0: 3211264}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg118_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg119_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg120_1', c1, {c0: 6272, c1: 512}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (3211264, 1)
op57.sizes = ([6272, 512], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op57_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf50', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf57', get_index_6, relu, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelAlloc)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelAlloc
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 28, 28], stride=[1605632, 1, 57344, 2048])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.node.kernel = extern_kernels.convolution


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 12845056}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 12845056}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 6272, c1: 2048}, None),
        MemoryDep('arg123_1', c1, {c0: 6272, c1: 2048}, None),
        MemoryDep('arg124_1', c1, {c0: 6272, c1: 2048}, None),
        MemoryDep('arg125_1', c1, {c0: 6272, c1: 2048}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 28, 28], stride=[1605632, 1, 57344, 2048])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (12845056, 1)
op59.sizes = ([6272, 2048], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 28, 28], stride=[1605632, 1, 57344, 2048])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 28, 28], stride=[1605632, 1, 57344, 2048])
class op59_loop_body:
    var_ranges = {z0: 6272, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf59', get_index_5, relu, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op60.unmet_dependencies = []
op60.met_dependencies = [MemoryDep('arg126_1', c0, {c0: 1179648}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1179648, 1)
op60.sizes = ([2048, 64, 9], [])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op60_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg126_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf60', get_index_1, load, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 3211264}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 3211264}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg130_1', c1, {c0: 1568, c1: 2048}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (3211264, 1)
op62.sizes = ([1568, 2048], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op62_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, relu, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64: ExternKernelSchedulerNode(ExternKernelAlloc)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op64.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelAlloc
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.node.kernel = extern_kernels.convolution


op65_op66: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op65_op66.writes = 
    [   MemoryDep('buf65', c0, {c0: 1605632}, None),
        MemoryDep('buf66', c0, {c0: 1605632}, None)]
op65_op66.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 1605632}, None),
        MemoryDep('buf64', c0, {c0: 1605632}, None)]
op65_op66.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg138_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg139_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 1024}, None)]
op65_op66.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op65_op66.snodes[0] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1605632}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 1605632}, None),
        MemoryDep('buf64', c0, {c0: 1605632}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg138_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg139_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 1024}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1605632, 1)
op65.sizes = ([1568, 1024], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op65_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf64', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg137_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg138_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg139_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg140_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf65', get_index_10, add_4, None)
        return store
op65_op66.snodes[1] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 1605632}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 1605632}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (1605632, 1)
op66.sizes = ([1605632], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op66_loop_body:
    var_ranges = {z0: 1605632}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf66', get_index_1, relu, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 3211264}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 3211264}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 2048}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (3211264, 1)
op68.sizes = ([1568, 2048], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op68_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, relu, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op69.unmet_dependencies = []
op69.met_dependencies = [MemoryDep('arg146_1', c0, {c0: 1179648}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (1179648, 1)
op69.sizes = ([2048, 64, 9], [])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op69_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg146_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf69', get_index_1, load, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None), StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 3211264}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 3211264}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg148_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg149_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg150_1', c1, {c0: 1568, c1: 2048}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (3211264, 1)
op71.sizes = ([1568, 2048], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op71_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, relu, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1605632}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 1605632}, None),
        MemoryDep('buf72', c0, {c0: 1605632}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg153_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg154_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 1024}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf73.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (1605632, 1)
op73.sizes = ([1568, 1024], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op73_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf66', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf73', get_index_6, relu, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 3211264}, None)]
op75.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 3211264}, None)]
op75.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg159_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 2048}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (3211264, 1)
op75.sizes = ([1568, 2048], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op75_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, relu, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op76.unmet_dependencies = []
op76.met_dependencies = [MemoryDep('arg161_1', c0, {c0: 1179648}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (1179648, 1)
op76.sizes = ([2048, 64, 9], [])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op76_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf75', mode=None), StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 3211264}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 3211264}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 2048}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (3211264, 1)
op78.sizes = ([1568, 2048], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op78_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf78', get_index_5, relu, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.node.kernel = extern_kernels.convolution


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 1605632}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1605632}, None),
        MemoryDep('buf79', c0, {c0: 1605632}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg168_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg169_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg170_1', c1, {c0: 1568, c1: 1024}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf80.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (1605632, 1)
op80.sizes = ([1568, 1024], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op80_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf73', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf80', get_index_6, relu, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelAlloc)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelAlloc
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op81.node.kernel = extern_kernels.convolution


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 3211264}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 3211264}, None)]
op82.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg175_1', c1, {c0: 1568, c1: 2048}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (3211264, 1)
op82.sizes = ([1568, 2048], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op82_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf82', get_index_5, relu, None)
        return store


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op83.unmet_dependencies = []
op83.met_dependencies = [MemoryDep('arg176_1', c0, {c0: 1179648}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (1179648, 1)
op83.sizes = ([2048, 64, 9], [])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op83_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg176_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf82', mode=None), StarDep(name='buf83', mode=None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 3211264}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 3211264}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg179_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg180_1', c1, {c0: 1568, c1: 2048}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (3211264, 1)
op85.sizes = ([1568, 2048], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op85_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, relu, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1605632}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf80', c0, {c0: 1605632}, None),
        MemoryDep('buf86', c0, {c0: 1605632}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg185_1', c1, {c0: 1568, c1: 1024}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (1605632, 1)
op87.sizes = ([1568, 1024], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op87_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf80', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf87', get_index_6, relu, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.convolution


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 3211264}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 3211264}, None)]
op89.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg190_1', c1, {c0: 1568, c1: 2048}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (3211264, 1)
op89.sizes = ([1568, 2048], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op89_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf89', get_index_5, relu, None)
        return store


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op90.unmet_dependencies = []
op90.met_dependencies = [MemoryDep('arg191_1', c0, {c0: 1179648}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1179648, 1)
op90.sizes = ([2048, 64, 9], [])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op90_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg191_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelAlloc)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf89', mode=None), StarDep(name='buf90', mode=None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ExternKernelAlloc
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.convolution


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 3211264}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 3211264}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg195_1', c1, {c0: 1568, c1: 2048}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (3211264, 1)
op92.sizes = ([1568, 2048], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op92_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, relu, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelAlloc)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelAlloc
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.convolution


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 1605632}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 1605632}, None),
        MemoryDep('buf93', c0, {c0: 1605632}, None)]
op94.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg199_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 1024}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (1605632, 1)
op94.sizes = ([1568, 1024], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op94_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf87', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf94', get_index_6, relu, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.convolution


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 3211264}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 3211264}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg203_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 2048}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (3211264, 1)
op96.sizes = ([1568, 2048], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op96_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, relu, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op97.unmet_dependencies = []
op97.met_dependencies = [MemoryDep('arg206_1', c0, {c0: 1179648}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (1179648, 1)
op97.sizes = ([2048, 64, 9], [])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op97_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg206_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf96', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.convolution


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 3211264}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 3211264}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg208_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg209_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg210_1', c1, {c0: 1568, c1: 2048}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (3211264, 1)
op99.sizes = ([1568, 2048], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op99_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, relu, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 1605632}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 1605632}, None),
        MemoryDep('buf94', c0, {c0: 1605632}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg214_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg215_1', c1, {c0: 1568, c1: 1024}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (1605632, 1)
op101.sizes = ([1568, 1024], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op101_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf94', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf101', get_index_6, relu, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 3211264}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 3211264}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg217_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg219_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg220_1', c1, {c0: 1568, c1: 2048}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (3211264, 1)
op103.sizes = ([1568, 2048], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op103_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, relu, None)
        return store


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op104.unmet_dependencies = []
op104.met_dependencies = [MemoryDep('arg221_1', c0, {c0: 1179648}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (1179648, 1)
op104.sizes = ([2048, 64, 9], [])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op104_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf104', get_index_1, load, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelAlloc)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None), StarDep(name='buf104', mode=None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ExternKernelAlloc
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.convolution


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 3211264}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 3211264}, None)]
op106.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg223_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg224_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg225_1', c1, {c0: 1568, c1: 2048}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (3211264, 1)
op106.sizes = ([1568, 2048], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op106_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf106', get_index_5, relu, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelAlloc)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelAlloc
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.convolution


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 1605632}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 1605632}, None),
        MemoryDep('buf107', c0, {c0: 1605632}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg229_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg230_1', c1, {c0: 1568, c1: 1024}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf108.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (1605632, 1)
op108.sizes = ([1568, 1024], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op108_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf101', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf108', get_index_6, relu, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelAlloc)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelAlloc
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.convolution


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 3211264}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 3211264}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg234_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg235_1', c1, {c0: 1568, c1: 2048}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (3211264, 1)
op110.sizes = ([1568, 2048], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op110_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg233_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf110', get_index_5, relu, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op111.unmet_dependencies = []
op111.met_dependencies = [MemoryDep('arg236_1', c0, {c0: 1179648}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1179648, 1)
op111.sizes = ([2048, 64, 9], [])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op111_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg236_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None), StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 3211264}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 3211264}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg238_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg239_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg240_1', c1, {c0: 1568, c1: 2048}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (3211264, 1)
op113.sizes = ([1568, 2048], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op113_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, relu, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1605632}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 1605632}, None),
        MemoryDep('buf114', c0, {c0: 1605632}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg243_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg244_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg245_1', c1, {c0: 1568, c1: 1024}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (1605632, 1)
op115.sizes = ([1568, 1024], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op115_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf108', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf115', get_index_6, relu, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 3211264}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 3211264}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg249_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg250_1', c1, {c0: 1568, c1: 2048}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (3211264, 1)
op117.sizes = ([1568, 2048], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op117_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, relu, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op118.unmet_dependencies = []
op118.met_dependencies = [MemoryDep('arg251_1', c0, {c0: 1179648}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (1179648, 1)
op118.sizes = ([2048, 64, 9], [])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op118_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg251_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf118', get_index_1, load, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelAlloc)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf117', mode=None), StarDep(name='buf118', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ExternKernelAlloc
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.convolution


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 3211264}, None)]
op120.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 3211264}, None)]
op120.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg255_1', c1, {c0: 1568, c1: 2048}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (3211264, 1)
op120.sizes = ([1568, 2048], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op120_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf120', get_index_5, relu, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelAlloc)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelAlloc
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.convolution


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1605632}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1605632}, None),
        MemoryDep('buf121', c0, {c0: 1605632}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg258_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg259_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg260_1', c1, {c0: 1568, c1: 1024}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (1605632, 1)
op122.sizes = ([1568, 1024], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op122_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf115', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf122', get_index_6, relu, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelAlloc)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelAlloc
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.convolution


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 3211264}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 3211264}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg263_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 2048}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (3211264, 1)
op124.sizes = ([1568, 2048], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op124_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, relu, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op125.unmet_dependencies = []
op125.met_dependencies = [MemoryDep('arg266_1', c0, {c0: 1179648}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (1179648, 1)
op125.sizes = ([2048, 64, 9], [])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op125_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg266_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf125', get_index_1, load, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf124', mode=None), StarDep(name='buf125', mode=None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 3211264}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 3211264}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg268_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg269_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg270_1', c1, {c0: 1568, c1: 2048}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (3211264, 1)
op127.sizes = ([1568, 2048], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op127_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf127', get_index_5, relu, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 1605632}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 1605632}, None),
        MemoryDep('buf128', c0, {c0: 1605632}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg274_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg275_1', c1, {c0: 1568, c1: 1024}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf129.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (1605632, 1)
op129.sizes = ([1568, 1024], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op129_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf122', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf129', get_index_6, relu, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelAlloc)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelAlloc
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.convolution


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 3211264}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 3211264}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg278_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg279_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg280_1', c1, {c0: 1568, c1: 2048}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (3211264, 1)
op131.sizes = ([1568, 2048], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op131_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg278_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf131', get_index_5, relu, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op132.unmet_dependencies = []
op132.met_dependencies = [MemoryDep('arg281_1', c0, {c0: 1179648}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (1179648, 1)
op132.sizes = ([2048, 64, 9], [])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op132_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg281_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf132', get_index_1, load, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 3211264}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 3211264}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg283_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg285_1', c1, {c0: 1568, c1: 2048}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (3211264, 1)
op134.sizes = ([1568, 2048], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op134_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, relu, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelAlloc)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelAlloc
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False)]
]
op135.node.kernel = extern_kernels.convolution


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 1605632}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 1605632}, None),
        MemoryDep('buf135', c0, {c0: 1605632}, None)]
op136.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg288_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 1024}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
    ]
]
op136.group.device = cuda:0
op136.group.iteration = (1605632, 1)
op136.sizes = ([1568, 1024], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op136_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf129', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf136', get_index_6, relu, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.convolution


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 3211264}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 3211264}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg293_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg294_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg295_1', c1, {c0: 1568, c1: 2048}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (3211264, 1)
op138.sizes = ([1568, 2048], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op138_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg293_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg294_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg295_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf138', get_index_5, relu, None)
        return store


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op139.unmet_dependencies = []
op139.met_dependencies = [MemoryDep('arg296_1', c0, {c0: 1179648}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (1179648, 1)
op139.sizes = ([2048, 64, 9], [])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op139_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg296_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf139', get_index_1, load, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf138', mode=None), StarDep(name='buf139', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 3211264}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 3211264}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg297_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg298_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg299_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg300_1', c1, {c0: 1568, c1: 2048}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (3211264, 1)
op141.sizes = ([1568, 2048], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op141_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg298_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg300_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf141', get_index_5, relu, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 1605632}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf136', c0, {c0: 1605632}, None),
        MemoryDep('buf142', c0, {c0: 1605632}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg303_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg304_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg305_1', c1, {c0: 1568, c1: 1024}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
]
op143.group.device = cuda:0
op143.group.iteration = (1605632, 1)
op143.sizes = ([1568, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op143_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg302_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg305_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf136', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf143', get_index_6, relu, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelAlloc)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelAlloc
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.convolution


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 3211264}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 3211264}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg308_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg309_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg310_1', c1, {c0: 1568, c1: 2048}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (3211264, 1)
op145.sizes = ([1568, 2048], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg308_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg310_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf145', get_index_5, relu, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op146.unmet_dependencies = []
op146.met_dependencies = [MemoryDep('arg311_1', c0, {c0: 1179648}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (1179648, 1)
op146.sizes = ([2048, 64, 9], [])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op146_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg311_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf146', get_index_1, load, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf145', mode=None), StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 3211264}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 3211264}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg313_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg314_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg315_1', c1, {c0: 1568, c1: 2048}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (3211264, 1)
op148.sizes = ([1568, 2048], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op148_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg315_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf148', get_index_5, relu, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1605632}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf143', c0, {c0: 1605632}, None),
        MemoryDep('buf149', c0, {c0: 1605632}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg318_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg319_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg320_1', c1, {c0: 1568, c1: 1024}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf150.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (1605632, 1)
op150.sizes = ([1568, 1024], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op150_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg318_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg319_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg320_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf143', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf150', get_index_6, relu, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelAlloc)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelAlloc
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op151.node.kernel = extern_kernels.convolution


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 3211264}, None)]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 3211264}, None)]
op152.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg323_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg324_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg325_1', c1, {c0: 1568, c1: 2048}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (3211264, 1)
op152.sizes = ([1568, 2048], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op152_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg323_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg324_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg325_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf152', get_index_5, relu, None)
        return store


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op153.unmet_dependencies = []
op153.met_dependencies = [MemoryDep('arg326_1', c0, {c0: 1179648}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (1179648, 1)
op153.sizes = ([2048, 64, 9], [])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op153_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg326_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf153', get_index_1, load, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf152', mode=None), StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.convolution


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 3211264}, None)]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 3211264}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg328_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg329_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg330_1', c1, {c0: 1568, c1: 2048}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (3211264, 1)
op155.sizes = ([1568, 2048], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op155_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg330_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf155', get_index_5, relu, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelAlloc)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelAlloc
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.node.kernel = extern_kernels.convolution


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1605632}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 1605632}, None),
        MemoryDep('buf156', c0, {c0: 1605632}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg333_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg334_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg335_1', c1, {c0: 1568, c1: 1024}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (1605632, 1)
op157.sizes = ([1568, 1024], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op157_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg333_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg334_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg335_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf150', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf157', get_index_6, relu, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelAlloc)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelAlloc
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.convolution


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 3211264}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 3211264}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg338_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg339_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg340_1', c1, {c0: 1568, c1: 2048}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (3211264, 1)
op159.sizes = ([1568, 2048], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op159_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg339_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg340_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf159', get_index_5, relu, None)
        return store


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op160.unmet_dependencies = []
op160.met_dependencies = [MemoryDep('arg341_1', c0, {c0: 1179648}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (1179648, 1)
op160.sizes = ([2048, 64, 9], [])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op160_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg341_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf160', get_index_1, load, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelAlloc)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf159', mode=None), StarDep(name='buf160', mode=None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ExternKernelAlloc
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.node.kernel = extern_kernels.convolution


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 3211264}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 3211264}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg343_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg344_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg345_1', c1, {c0: 1568, c1: 2048}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (3211264, 1)
op162.sizes = ([1568, 2048], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op162_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf162', get_index_5, relu, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelAlloc)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelAlloc
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.convolution


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 1605632}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 1605632}, None),
        MemoryDep('buf163', c0, {c0: 1605632}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg348_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg349_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg350_1', c1, {c0: 1568, c1: 1024}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (1605632, 1)
op164.sizes = ([1568, 1024], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op164_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf157', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf164', get_index_6, relu, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelAlloc)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelAlloc
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.convolution


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 3211264}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 3211264}, None)]
op166.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg353_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg354_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg355_1', c1, {c0: 1568, c1: 2048}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (3211264, 1)
op166.sizes = ([1568, 2048], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op166_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf166', get_index_5, relu, None)
        return store


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op167.unmet_dependencies = []
op167.met_dependencies = [MemoryDep('arg356_1', c0, {c0: 1179648}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (1179648, 1)
op167.sizes = ([2048, 64, 9], [])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op167_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg356_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf167', get_index_1, load, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf166', mode=None), StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.convolution


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 3211264}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 3211264}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg358_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg359_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg360_1', c1, {c0: 1568, c1: 2048}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (3211264, 1)
op169.sizes = ([1568, 2048], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op169_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf169', get_index_5, relu, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelAlloc)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelAlloc
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.node.kernel = extern_kernels.convolution


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 1605632}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 1605632}, None),
        MemoryDep('buf170', c0, {c0: 1605632}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg362_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg363_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg364_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg365_1', c1, {c0: 1568, c1: 1024}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf171.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (1605632, 1)
op171.sizes = ([1568, 1024], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op171_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg363_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg364_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg365_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf164', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf171', get_index_6, relu, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg366_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 3211264}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 3211264}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg367_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg368_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg369_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg370_1', c1, {c0: 1568, c1: 2048}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (3211264, 1)
op173.sizes = ([1568, 2048], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op173_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg367_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg369_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg370_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf173', get_index_5, relu, None)
        return store


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op174.unmet_dependencies = []
op174.met_dependencies = [MemoryDep('arg371_1', c0, {c0: 1179648}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (1179648, 1)
op174.sizes = ([2048, 64, 9], [])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op174_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg371_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelAlloc)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None), StarDep(name='buf174', mode=None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ExternKernelAlloc
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False)]
]
op175.node.kernel = extern_kernels.convolution


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 3211264}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 3211264}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg372_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg373_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg374_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg375_1', c1, {c0: 1568, c1: 2048}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (3211264, 1)
op176.sizes = ([1568, 2048], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op176_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg373_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg374_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg375_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, relu, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelAlloc)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg376_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelAlloc
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.node.kernel = extern_kernels.convolution


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 1605632}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 1605632}, None),
        MemoryDep('buf177', c0, {c0: 1605632}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg377_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg378_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg379_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg380_1', c1, {c0: 1568, c1: 1024}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (1605632, 1)
op178.sizes = ([1568, 1024], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op178_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg377_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg379_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf171', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf178', get_index_6, relu, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg381_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.convolution


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 3211264}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 3211264}, None)]
op180.met_dependencies = 
    [   MemoryDep('arg382_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg383_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg384_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg385_1', c1, {c0: 1568, c1: 2048}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (3211264, 1)
op180.sizes = ([1568, 2048], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op180_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg383_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf180', get_index_5, relu, None)
        return store


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op181.unmet_dependencies = []
op181.met_dependencies = [MemoryDep('arg386_1', c0, {c0: 1179648}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (1179648, 1)
op181.sizes = ([2048, 64, 9], [])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op181_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg386_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelAlloc)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelAlloc
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.node.kernel = extern_kernels.convolution


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 3211264}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 3211264}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg387_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg388_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg389_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg390_1', c1, {c0: 1568, c1: 2048}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (3211264, 1)
op183.sizes = ([1568, 2048], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op183_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg388_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg389_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf183', get_index_5, relu, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelAlloc)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg391_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelAlloc
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.convolution


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1605632}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 1605632}, None),
        MemoryDep('buf184', c0, {c0: 1605632}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg392_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg393_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg394_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg395_1', c1, {c0: 1568, c1: 1024}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf185.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (1605632, 1)
op185.sizes = ([1568, 1024], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op185_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg392_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg393_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg394_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg395_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf178', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf185', get_index_6, relu, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg396_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 3211264}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 3211264}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg397_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg398_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg399_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg400_1', c1, {c0: 1568, c1: 2048}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (3211264, 1)
op187.sizes = ([1568, 2048], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op187_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg397_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg398_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg400_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf187', get_index_5, relu, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op188.unmet_dependencies = []
op188.met_dependencies = [MemoryDep('arg401_1', c0, {c0: 1179648}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (1179648, 1)
op188.sizes = ([2048, 64, 9], [])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op188_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg401_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelAlloc)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelAlloc
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False)]
]
op189.node.kernel = extern_kernels.convolution


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 3211264}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', c0, {c0: 3211264}, None)]
op190.met_dependencies = 
    [   MemoryDep('arg402_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg403_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg404_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg405_1', c1, {c0: 1568, c1: 2048}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (3211264, 1)
op190.sizes = ([1568, 2048], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op190_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg403_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg404_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg405_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf190', get_index_5, relu, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelAlloc)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg406_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelAlloc
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.convolution


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1605632}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 1605632}, None),
        MemoryDep('buf191', c0, {c0: 1605632}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg407_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg408_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg409_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg410_1', c1, {c0: 1568, c1: 1024}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf192.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (1605632, 1)
op192.sizes = ([1568, 1024], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op192_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg407_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg408_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg409_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg410_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf185', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf192', get_index_6, relu, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelAlloc)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg411_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelAlloc
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.convolution


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 3211264}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 3211264}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg412_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg413_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg414_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg415_1', c1, {c0: 1568, c1: 2048}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (3211264, 1)
op194.sizes = ([1568, 2048], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op194_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg413_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg414_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg415_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf194', get_index_5, relu, None)
        return store


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op195.unmet_dependencies = []
op195.met_dependencies = [MemoryDep('arg416_1', c0, {c0: 1179648}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (1179648, 1)
op195.sizes = ([2048, 64, 9], [])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op195_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg416_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf195', get_index_1, load, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelAlloc)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None), StarDep(name='buf195', mode=None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ExternKernelAlloc
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op196.node.kernel = extern_kernels.convolution


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 3211264}, None)]
op197.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 3211264}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg417_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg418_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg419_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg420_1', c1, {c0: 1568, c1: 2048}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (3211264, 1)
op197.sizes = ([1568, 2048], [])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op197_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg417_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg418_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg419_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg420_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf197', get_index_5, relu, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg421_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1605632}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1605632}, None),
        MemoryDep('buf198', c0, {c0: 1605632}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg422_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg423_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg424_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg425_1', c1, {c0: 1568, c1: 1024}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (1605632, 1)
op199.sizes = ([1568, 1024], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op199_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg423_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg424_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg425_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf192', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf199', get_index_6, relu, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg426_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.convolution


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 3211264}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 3211264}, None)]
op201.met_dependencies = 
    [   MemoryDep('arg427_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg428_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg429_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg430_1', c1, {c0: 1568, c1: 2048}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (3211264, 1)
op201.sizes = ([1568, 2048], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op201_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg427_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg428_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg429_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg430_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf201', get_index_5, relu, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op202.unmet_dependencies = []
op202.met_dependencies = [MemoryDep('arg431_1', c0, {c0: 1179648}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (1179648, 1)
op202.sizes = ([2048, 64, 9], [])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op202_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg431_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf202', get_index_1, load, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelAlloc)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf202', mode=None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ExternKernelAlloc
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False)]
]
op203.node.kernel = extern_kernels.convolution


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 3211264}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 3211264}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg433_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg434_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg435_1', c1, {c0: 1568, c1: 2048}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (3211264, 1)
op204.sizes = ([1568, 2048], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op204_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg432_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg433_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg434_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg435_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf204', get_index_5, relu, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelAlloc)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='arg436_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelAlloc
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.node.kernel = extern_kernels.convolution


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1605632}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 1605632}, None),
        MemoryDep('buf205', c0, {c0: 1605632}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg437_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg438_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg439_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg440_1', c1, {c0: 1568, c1: 1024}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (1605632, 1)
op206.sizes = ([1568, 1024], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op206_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg437_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg438_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg439_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg440_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf199', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf206', get_index_6, relu, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 3211264}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 3211264}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg443_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg444_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg445_1', c1, {c0: 1568, c1: 2048}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (3211264, 1)
op208.sizes = ([1568, 2048], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op208_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg443_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg444_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg445_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, relu, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg446_1', c0, {c0: 1179648}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (1179648, 1)
op209.sizes = ([2048, 64, 9], [])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op209_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg446_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelAlloc)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelAlloc
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.convolution


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 3211264}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 3211264}, None)]
op211.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg448_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg449_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg450_1', c1, {c0: 1568, c1: 2048}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (3211264, 1)
op211.sizes = ([1568, 2048], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op211_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg448_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg449_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg450_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf211', get_index_5, relu, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelAlloc)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelAlloc
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.node.kernel = extern_kernels.convolution


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 1605632}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 1605632}, None),
        MemoryDep('buf212', c0, {c0: 1605632}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg453_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg454_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg455_1', c1, {c0: 1568, c1: 1024}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (1605632, 1)
op213.sizes = ([1568, 1024], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op213_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg453_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg454_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg455_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf206', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf213', get_index_6, relu, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelAlloc)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg456_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelAlloc
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.node.kernel = extern_kernels.convolution


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 3211264}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 3211264}, None)]
op215.met_dependencies = 
    [   MemoryDep('arg457_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg458_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg459_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg460_1', c1, {c0: 1568, c1: 2048}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (3211264, 1)
op215.sizes = ([1568, 2048], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op215_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg457_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg459_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg460_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf215', get_index_5, relu, None)
        return store


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', 576*c0 + c1 + 64*c2, {c0: 2048, c1: 64, c2: 9}, None)]
op216.unmet_dependencies = []
op216.met_dependencies = [MemoryDep('arg461_1', c0, {c0: 1179648}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1179648, 1)
op216.sizes = ([2048, 64, 9], [])
arg461_1_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 9, 3, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[2048, 64, 3, 3], stride=[576, 1, 192, 64])
class op216_loop_body:
    var_ranges = {z0: 2048, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg461_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf216', get_index_1, load, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelAlloc)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ExternKernelAlloc
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op217.node.kernel = extern_kernels.convolution


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 3211264}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 3211264}, None)]
op218.met_dependencies = 
    [   MemoryDep('arg462_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg463_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg464_1', c1, {c0: 1568, c1: 2048}, None),
        MemoryDep('arg465_1', c1, {c0: 1568, c1: 2048}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (3211264, 1)
op218.sizes = ([1568, 2048], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=[401408, 1, 28672, 2048])
class op218_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg463_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg464_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg465_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf218', get_index_5, relu, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg466_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.node.kernel = extern_kernels.convolution


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 1605632}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 1605632}, None),
        MemoryDep('buf219', c0, {c0: 1605632}, None)]
op220.met_dependencies = 
    [   MemoryDep('arg467_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg468_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg469_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg470_1', c1, {c0: 1568, c1: 1024}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf220.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (1605632, 1)
op220.sizes = ([1568, 1024], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op220_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg467_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg469_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg470_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf213', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf220', get_index_6, relu, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelAlloc)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='arg471_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelAlloc
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 14, 14], stride=[802816, 1, 57344, 4096])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False)]
]
op221.node.kernel = extern_kernels.convolution


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 6422528}, None)]
op222.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 6422528}, None)]
op222.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 1568, c1: 4096}, None),
        MemoryDep('arg473_1', c1, {c0: 1568, c1: 4096}, None),
        MemoryDep('arg474_1', c1, {c0: 1568, c1: 4096}, None),
        MemoryDep('arg475_1', c1, {c0: 1568, c1: 4096}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 14, 14], stride=[802816, 1, 57344, 4096])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (6422528, 1)
op222.sizes = ([1568, 4096], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 14, 14], stride=[802816, 1, 57344, 4096])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg475_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 14, 14], stride=[802816, 1, 57344, 4096])
class op222_loop_body:
    var_ranges = {z0: 1568, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg472_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg473_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg474_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg475_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf222', get_index_5, relu, None)
        return store


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', 1152*c0 + c1 + 128*c2, {c0: 4096, c1: 128, c2: 9}, None)]
op223.unmet_dependencies = []
op223.met_dependencies = [MemoryDep('arg476_1', c0, {c0: 4718592}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (4718592, 1)
op223.sizes = ([4096, 128, 9], [])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 9, 3, 1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 1, 384, 128])
class op223_loop_body:
    var_ranges = {z0: 4096, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg476_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf223', get_index_1, load, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelAlloc)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf222', mode=None), StarDep(name='buf223', mode=None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ExternKernelAlloc
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf224.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False)]
]
op224.node.kernel = extern_kernels.convolution


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1605632}, None)]
op225.unmet_dependencies = [MemoryDep('buf224', c0, {c0: 1605632}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg477_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg478_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg479_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg480_1', c1, {c0: 392, c1: 4096}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1605632, 1)
op225.sizes = ([392, 4096], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
class op225_loop_body:
    var_ranges = {z0: 392, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg477_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg479_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg480_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf225', get_index_5, relu, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelAlloc)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelAlloc
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False)]
]
op226.node.kernel = extern_kernels.convolution


op227: ExternKernelSchedulerNode(ExternKernelAlloc)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op227.met_dependencies = [StarDep(name='arg486_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelAlloc
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False)]
]
op227.node.kernel = extern_kernels.convolution


op228_op229: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op228_op229.writes = 
    [   MemoryDep('buf228', c0, {c0: 802816}, None),
        MemoryDep('buf229', c0, {c0: 802816}, None)]
op228_op229.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 802816}, None),
        MemoryDep('buf227', c0, {c0: 802816}, None)]
op228_op229.met_dependencies = 
    [   MemoryDep('arg482_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg483_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg484_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg485_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg487_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg488_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg489_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg490_1', c1, {c0: 392, c1: 2048}, None)]
op228_op229.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op228_op229.snodes[0] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 802816}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 802816}, None),
        MemoryDep('buf227', c0, {c0: 802816}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg482_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg483_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg484_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg485_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg487_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg488_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg489_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg490_1', c1, {c0: 392, c1: 2048}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (802816, 1)
op228.sizes = ([392, 2048], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
class op228_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg482_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg483_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg484_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg485_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf227', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg487_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg488_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg489_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg490_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf228', get_index_10, add_4, None)
        return store
op228_op229.snodes[1] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 802816}, None)]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 802816}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (802816, 1)
op229.sizes = ([802816], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
class op229_loop_body:
    var_ranges = {z0: 802816}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf229', get_index_1, relu, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelAlloc)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg491_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelAlloc
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.convolution


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 1605632}, None)]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 1605632}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg492_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg493_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg494_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg495_1', c1, {c0: 392, c1: 4096}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (1605632, 1)
op231.sizes = ([392, 4096], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
class op231_loop_body:
    var_ranges = {z0: 392, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg493_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg494_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg495_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, relu, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', 1152*c0 + c1 + 128*c2, {c0: 4096, c1: 128, c2: 9}, None)]
op232.unmet_dependencies = []
op232.met_dependencies = [MemoryDep('arg496_1', c0, {c0: 4718592}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (4718592, 1)
op232.sizes = ([4096, 128, 9], [])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 9, 3, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 1, 384, 128])
class op232_loop_body:
    var_ranges = {z0: 4096, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg496_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 1605632}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 1605632}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg497_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg498_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg499_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg500_1', c1, {c0: 392, c1: 4096}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (1605632, 1)
op234.sizes = ([392, 4096], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
class op234_loop_body:
    var_ranges = {z0: 392, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg497_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg498_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg499_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg500_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf234', get_index_5, relu, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 802816}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg503_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg504_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg505_1', c1, {c0: 392, c1: 2048}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (802816, 1)
op236.sizes = ([392, 2048], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
class op236_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg503_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg504_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg505_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf229', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf236', get_index_6, relu, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelAlloc)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg506_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelAlloc
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op237.node.kernel = extern_kernels.convolution


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 1605632}, None)]
op238.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 1605632}, None)]
op238.met_dependencies = 
    [   MemoryDep('arg507_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg508_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg509_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg510_1', c1, {c0: 392, c1: 4096}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (1605632, 1)
op238.sizes = ([392, 4096], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
class op238_loop_body:
    var_ranges = {z0: 392, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg507_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg509_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg510_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf238', get_index_5, relu, None)
        return store


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', 1152*c0 + c1 + 128*c2, {c0: 4096, c1: 128, c2: 9}, None)]
op239.unmet_dependencies = []
op239.met_dependencies = [MemoryDep('arg511_1', c0, {c0: 4718592}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (4718592, 1)
op239.sizes = ([4096, 128, 9], [])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 9, 3, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4096, 128, 3, 3], stride=[1152, 1, 384, 128])
class op239_loop_body:
    var_ranges = {z0: 4096, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg511_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf239', get_index_1, load, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf238', mode=None), StarDep(name='buf239', mode=None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 1605632}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 1605632}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg512_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg513_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg514_1', c1, {c0: 392, c1: 4096}, None),
        MemoryDep('arg515_1', c1, {c0: 392, c1: 4096}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (1605632, 1)
op241.sizes = ([392, 4096], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
arg515_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 4096, 7, 7], stride=[200704, 1, 28672, 4096])
class op241_loop_body:
    var_ranges = {z0: 392, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg513_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg514_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg515_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf241', get_index_5, relu, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelAlloc)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg516_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelAlloc
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = extern_kernels.convolution


op243_op244: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op243_op244.writes = 
    [   MemoryDep('buf243', c0, {c0: 16384}, None),
        MemoryDep('buf244', c0, {c0: 16384}, None)]
op243_op244.unmet_dependencies = 
    [   MemoryDep('buf236', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None),
        MemoryDep('buf242', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None)]
op243_op244.met_dependencies = 
    [   MemoryDep('arg517_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg518_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg519_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg520_1', c1, {c0: 8, c1: 2048}, None)]
op243_op244.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False)]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243_op244.snodes[0] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 16384}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf236', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None),
        MemoryDep('buf242', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg517_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg518_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg519_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg520_1', c1, {c0: 8, c1: 2048}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (16384, 49)
op243.sizes = ([8, 2048], [49])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg520_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op243_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 49}
    index0 = 100352*z0 + z1 + 2048*z2
    index1 = z1
    index2 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg517_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg518_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg519_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg520_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf236', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_6, reduction)
        return store_reduction
op243_op244.snodes[1] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 16384}, None)]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 16384}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (16384, 1)
op244.sizes = ([16384], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op244_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf244', get_index_1, truediv, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg521_1', mode=None), StarDep(name='arg522_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf245.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op245.node.kernel = extern_kernels.addmm



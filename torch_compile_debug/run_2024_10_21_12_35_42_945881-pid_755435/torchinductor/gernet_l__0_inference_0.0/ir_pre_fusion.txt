op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 196608*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 65536}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1572864}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1572864, 1)
op0.sizes = ([8, 3, 65536], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 65536}
    index0 = 196608*z0 + 65536*z1 + z2
    index1 = 196608*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 32, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 864}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (864, 1)
op1.sizes = ([32, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4194304}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 4194304}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 32}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (4194304, 1)
op3.sizes = ([131072, 32], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
class op3_loop_body:
    var_ranges = {z0: 131072, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 288*c0 + c1 + 32*c2, {c0: 128, c1: 32, c2: 9}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('arg6_1', c0, {c0: 36864}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[128, 32, 3, 3], stride=[288, 1, 96, 32])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (36864, 1)
op4.sizes = ([128, 32, 9], [])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[128, 32, 3, 3], stride=[288, 9, 3, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[128, 32, 3, 3], stride=[288, 1, 96, 32])
class op4_loop_body:
    var_ranges = {z0: 128, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg6_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None), StarDep(name='buf4', mode=None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 4194304}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 4194304}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg7_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg9_1', c1, {c0: 32768, c1: 128}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (4194304, 1)
op6.sizes = ([32768, 128], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op6_loop_body:
    var_ranges = {z0: 32768, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 147456}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (147456, 1)
op7.sizes = ([128, 128, 9], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op7_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf8.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op9.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op9.node.kernel = extern_kernels.convolution


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 4194304}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf8', c0, {c0: 4194304}, None),
        MemoryDep('buf9', c0, {c0: 4194304}, None)]
op10.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg13_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg14_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg15_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg17_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg18_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg19_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg20_1', c1, {c0: 32768, c1: 128}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (4194304, 1)
op10.sizes = ([32768, 128], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op10_loop_body:
    var_ranges = {z0: 32768, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf9', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg18_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg19_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg20_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf10', get_index_10, add_4, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 4194304}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 4194304}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (4194304, 1)
op11.sizes = ([4194304], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op11_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf11', get_index_1, relu, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 1152*c0 + c1 + 128*c2, {c0: 192, c1: 128, c2: 9}, None)]
op12.unmet_dependencies = []
op12.met_dependencies = [MemoryDep('arg21_1', c0, {c0: 221184}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[192, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (221184, 1)
op12.sizes = ([192, 128, 9], [])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[192, 128, 3, 3], stride=[1152, 9, 3, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[192, 128, 3, 3], stride=[1152, 1, 384, 128])
class op12_loop_body:
    var_ranges = {z0: 192, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg21_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1572864}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 1572864}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg23_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg24_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg25_1', c1, {c0: 8192, c1: 192}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1572864, 1)
op14.sizes = ([8192, 192], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
class op14_loop_body:
    var_ranges = {z0: 8192, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf14', get_index_5, relu, None)
        return store


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', 1728*c0 + c1 + 192*c2, {c0: 192, c1: 192, c2: 9}, None)]
op15.unmet_dependencies = []
op15.met_dependencies = [MemoryDep('arg26_1', c0, {c0: 331776}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 1, 576, 192])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (331776, 1)
op15.sizes = ([192, 192, 9], [])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 9, 3, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 1, 576, 192])
class op15_loop_body:
    var_ranges = {z0: 192, z1: 192, z2: 9}
    index0 = 1728*z0 + 9*z1 + z2
    index1 = 1728*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg26_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf15', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf16.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op17.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 1572864}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1572864}, None),
        MemoryDep('buf17', c0, {c0: 1572864}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg28_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg29_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg30_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg32_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg33_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg34_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg35_1', c1, {c0: 8192, c1: 192}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (1572864, 1)
op18.sizes = ([8192, 192], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
class op18_loop_body:
    var_ranges = {z0: 8192, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf17', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg32_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg33_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg34_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg35_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf18', get_index_10, add_4, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 1572864}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 1572864}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (1572864, 1)
op19.sizes = ([1572864], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
class op19_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf19', get_index_1, relu, None)
        return store


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', 1728*c0 + c1 + 192*c2, {c0: 192, c1: 192, c2: 9}, None)]
op20.unmet_dependencies = []
op20.met_dependencies = [MemoryDep('arg36_1', c0, {c0: 331776}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 1, 576, 192])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (331776, 1)
op20.sizes = ([192, 192, 9], [])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 9, 3, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 1, 576, 192])
class op20_loop_body:
    var_ranges = {z0: 192, z1: 192, z2: 9}
    index0 = 1728*z0 + 9*z1 + z2
    index1 = 1728*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf20', get_index_1, load, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf19', mode=None), StarDep(name='buf20', mode=None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 1572864}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 1572864}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg38_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg39_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg40_1', c1, {c0: 8192, c1: 192}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (1572864, 1)
op22.sizes = ([8192, 192], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
class op22_loop_body:
    var_ranges = {z0: 8192, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, relu, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', 1728*c0 + c1 + 192*c2, {c0: 192, c1: 192, c2: 9}, None)]
op23.unmet_dependencies = []
op23.met_dependencies = [MemoryDep('arg41_1', c0, {c0: 331776}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 1, 576, 192])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (331776, 1)
op23.sizes = ([192, 192, 9], [])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 9, 3, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[192, 192, 3, 3], stride=[1728, 1, 576, 192])
class op23_loop_body:
    var_ranges = {z0: 192, z1: 192, z2: 9}
    index0 = 1728*z0 + 9*z1 + z2
    index1 = 1728*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg41_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf23', get_index_1, load, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None), StarDep(name='buf23', mode=None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1572864}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 1572864}, None),
        MemoryDep('buf24', c0, {c0: 1572864}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg43_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg44_1', c1, {c0: 8192, c1: 192}, None),
        MemoryDep('arg45_1', c1, {c0: 8192, c1: 192}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
    buf25.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (1572864, 1)
op25.sizes = ([8192, 192], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 32, 32], stride=[196608, 1, 6144, 192])
class op25_loop_body:
    var_ranges = {z0: 8192, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf19', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf25', get_index_6, relu, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 32, 32], stride=[163840, 1, 5120, 160])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1310720}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 1310720}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 8192, c1: 160}, None),
        MemoryDep('arg48_1', c1, {c0: 8192, c1: 160}, None),
        MemoryDep('arg49_1', c1, {c0: 8192, c1: 160}, None),
        MemoryDep('arg50_1', c1, {c0: 8192, c1: 160}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 32, 32], stride=[163840, 1, 5120, 160])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1310720, 1)
op27.sizes = ([8192, 160], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 32, 32], stride=[163840, 1, 5120, 160])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 32, 32], stride=[163840, 1, 5120, 160])
class op27_loop_body:
    var_ranges = {z0: 8192, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, relu, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op28.unmet_dependencies = []
op28.met_dependencies = [MemoryDep('arg51_1', c0, {c0: 230400}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (230400, 1)
op28.sizes = ([160, 160, 9], [])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op28_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf28', get_index_1, load, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf27', mode=None), StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 327680}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 327680}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg53_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg54_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg55_1', c1, {c0: 2048, c1: 160}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (327680, 1)
op30.sizes = ([2048, 160], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op30_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf30', get_index_5, relu, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf31.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op32.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1310720}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 1310720}, None),
        MemoryDep('buf32', c0, {c0: 1310720}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg58_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg59_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg60_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg62_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg63_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg64_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg65_1', c1, {c0: 2048, c1: 640}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1310720, 1)
op33.sizes = ([2048, 640], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op33_loop_body:
    var_ranges = {z0: 2048, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf32', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg62_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg63_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg64_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg65_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf33', get_index_10, add_4, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 1310720}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 1310720}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (1310720, 1)
op34.sizes = ([1310720], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op34_loop_body:
    var_ranges = {z0: 1310720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf34', get_index_1, relu, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 327680}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 327680}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg68_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg69_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg70_1', c1, {c0: 2048, c1: 160}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (327680, 1)
op36.sizes = ([2048, 160], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op36_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf36', get_index_5, relu, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = [MemoryDep('arg71_1', c0, {c0: 230400}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (230400, 1)
op37.sizes = ([160, 160, 9], [])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op37_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg71_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf37', get_index_1, load, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 327680}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 327680}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg73_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg74_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg75_1', c1, {c0: 2048, c1: 160}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (327680, 1)
op39.sizes = ([2048, 160], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op39_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, relu, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 1310720}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1310720}, None),
        MemoryDep('buf40', c0, {c0: 1310720}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg78_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg79_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg80_1', c1, {c0: 2048, c1: 640}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (1310720, 1)
op41.sizes = ([2048, 640], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op41_loop_body:
    var_ranges = {z0: 2048, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf34', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf41', get_index_6, relu, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 327680}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 327680}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg83_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg84_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg85_1', c1, {c0: 2048, c1: 160}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (327680, 1)
op43.sizes = ([2048, 160], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op43_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, relu, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op44.unmet_dependencies = []
op44.met_dependencies = [MemoryDep('arg86_1', c0, {c0: 230400}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (230400, 1)
op44.sizes = ([160, 160, 9], [])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op44_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg86_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf44', get_index_1, load, None)
        return store


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf43', mode=None), StarDep(name='buf44', mode=None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.convolution


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 327680}, None)]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 327680}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg88_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg89_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg90_1', c1, {c0: 2048, c1: 160}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (327680, 1)
op46.sizes = ([2048, 160], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op46_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, relu, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 1310720}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 1310720}, None),
        MemoryDep('buf47', c0, {c0: 1310720}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg93_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg94_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg95_1', c1, {c0: 2048, c1: 640}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (1310720, 1)
op48.sizes = ([2048, 640], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op48_loop_body:
    var_ranges = {z0: 2048, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf41', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf48', get_index_6, relu, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.convolution


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 327680}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 327680}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg97_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg98_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg99_1', c1, {c0: 2048, c1: 160}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (327680, 1)
op50.sizes = ([2048, 160], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op50_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf50', get_index_5, relu, None)
        return store


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('arg101_1', c0, {c0: 230400}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (230400, 1)
op51.sizes = ([160, 160, 9], [])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op51_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg101_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf51', get_index_1, load, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelAlloc)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf50', mode=None), StarDep(name='buf51', mode=None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ExternKernelAlloc
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.node.kernel = extern_kernels.convolution


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 327680}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 327680}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg103_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg104_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg105_1', c1, {c0: 2048, c1: 160}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (327680, 1)
op53.sizes = ([2048, 160], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op53_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf53', get_index_5, relu, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 1310720}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf48', c0, {c0: 1310720}, None),
        MemoryDep('buf54', c0, {c0: 1310720}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg108_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg109_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg110_1', c1, {c0: 2048, c1: 640}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (1310720, 1)
op55.sizes = ([2048, 640], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op55_loop_body:
    var_ranges = {z0: 2048, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf48', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf55', get_index_6, relu, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 327680}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 327680}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg113_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg114_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg115_1', c1, {c0: 2048, c1: 160}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (327680, 1)
op57.sizes = ([2048, 160], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op57_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf57', get_index_5, relu, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op58.unmet_dependencies = []
op58.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 230400}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (230400, 1)
op58.sizes = ([160, 160, 9], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op58_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf57', mode=None), StarDep(name='buf58', mode=None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 327680}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 327680}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg118_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg119_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg120_1', c1, {c0: 2048, c1: 160}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (327680, 1)
op60.sizes = ([2048, 160], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op60_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf60', get_index_5, relu, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1310720}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf55', c0, {c0: 1310720}, None),
        MemoryDep('buf61', c0, {c0: 1310720}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg123_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg124_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg125_1', c1, {c0: 2048, c1: 640}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (1310720, 1)
op62.sizes = ([2048, 640], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op62_loop_body:
    var_ranges = {z0: 2048, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf55', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf62', get_index_6, relu, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 327680}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 327680}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg128_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg129_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg130_1', c1, {c0: 2048, c1: 160}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (327680, 1)
op64.sizes = ([2048, 160], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op64_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf64', get_index_5, relu, None)
        return store


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', 1440*c0 + c1 + 160*c2, {c0: 160, c1: 160, c2: 9}, None)]
op65.unmet_dependencies = []
op65.met_dependencies = [MemoryDep('arg131_1', c0, {c0: 230400}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (230400, 1)
op65.sizes = ([160, 160, 9], [])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 9, 3, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[160, 160, 3, 3], stride=[1440, 1, 480, 160])
class op65_loop_body:
    var_ranges = {z0: 160, z1: 160, z2: 9}
    index0 = 1440*z0 + 9*z1 + z2
    index1 = 1440*z0 + z1 + 160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg131_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf64', mode=None), StarDep(name='buf65', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 327680}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 327680}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg133_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg134_1', c1, {c0: 2048, c1: 160}, None),
        MemoryDep('arg135_1', c1, {c0: 2048, c1: 160}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (327680, 1)
op67.sizes = ([2048, 160], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 16, 16], stride=[40960, 1, 2560, 160])
class op67_loop_body:
    var_ranges = {z0: 2048, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, relu, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1310720}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 1310720}, None),
        MemoryDep('buf68', c0, {c0: 1310720}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg138_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg139_1', c1, {c0: 2048, c1: 640}, None),
        MemoryDep('arg140_1', c1, {c0: 2048, c1: 640}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (1310720, 1)
op69.sizes = ([2048, 640], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
class op69_loop_body:
    var_ranges = {z0: 2048, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf62', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf69', get_index_6, relu, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 16, 16], stride=[491520, 1, 30720, 1920])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 3932160}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 3932160}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 2048, c1: 1920}, None),
        MemoryDep('arg143_1', c1, {c0: 2048, c1: 1920}, None),
        MemoryDep('arg144_1', c1, {c0: 2048, c1: 1920}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 1920}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 16, 16], stride=[491520, 1, 30720, 1920])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (3932160, 1)
op71.sizes = ([2048, 1920], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 16, 16], stride=[491520, 1, 30720, 1920])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 16, 16], stride=[491520, 1, 30720, 1920])
class op71_loop_body:
    var_ranges = {z0: 2048, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, relu, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 983040}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 983040}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg148_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg149_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg150_1', c1, {c0: 512, c1: 1920}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (983040, 1)
op73.sizes = ([512, 1920], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op73_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf74.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op75.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 327680}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf74', c0, {c0: 327680}, None),
        MemoryDep('buf75', c0, {c0: 327680}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg153_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg154_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg155_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg157_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg158_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg159_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg160_1', c1, {c0: 512, c1: 640}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (327680, 1)
op76.sizes = ([512, 640], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op76_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg157_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg158_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg159_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg160_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf76', get_index_10, add_4, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 327680}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 327680}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (327680, 1)
op77.sizes = ([327680], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op77_loop_body:
    var_ranges = {z0: 327680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf77', get_index_1, relu, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.convolution


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 983040}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 983040}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg163_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg164_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg165_1', c1, {c0: 512, c1: 1920}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (983040, 1)
op79.sizes = ([512, 1920], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op79_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, relu, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 983040}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 983040}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg168_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg169_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg170_1', c1, {c0: 512, c1: 1920}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (983040, 1)
op81.sizes = ([512, 1920], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op81_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 327680}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 327680}, None),
        MemoryDep('buf82', c0, {c0: 327680}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg173_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg174_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg175_1', c1, {c0: 512, c1: 640}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (327680, 1)
op83.sizes = ([512, 640], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op83_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf77', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf83', get_index_6, relu, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 983040}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 983040}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg178_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg179_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg180_1', c1, {c0: 512, c1: 1920}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (983040, 1)
op85.sizes = ([512, 1920], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op85_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, relu, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 983040}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 983040}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg183_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg184_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg185_1', c1, {c0: 512, c1: 1920}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (983040, 1)
op87.sizes = ([512, 1920], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op87_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, relu, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.convolution


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 327680}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 327680}, None),
        MemoryDep('buf88', c0, {c0: 327680}, None)]
op89.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg189_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg190_1', c1, {c0: 512, c1: 640}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf89.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (327680, 1)
op89.sizes = ([512, 640], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op89_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf83', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf89', get_index_6, relu, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.convolution


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 983040}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 983040}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg193_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg194_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg195_1', c1, {c0: 512, c1: 1920}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (983040, 1)
op91.sizes = ([512, 1920], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op91_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, relu, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 983040}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 983040}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg198_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg199_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg200_1', c1, {c0: 512, c1: 1920}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (983040, 1)
op93.sizes = ([512, 1920], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op93_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, relu, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelAlloc)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelAlloc
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.convolution


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 327680}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf89', c0, {c0: 327680}, None),
        MemoryDep('buf94', c0, {c0: 327680}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg203_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg205_1', c1, {c0: 512, c1: 640}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf95.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (327680, 1)
op95.sizes = ([512, 640], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op95_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf89', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf95', get_index_6, relu, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 983040}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 983040}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg208_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg209_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg210_1', c1, {c0: 512, c1: 1920}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (983040, 1)
op97.sizes = ([512, 1920], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op97_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.convolution


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 983040}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 983040}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg213_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg214_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg215_1', c1, {c0: 512, c1: 1920}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (983040, 1)
op99.sizes = ([512, 1920], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op99_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, relu, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 327680}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 327680}, None),
        MemoryDep('buf95', c0, {c0: 327680}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg217_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg218_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg219_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg220_1', c1, {c0: 512, c1: 640}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (327680, 1)
op101.sizes = ([512, 640], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op101_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf95', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf101', get_index_6, relu, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 983040}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 983040}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg223_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg224_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg225_1', c1, {c0: 512, c1: 1920}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (983040, 1)
op103.sizes = ([512, 1920], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op103_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, relu, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 983040}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 983040}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg228_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg229_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg230_1', c1, {c0: 512, c1: 1920}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (983040, 1)
op105.sizes = ([512, 1920], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op105_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, relu, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 327680}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 327680}, None),
        MemoryDep('buf106', c0, {c0: 327680}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg233_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg234_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg235_1', c1, {c0: 512, c1: 640}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf107.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (327680, 1)
op107.sizes = ([512, 640], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op107_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg233_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf101', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf107', get_index_6, relu, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 983040}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 983040}, None)]
op109.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg238_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg239_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg240_1', c1, {c0: 512, c1: 1920}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (983040, 1)
op109.sizes = ([512, 1920], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op109_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf109', get_index_5, relu, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 983040}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 983040}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg243_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg244_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg245_1', c1, {c0: 512, c1: 1920}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (983040, 1)
op111.sizes = ([512, 1920], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op111_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf111', get_index_5, relu, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 327680}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 327680}, None),
        MemoryDep('buf112', c0, {c0: 327680}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg248_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg249_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg250_1', c1, {c0: 512, c1: 640}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf113.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (327680, 1)
op113.sizes = ([512, 640], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op113_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf107', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf113', get_index_6, relu, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 983040}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 983040}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg253_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg254_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg255_1', c1, {c0: 512, c1: 1920}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (983040, 1)
op115.sizes = ([512, 1920], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op115_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, relu, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 983040}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 983040}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg258_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg259_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg260_1', c1, {c0: 512, c1: 1920}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (983040, 1)
op117.sizes = ([512, 1920], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op117_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, relu, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelAlloc)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelAlloc
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.convolution


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 327680}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 327680}, None),
        MemoryDep('buf118', c0, {c0: 327680}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg263_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg264_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg265_1', c1, {c0: 512, c1: 640}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf119.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (327680, 1)
op119.sizes = ([512, 640], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op119_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf113', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf119', get_index_6, relu, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelAlloc)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelAlloc
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.convolution


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 983040}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 983040}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg268_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg269_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg270_1', c1, {c0: 512, c1: 1920}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (983040, 1)
op121.sizes = ([512, 1920], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op121_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, relu, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelAlloc)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelAlloc
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.convolution


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 983040}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 983040}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg273_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg274_1', c1, {c0: 512, c1: 1920}, None),
        MemoryDep('arg275_1', c1, {c0: 512, c1: 1920}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (983040, 1)
op123.sizes = ([512, 1920], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1920], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 1920, 8, 8], stride=[122880, 1, 15360, 1920])
class op123_loop_body:
    var_ranges = {z0: 512, z1: 1920}
    index0 = 1920*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf123', get_index_5, relu, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelAlloc)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelAlloc
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.node.kernel = extern_kernels.convolution


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 327680}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 327680}, None),
        MemoryDep('buf124', c0, {c0: 327680}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg278_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg279_1', c1, {c0: 512, c1: 640}, None),
        MemoryDep('arg280_1', c1, {c0: 512, c1: 640}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (327680, 1)
op125.sizes = ([512, 640], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[640], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
class op125_loop_body:
    var_ranges = {z0: 512, z1: 640}
    index0 = 640*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg278_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf119', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf125', get_index_6, relu, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 8, 8], stride=[163840, 1, 20480, 2560])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 20480}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', 163840*c0 + c1 + 2560*c2, {c0: 8, c1: 2560, c2: 64}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 8, c1: 2560}, None),
        MemoryDep('arg283_1', c1, {c0: 8, c1: 2560}, None),
        MemoryDep('arg284_1', c1, {c0: 8, c1: 2560}, None),
        MemoryDep('arg285_1', c1, {c0: 8, c1: 2560}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 1, 1], stride=[2560, 1, 20480, 20480])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (20480, 64)
op127.sizes = ([8, 2560], [64])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 8, 8], stride=[163840, 1, 20480, 2560])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 1, 1], stride=[2560, 1, 20480, 20480])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 2560, z2: 64}
    index0 = 163840*z0 + z1 + 2560*z2
    index1 = z1
    index2 = 2560*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf127', get_index_5, reduction)
        return store_reduction


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 20480}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 20480}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 1, 1], stride=[2560, 1, 20480, 20480])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (20480, 1)
op128.sizes = ([20480], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 1, 1], stride=[2560, 1, 20480, 20480])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 1, 1], stride=[2560, 1, 20480, 20480])
class op128_loop_body:
    var_ranges = {z0: 20480}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf128', get_index_1, truediv, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg286_1', mode=None), StarDep(name='arg287_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf129.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.addmm



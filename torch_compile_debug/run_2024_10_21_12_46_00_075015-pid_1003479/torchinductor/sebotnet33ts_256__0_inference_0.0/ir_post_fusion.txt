op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 196608*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 65536}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1572864}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1572864, 1)
op0.sizes = ([8, 3, 65536], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 65536}
    index0 = 196608*z0 + 65536*z1 + z2
    index1 = 196608*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 24, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 648}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[24, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (648, 1)
op1.sizes = ([24, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[24, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[24, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 24, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3_op4: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op3_op4.writes = 
    [   MemoryDep('buf3', c0, {c0: 3145728}, None),
        MemoryDep('buf4', c0, {c0: 3145728}, None)]
op3_op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3145728}, None)]
op3_op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 24}, None)]
op3_op4.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op3_op4.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3145728}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3145728}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 24}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (3145728, 1)
op3.sizes = ([131072, 24], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
class op3_loop_body:
    var_ranges = {z0: 131072, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store
op3_op4.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 3145728}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 3145728}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (3145728, 1)
op4.sizes = ([3145728], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
class op4_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 216*c0 + c1 + 24*c2, {c0: 32, c1: 24, c2: 9}, None)]
op5.unmet_dependencies = []
op5.met_dependencies = [MemoryDep('arg6_1', c0, {c0: 6912}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[32, 24, 3, 3], stride=[216, 1, 72, 24])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (6912, 1)
op5.sizes = ([32, 24, 9], [])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 24, 3, 3], stride=[216, 9, 3, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[32, 24, 3, 3], stride=[216, 1, 72, 24])
class op5_loop_body:
    var_ranges = {z0: 32, z1: 24, z2: 9}
    index0 = 216*z0 + 9*z1 + z2
    index1 = 216*z0 + z1 + 24*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg6_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.convolution


op7_op8: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op7_op8.writes = 
    [   MemoryDep('buf7', c0, {c0: 4194304}, None),
        MemoryDep('buf8', c0, {c0: 4194304}, None)]
op7_op8.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 4194304}, None)]
op7_op8.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 131072, c1: 32}, None)]
op7_op8.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op7_op8.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 4194304}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 4194304}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 131072, c1: 32}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (4194304, 1)
op7.sizes = ([131072, 32], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
class op7_loop_body:
    var_ranges = {z0: 131072, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store
op7_op8.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 4194304}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 4194304}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (4194304, 1)
op8.sizes = ([4194304], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
class op8_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, mul, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 288*c0 + c1 + 32*c2, {c0: 64, c1: 32, c2: 9}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 18432}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (18432, 1)
op9.sizes = ([64, 32, 9], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
class op9_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11_op12: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op11_op12.writes = 
    [   MemoryDep('buf11', c0, {c0: 2097152}, None),
        MemoryDep('buf12', c0, {c0: 2097152}, None)]
op11_op12.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152}, None)]
op11_op12.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 32768, c1: 64}, None)]
op11_op12.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op11_op12.snodes[0] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 2097152}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 32768, c1: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (2097152, 1)
op11.sizes = ([32768, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op11_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, add_1, None)
        return store
op11_op12.snodes[1] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2097152}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 2097152}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (2097152, 1)
op12.sizes = ([2097152], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op12_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf12', get_index_2, mul, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14_op15: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op14_op15.writes = 
    [   MemoryDep('buf14', c0, {c0: 2097152}, None),
        MemoryDep('buf15', c0, {c0: 2097152}, None)]
op14_op15.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 2097152}, None)]
op14_op15.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg19_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 32768, c1: 64}, None)]
op14_op15.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op14_op15.snodes[0] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 2097152}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 2097152}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg19_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 32768, c1: 64}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (2097152, 1)
op14.sizes = ([32768, 64], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op14_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf14', get_index_5, add_1, None)
        return store
op14_op15.snodes[1] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 2097152}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (2097152, 1)
op15.sizes = ([2097152], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op15_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf15', get_index_2, mul, None)
        return store


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op16.unmet_dependencies = []
op16.met_dependencies = [MemoryDep('arg21_1', c0, {c0: 36864}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (36864, 1)
op16.sizes = ([64, 64, 9], [])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op16_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg21_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf16', get_index_1, load, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf15', mode=None), StarDep(name='buf16', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 2097152}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 2097152}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg23_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg24_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 32768, c1: 64}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (2097152, 1)
op18.sizes = ([32768, 64], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op18_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf18', get_index_5, add_1, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 16384}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', 8192*c0 + c1 + 64*c2, {c0: 256, c1: 64, c2: 128}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1, 32], stride=[2048, 1, 16384, 16384, 64])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (16384, 128)
op19.sizes = ([256, 64], [128])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1, 32], stride=[2048, 1, 16384, 16384, 64])
class op19_loop_body:
    var_ranges = {z0: 256, z1: 64, z2: 128}
    index0 = 8192*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction


op20_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op20_op21.writes = 
    [   MemoryDep('buf20', c0, {c0: 512}, None),
        MemoryDep('buf21', c0, {c0: 512}, None)]
op20_op21.unmet_dependencies = [MemoryDep('buf19', 2048*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 32}, None)]
op20_op21.met_dependencies = []
op20_op21.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20_op21.snodes[0] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 512}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', 2048*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 32}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (512, 32)
op20.sizes = ([8, 64], [32])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1, 32], stride=[2048, 1, 16384, 16384, 64])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 32}
    index0 = 2048*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_1, reduction)
        return store_reduction
op20_op21.snodes[1] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 512}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 512}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (512, 1)
op21.sizes = ([512], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op21_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf21', get_index_1, truediv, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 64}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 64}, None)]
op23.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 8, c1: 8}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (64, 1)
op23.sizes = ([8, 8], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, relu, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 2097152}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 2097152}, None),
        MemoryDep('buf24', 64*c0 + c2, {c0: 8, c1: 4096, c2: 64}, None)]
op25.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 32768, c1: 64}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (2097152, 1)
op25.sizes = ([8, 4096, 64], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 4096, z2: 64}
    index0 = 262144*z0 + 64*z1 + z2
    index1 = 64*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf24', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg29_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf25', get_index_4, mul_1, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op27.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op28_op29.writes = 
    [   MemoryDep('buf28', c0, {c0: 8388608}, None),
        MemoryDep('buf29', c0, {c0: 8388608}, None)]
op28_op29.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 8388608}, None),
        MemoryDep('buf27', c0, {c0: 8388608}, None)]
op28_op29.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg32_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg36_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg37_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 32768, c1: 256}, None)]
op28_op29.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op28_op29.snodes[0] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 8388608}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 8388608}, None),
        MemoryDep('buf27', c0, {c0: 8388608}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg32_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg36_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg37_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 32768, c1: 256}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (8388608, 1)
op28.sizes = ([32768, 256], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op28_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg33_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg34_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf27', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg36_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg37_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg38_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg39_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf28', get_index_10, add_4, None)
        return store
op28_op29.snodes[1] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 8388608}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 8388608}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (8388608, 1)
op29.sizes = ([8388608], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op29_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf28', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf29', get_index_2, mul, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31_op32: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op31_op32.writes = 
    [   MemoryDep('buf31', c0, {c0: 2097152}, None),
        MemoryDep('buf32', c0, {c0: 2097152}, None)]
op31_op32.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 2097152}, None)]
op31_op32.met_dependencies = 
    [   MemoryDep('arg41_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg42_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg43_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 64}, None)]
op31_op32.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31_op32.snodes[0] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2097152}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 2097152}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg41_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg42_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg43_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 64}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (2097152, 1)
op31.sizes = ([32768, 64], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op31_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg43_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg44_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf31', get_index_5, add_1, None)
        return store
op31_op32.snodes[1] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 2097152}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 2097152}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (2097152, 1)
op32.sizes = ([2097152], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op32_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf32', get_index_2, mul, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op33.unmet_dependencies = []
op33.met_dependencies = [MemoryDep('arg45_1', c0, {c0: 36864}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (36864, 1)
op33.sizes = ([64, 64, 9], [])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op33_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg45_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, load, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None), StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2097152}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 2097152}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg47_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg48_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg49_1', c1, {c0: 32768, c1: 64}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (2097152, 1)
op35.sizes = ([32768, 64], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op35_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg48_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg49_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, add_1, None)
        return store


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 16384}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', 8192*c0 + c1 + 64*c2, {c0: 256, c1: 64, c2: 128}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1, 32], stride=[2048, 1, 16384, 16384, 64])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (16384, 128)
op36.sizes = ([256, 64], [128])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1, 32], stride=[2048, 1, 16384, 16384, 64])
class op36_loop_body:
    var_ranges = {z0: 256, z1: 64, z2: 128}
    index0 = 8192*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_2, reduction)
        return store_reduction


op37_op38: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op37_op38.writes = 
    [   MemoryDep('buf37', c0, {c0: 512}, None),
        MemoryDep('buf38', c0, {c0: 512}, None)]
op37_op38.unmet_dependencies = [MemoryDep('buf36', 2048*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 32}, None)]
op37_op38.met_dependencies = []
op37_op38.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37_op38.snodes[0] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 512}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', 2048*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 32}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (512, 32)
op37.sizes = ([8, 64], [32])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1, 32], stride=[2048, 1, 16384, 16384, 64])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 32}
    index0 = 2048*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf37', get_index_1, reduction)
        return store_reduction
op37_op38.snodes[1] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 512}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 512}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (512, 1)
op38.sizes = ([512], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 512, 512])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op38_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf38', get_index_1, truediv, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelAlloc)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelAlloc
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.node.kernel = extern_kernels.convolution


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 64}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 64}, None)]
op40.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 8, c1: 8}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (64, 1)
op40.sizes = ([8, 8], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf40', get_index_2, relu, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2097152}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 2097152}, None),
        MemoryDep('buf41', 64*c0 + c2, {c0: 8, c1: 4096, c2: 64}, None)]
op42.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 32768, c1: 64}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (2097152, 1)
op42.sizes = ([8, 4096, 64], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 4096, z2: 64}
    index0 = 262144*z0 + 64*z1 + z2
    index1 = 64*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf41', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg53_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf42', get_index_4, mul_1, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelAlloc)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelAlloc
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.node.kernel = extern_kernels.convolution


op44_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op44_op45.writes = 
    [   MemoryDep('buf44', c0, {c0: 8388608}, None),
        MemoryDep('buf45', c0, {c0: 8388608}, None)]
op44_op45.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 8388608}, None),
        MemoryDep('buf43', c0, {c0: 8388608}, None)]
op44_op45.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg57_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None)]
op44_op45.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
    ]
]
op44_op45.snodes[0] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 8388608}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 8388608}, None),
        MemoryDep('buf43', c0, {c0: 8388608}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg57_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (8388608, 1)
op44.sizes = ([32768, 256], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op44_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg58_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf29', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf44', get_index_6, add_2, None)
        return store
op44_op45.snodes[1] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 8388608}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 8388608}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (8388608, 1)
op45.sizes = ([8388608], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op45_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, mul, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47_op48: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op47_op48.writes = 
    [   MemoryDep('buf47', c0, {c0: 4194304}, None),
        MemoryDep('buf48', c0, {c0: 4194304}, None)]
op47_op48.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 4194304}, None)]
op47_op48.met_dependencies = 
    [   MemoryDep('arg60_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg61_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg62_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 32768, c1: 128}, None)]
op47_op48.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op47_op48.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 4194304}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 4194304}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg60_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg61_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg62_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 32768, c1: 128}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (4194304, 1)
op47.sizes = ([32768, 128], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op47_loop_body:
    var_ranges = {z0: 32768, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg60_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg62_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg63_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_1, None)
        return store
op47_op48.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 4194304}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 4194304}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (4194304, 1)
op48.sizes = ([4194304], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op48_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf47', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, mul, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op49.unmet_dependencies = []
op49.met_dependencies = [MemoryDep('arg64_1', c0, {c0: 147456}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (147456, 1)
op49.sizes = ([128, 128, 9], [])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op49_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg64_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf49', get_index_1, load, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 1048576}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 1048576}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg65_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg66_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg67_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg68_1', c1, {c0: 8192, c1: 128}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (1048576, 1)
op51.sizes = ([8192, 128], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op51_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg68_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, add_1, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 8192}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', 16384*c0 + c1 + 128*c2, {c0: 64, c1: 128, c2: 128}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1, 8], stride=[1024, 1, 8192, 8192, 128])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (8192, 128)
op52.sizes = ([64, 128], [128])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1, 8], stride=[1024, 1, 8192, 8192, 128])
class op52_loop_body:
    var_ranges = {z0: 64, z1: 128, z2: 128}
    index0 = 16384*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_2, reduction)
        return store_reduction


op53_op54: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op53_op54.writes = 
    [   MemoryDep('buf53', c0, {c0: 1024}, None),
        MemoryDep('buf54', c0, {c0: 1024}, None)]
op53_op54.unmet_dependencies = [MemoryDep('buf52', 1024*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 8}, None)]
op53_op54.met_dependencies = []
op53_op54.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53_op54.snodes[0] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 1024}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', 1024*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 8}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (1024, 8)
op53.sizes = ([8, 128], [8])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1, 8], stride=[1024, 1, 8192, 8192, 128])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 8}
    index0 = 1024*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, reduction)
        return store_reduction
op53_op54.snodes[1] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1024}, None)]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 1024}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1024, 1)
op54.sizes = ([1024], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op54_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, truediv, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.convolution


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 64}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 64}, None)]
op56.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 8, c1: 8}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (64, 1)
op56.sizes = ([8, 8], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, relu, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelAlloc)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelAlloc
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = extern_kernels.convolution


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1048576}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 1048576}, None),
        MemoryDep('buf57', 128*c0 + c2, {c0: 8, c1: 1024, c2: 128}, None)]
op58.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 8192, c1: 128}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1048576, 1)
op58.sizes = ([8, 1024, 128], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 128}
    index0 = 131072*z0 + 128*z1 + z2
    index1 = 128*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg72_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf58', get_index_4, mul_1, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op60.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61_op62: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op61_op62.writes = 
    [   MemoryDep('buf61', c0, {c0: 4194304}, None),
        MemoryDep('buf62', c0, {c0: 4194304}, None)]
op61_op62.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 4194304}, None),
        MemoryDep('buf60', c0, {c0: 4194304}, None)]
op61_op62.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg76_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg77_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg79_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg80_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg81_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg82_1', c1, {c0: 8192, c1: 512}, None)]
op61_op62.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op61_op62.snodes[0] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 4194304}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 4194304}, None),
        MemoryDep('buf60', c0, {c0: 4194304}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg76_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg77_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg79_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg80_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg81_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg82_1', c1, {c0: 8192, c1: 512}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (4194304, 1)
op61.sizes = ([8192, 512], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op61_loop_body:
    var_ranges = {z0: 8192, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg75_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf60', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg79_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg80_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg81_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg82_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf61', get_index_10, add_4, None)
        return store
op61_op62.snodes[1] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 4194304}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 4194304}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (4194304, 1)
op62.sizes = ([4194304], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op62_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf62', get_index_2, mul, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op64_op65.writes = 
    [   MemoryDep('buf64', c0, {c0: 1048576}, None),
        MemoryDep('buf65', c0, {c0: 1048576}, None)]
op64_op65.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 1048576}, None)]
op64_op65.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg85_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg86_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg87_1', c1, {c0: 8192, c1: 128}, None)]
op64_op65.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op64_op65.snodes[0] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 1048576}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 1048576}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg85_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg86_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg87_1', c1, {c0: 8192, c1: 128}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (1048576, 1)
op64.sizes = ([8192, 128], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op64_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg85_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf64', get_index_5, add_1, None)
        return store
op64_op65.snodes[1] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1048576}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 1048576}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1048576, 1)
op65.sizes = ([1048576], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op65_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf64', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf65', get_index_2, mul, None)
        return store


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op66.unmet_dependencies = []
op66.met_dependencies = [MemoryDep('arg88_1', c0, {c0: 147456}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (147456, 1)
op66.sizes = ([128, 128, 9], [])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op66_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg88_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf66', get_index_1, load, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf65', mode=None), StarDep(name='buf66', mode=None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1048576}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 1048576}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg89_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg90_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg91_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg92_1', c1, {c0: 8192, c1: 128}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (1048576, 1)
op68.sizes = ([8192, 128], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op68_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg90_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg91_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg92_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, add_1, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 8192}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', 16384*c0 + c1 + 128*c2, {c0: 64, c1: 128, c2: 128}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1, 8], stride=[1024, 1, 8192, 8192, 128])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (8192, 128)
op69.sizes = ([64, 128], [128])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1, 8], stride=[1024, 1, 8192, 8192, 128])
class op69_loop_body:
    var_ranges = {z0: 64, z1: 128, z2: 128}
    index0 = 16384*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_2, reduction)
        return store_reduction


op70_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op70_op71.writes = 
    [   MemoryDep('buf70', c0, {c0: 1024}, None),
        MemoryDep('buf71', c0, {c0: 1024}, None)]
op70_op71.unmet_dependencies = [MemoryDep('buf69', 1024*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 8}, None)]
op70_op71.met_dependencies = []
op70_op71.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70_op71.snodes[0] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1024}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', 1024*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 8}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1024, 8)
op70.sizes = ([8, 128], [8])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1, 8], stride=[1024, 1, 8192, 8192, 128])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 8}
    index0 = 1024*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, reduction)
        return store_reduction
op70_op71.snodes[1] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 1024}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 1024}, None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (1024, 1)
op71.sizes = ([1024], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1024, 1024])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op71_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf71', get_index_1, truediv, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 64}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 64}, None)]
op73.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 8, c1: 8}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (64, 1)
op73.sizes = ([8, 8], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf73', get_index_2, relu, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1048576}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 1048576}, None),
        MemoryDep('buf74', 128*c0 + c2, {c0: 8, c1: 1024, c2: 128}, None)]
op75.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 8192, c1: 128}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1048576, 1)
op75.sizes = ([8, 1024, 128], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op75_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 128}
    index0 = 131072*z0 + 128*z1 + z2
    index1 = 128*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf74', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg96_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf75', get_index_4, mul_1, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op77_op78.writes = 
    [   MemoryDep('buf77', c0, {c0: 4194304}, None),
        MemoryDep('buf78', c0, {c0: 4194304}, None)]
op77_op78.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 4194304}, None),
        MemoryDep('buf76', c0, {c0: 4194304}, None)]
op77_op78.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg101_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg98_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg99_1', c1, {c0: 8192, c1: 512}, None)]
op77_op78.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op77_op78.snodes[0] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 4194304}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 4194304}, None),
        MemoryDep('buf76', c0, {c0: 4194304}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg101_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg98_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg99_1', c1, {c0: 8192, c1: 512}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (4194304, 1)
op77.sizes = ([8192, 512], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op77_loop_body:
    var_ranges = {z0: 8192, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg100_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf62', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf77', get_index_6, add_2, None)
        return store
op77_op78.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 4194304}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 4194304}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (4194304, 1)
op78.sizes = ([4194304], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op78_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf77', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, mul, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.node.kernel = extern_kernels.convolution


op80_op81: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op80_op81.writes = 
    [   MemoryDep('buf80', c0, {c0: 1048576}, None),
        MemoryDep('buf81', c0, {c0: 1048576}, None)]
op80_op81.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 1048576}, None)]
op80_op81.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg104_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg105_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg106_1', c1, {c0: 8192, c1: 128}, None)]
op80_op81.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80_op81.snodes[0] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 1048576}, None)]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 1048576}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg104_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg105_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg106_1', c1, {c0: 8192, c1: 128}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (1048576, 1)
op80.sizes = ([8192, 128], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op80_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg105_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg106_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf80', get_index_5, add_1, None)
        return store
op80_op81.snodes[1] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1048576}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 1048576}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (1048576, 1)
op81.sizes = ([1048576], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op81_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf81', get_index_2, mul, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.convolution


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 1048576}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', 393216*c0 + c1 + 384*c2, {c0: 8, c1: 128, c2: 1024}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (1048576, 1)
op83.sizes = ([8, 128, 1024], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op83_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 393216*z0 + z1 + 384*z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 1048576}, None)]
op84.unmet_dependencies = [   MemoryDep('buf82', 393216*c0 + c1 + 384*c2 + 128, {c0: 8, c1: 128, c2: 1024}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (1048576, 1)
op84.sizes = ([8, 128, 1024], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 393216*z0 + z1 + 384*z2 + 128
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf84', get_index_1, load, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf83', mode=None), StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.bmm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 1048576}, None)]
op86.unmet_dependencies = [   MemoryDep('buf83', 32768*c0 + c1 + 32*c2 + 1024*c3 + 1024*(((c1 + 32*c2)//1024)), {c0: 32, c1: 32, c2: 32, c3: 32}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[32, 32, 32, 32], stride=[32768, 1024, 32, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (1048576, 1)
op86.sizes = ([32, 32, 32, 32], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[32, 32, 32, 32], stride=[32768, 1024, 32, 1])
class op86_loop_body:
    var_ranges = {z0: 32, z1: 32, z2: 32, z3: 32}
    index0 = 32768*z0 + z1 + 32*z2 + 1024*z3 + 1024*(((z1 + 32*z2)//1024))
    index1 = 32768*z0 + 1024*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf86', get_index_1, load, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op87.node.kernel = extern_kernels.mm


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1048576}, None)]
op88.unmet_dependencies = [MemoryDep('buf83', 32768*c0 + c1 + 1024*c2, {c0: 32, c1: 1024, c2: 32}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[32, 32, 32, 32], stride=[32768, 1024, 32, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1048576, 1)
op88.sizes = ([32, 1024, 32], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[32, 32, 32, 32], stride=[32768, 1024, 32, 1])
class op88_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 32}
    index0 = 32768*z0 + z1 + 1024*z2
    index1 = 32768*z0 + 32*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf88', get_index_1, load, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.mm


op90_op91_op92: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op90_op91_op92.writes = 
    [   MemoryDep('buf90', c0, {c0: 32768}, None),
        MemoryDep('buf91', c0, {c0: 32768}, None),
        MemoryDep('buf92', c0, {c0: 33554432}, None)]
op90_op91_op92.unmet_dependencies = 
    [   MemoryDep('buf85', c0, {c0: 33554432}, None),
        MemoryDep('buf87', 64512*c0 + 63*(((63*((c1//32)) + (c2//32) + 31)//64)) + 2016*ModularIndexing(c1, 1, 32) + ModularIndexing(63*((c1//32)) + (c2//32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None),
        MemoryDep('buf89', 64512*c0 + 2016*((c1//32)) + 63*(((63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None)]
op90_op91_op92.met_dependencies = []
op90_op91_op92.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op90_op91_op92.snodes[0] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 32768}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf85', c0, {c0: 33554432}, None),
        MemoryDep('buf87', 64512*c0 + 63*(((63*((c1//32)) + (c2//32) + 31)//64)) + 2016*ModularIndexing(c1, 1, 32) + ModularIndexing(63*((c1//32)) + (c2//32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None),
        MemoryDep('buf89', 64512*c0 + 2016*((c1//32)) + 63*(((63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (32768, 1024)
op90.sizes = ([32, 1024], [1024])
buf85_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
class op90_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = 1048576*z0 + 1024*z1 + z2
    index1 = 63*((z1//32)) + (z2//32) + 31
    index2 = ModularIndexing(63*((z1//32)) + (z2//32) + 31, 1, 64)
    index3 = 64512*z0 + 63*(((63*((z1//32)) + (z2//32) + 31)//64)) + 2016*ModularIndexing(z1, 1, 32) + ModularIndexing(63*((z1//32)) + (z2//32) + 31, 1, 64)
    index4 = 63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31
    index5 = ModularIndexing(63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31, 1, 64)
    index6 = 64512*z0 + 2016*((z1//32)) + 63*(((63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31, 1, 64)
    index7 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2048, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(2048, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf90', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf87', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(63, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf89', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(63, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op90_op91_op92.snodes[1] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 32768}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf85', c0, {c0: 33554432}, None),
        MemoryDep('buf87', 64512*c0 + 63*(((63*((c1//32)) + (c2//32) + 31)//64)) + 2016*ModularIndexing(c1, 1, 32) + ModularIndexing(63*((c1//32)) + (c2//32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None),
        MemoryDep('buf89', 64512*c0 + 2016*((c1//32)) + 63*(((63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None),
        MemoryDep('buf90', c0, {c0: 32768}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (32768, 1024)
op91.sizes = ([32, 1024], [1024])
buf85_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
buf91_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
class op91_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = 1048576*z0 + 1024*z1 + z2
    index1 = 63*((z1//32)) + (z2//32) + 31
    index2 = ModularIndexing(63*((z1//32)) + (z2//32) + 31, 1, 64)
    index3 = 64512*z0 + 63*(((63*((z1//32)) + (z2//32) + 31)//64)) + 2016*ModularIndexing(z1, 1, 32) + ModularIndexing(63*((z1//32)) + (z2//32) + 31, 1, 64)
    index4 = 63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31
    index5 = ModularIndexing(63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31, 1, 64)
    index6 = 64512*z0 + 2016*((z1//32)) + 63*(((63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31, 1, 64)
    index7 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2048, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(2048, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf90', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf91', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf87', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(63, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf89', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(63, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op90_op91_op92.snodes[2] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 33554432}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf85', c0, {c0: 33554432}, None),
        MemoryDep('buf87', 64512*c0 + 63*(((63*((c1//32)) + (c2//32) + 31)//64)) + 2016*ModularIndexing(c1, 1, 32) + ModularIndexing(63*((c1//32)) + (c2//32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None),
        MemoryDep('buf89', 64512*c0 + 2016*((c1//32)) + 63*(((63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(c1, 1, 32) + ModularIndexing(c2, 1, 32) + 31, 1, 64), {c0: 32, c1: 1024, c2: 1024}, None),
        MemoryDep('buf90', c0, {c0: 32768}, None),
        MemoryDep('buf91', c0, {c0: 32768}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (33554432, 1)
op92.sizes = ([32, 1024, 1024], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[32768, 63], stride=[63, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
buf91_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1], stride=[1024, 1, 32768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
class op92_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = 1048576*z0 + 1024*z1 + z2
    index1 = 63*((z1//32)) + (z2//32) + 31
    index2 = ModularIndexing(63*((z1//32)) + (z2//32) + 31, 1, 64)
    index3 = 64512*z0 + 63*(((63*((z1//32)) + (z2//32) + 31)//64)) + 2016*ModularIndexing(z1, 1, 32) + ModularIndexing(63*((z1//32)) + (z2//32) + 31, 1, 64)
    index4 = 63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31
    index5 = ModularIndexing(63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31, 1, 64)
    index6 = 64512*z0 + 2016*((z1//32)) + 63*(((63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31)//64)) + ModularIndexing(63*ModularIndexing(z1, 1, 32) + ModularIndexing(z2, 1, 32) + 31, 1, 64)
    index7 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(0.1767766952966369, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2048, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(2048, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf90', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf91', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf87', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(63, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf89', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(63, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1048576}, None)]
op93.unmet_dependencies = [   MemoryDep('buf82', 393216*c0 + c1 + 384*c2 + 256, {c0: 8, c1: 128, c2: 1024}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1048576, 1)
op93.sizes = ([8, 128, 1024], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 32, 32], stride=[393216, 1, 12288, 384])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1024, 32, 1])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 1024}
    index0 = 393216*z0 + z1 + 384*z2 + 256
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf93', get_index_1, load, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf92', mode=None), StarDep(name='buf93', mode=None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 32], stride=[32768, 32, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.node.kernel = extern_kernels.bmm


op95_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op95_op96.writes = 
    [   MemoryDep('buf95', c0, {c0: 1048576}, None),
        MemoryDep('buf96', c0, {c0: 1048576}, None)]
op95_op96.unmet_dependencies = [   MemoryDep('buf94', 131072*c0 + 32*c1 + 32768*(((c1 + 1024*c2)//32768)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 1024, c2: 128}, None)]
op95_op96.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg111_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg112_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg113_1', c1, {c0: 8192, c1: 128}, None)]
op95_op96.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95_op96.snodes[0] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1048576}, None)]
op95.unmet_dependencies = [   MemoryDep('buf94', 131072*c0 + 32*c1 + 32768*(((c1 + 1024*c2)//32768)) + ModularIndexing(c2, 1, 32), {c0: 8, c1: 1024, c2: 128}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg111_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg112_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg113_1', c1, {c0: 8192, c1: 128}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1048576, 1)
op95.sizes = ([8, 1024, 128], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 32], stride=[32768, 32, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op95_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 128}
    index0 = 131072*z0 + 32*z1 + 32768*(((z1 + 1024*z2)//32768)) + ModularIndexing(z2, 1, 32)
    index1 = z2
    index2 = 131072*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg113_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf95', get_index_5, add_1, None)
        return store
op95_op96.snodes[1] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1048576}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 1048576}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1048576, 1)
op96.sizes = ([1048576], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op96_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf95', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf96', get_index_2, mul, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98_op99: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op98_op99.writes = 
    [   MemoryDep('buf98', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op98_op99.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 4194304}, None),
        MemoryDep('buf97', c0, {c0: 4194304}, None)]
op98_op99.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg116_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg117_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg118_1', c1, {c0: 8192, c1: 512}, None)]
op98_op99.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op98_op99.snodes[0] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 4194304}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 4194304}, None),
        MemoryDep('buf97', c0, {c0: 4194304}, None)]
op98.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg116_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg117_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg118_1', c1, {c0: 8192, c1: 512}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (4194304, 1)
op98.sizes = ([8192, 512], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op98_loop_body:
    var_ranges = {z0: 8192, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg117_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg118_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf78', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf98', get_index_6, add_2, None)
        return store
op98_op99.snodes[1] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 4194304}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 4194304}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (4194304, 1)
op99.sizes = ([4194304], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op99_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf99', get_index_2, mul, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101_op102: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op101_op102.writes = 
    [   MemoryDep('buf101', c0, {c0: 2097152}, None),
        MemoryDep('buf102', c0, {c0: 2097152}, None)]
op101_op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 2097152}, None)]
op101_op102.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg123_1', c1, {c0: 8192, c1: 256}, None)]
op101_op102.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op101_op102.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 2097152}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 2097152}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg123_1', c1, {c0: 8192, c1: 256}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (2097152, 1)
op101.sizes = ([8192, 256], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op101_loop_body:
    var_ranges = {z0: 8192, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg121_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg122_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg123_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store
op101_op102.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 2097152}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 2097152}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (2097152, 1)
op102.sizes = ([2097152], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op102_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf101', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf102', get_index_2, mul, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op103.unmet_dependencies = []
op103.met_dependencies = [MemoryDep('arg124_1', c0, {c0: 589824}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (589824, 1)
op103.sizes = ([256, 256, 9], [])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op103_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg124_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf103', get_index_1, load, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 524288}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 524288}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg126_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg127_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg128_1', c1, {c0: 2048, c1: 256}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (524288, 1)
op105.sizes = ([2048, 256], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op105_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg126_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg128_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, add_1, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 4096}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', 32768*c0 + c1 + 256*c2, {c0: 16, c1: 256, c2: 128}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1, 2], stride=[512, 1, 4096, 4096, 256])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (4096, 128)
op106.sizes = ([16, 256], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1, 2], stride=[512, 1, 4096, 4096, 256])
class op106_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 128}
    index0 = 32768*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_2, reduction)
        return store_reduction


op107_op108: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op107_op108.writes = 
    [   MemoryDep('buf107', c0, {c0: 2048}, None),
        MemoryDep('buf108', c0, {c0: 2048}, None)]
op107_op108.unmet_dependencies = [MemoryDep('buf106', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op107_op108.met_dependencies = []
op107_op108.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107_op108.snodes[0] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 2048}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (2048, 2)
op107.sizes = ([8, 256], [2])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1, 2], stride=[512, 1, 4096, 4096, 256])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 2}
    index0 = 512*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_1, reduction)
        return store_reduction
op107_op108.snodes[1] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 2048}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 2048}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (2048, 1)
op108.sizes = ([2048], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op108_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf108', get_index_1, truediv, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelAlloc)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelAlloc
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.convolution


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 128}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 128}, None)]
op110.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 8, c1: 16}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (128, 1)
op110.sizes = ([8, 16], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf110', get_index_2, relu, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelAlloc)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelAlloc
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.convolution


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 524288}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 524288}, None),
        MemoryDep('buf111', 256*c0 + c2, {c0: 8, c1: 256, c2: 256}, None)]
op112.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 2048, c1: 256}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (524288, 1)
op112.sizes = ([8, 256, 256], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 256*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg132_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf112', get_index_4, mul_1, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelAlloc)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelAlloc
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.convolution


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op114.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op115_op116.writes = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf116', c0, {c0: 2097152}, None)]
op115_op116.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf114', c0, {c0: 2097152}, None)]
op115_op116.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg135_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg136_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg137_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg139_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg142_1', c1, {c0: 2048, c1: 1024}, None)]
op115_op116.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op115_op116.snodes[0] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 2097152}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf114', c0, {c0: 2097152}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg135_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg136_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg137_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg139_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg142_1', c1, {c0: 2048, c1: 1024}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (2097152, 1)
op115.sizes = ([2048, 1024], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op115_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf114', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg139_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg140_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg141_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg142_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf115', get_index_10, add_4, None)
        return store
op115_op116.snodes[1] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 2097152}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 2097152}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (2097152, 1)
op116.sizes = ([2097152], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op116_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf116', get_index_2, mul, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op118_op119.writes = 
    [   MemoryDep('buf118', c0, {c0: 524288}, None),
        MemoryDep('buf119', c0, {c0: 524288}, None)]
op118_op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 524288}, None)]
op118_op119.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg146_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg147_1', c1, {c0: 2048, c1: 256}, None)]
op118_op119.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118_op119.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 524288}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 524288}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg146_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg147_1', c1, {c0: 2048, c1: 256}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (524288, 1)
op118.sizes = ([2048, 256], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op118_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg145_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg147_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_1, None)
        return store
op118_op119.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 524288}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 524288}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (524288, 1)
op119.sizes = ([524288], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op119_loop_body:
    var_ranges = {z0: 524288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf119', get_index_2, mul, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op120.unmet_dependencies = []
op120.met_dependencies = [MemoryDep('arg148_1', c0, {c0: 589824}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (589824, 1)
op120.sizes = ([256, 256, 9], [])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op120_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg148_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf120', get_index_1, load, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelAlloc)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ExternKernelAlloc
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.convolution


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 524288}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 524288}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg150_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg151_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg152_1', c1, {c0: 2048, c1: 256}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (524288, 1)
op122.sizes = ([2048, 256], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op122_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg150_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf122', get_index_5, add_1, None)
        return store


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 4096}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', 32768*c0 + c1 + 256*c2, {c0: 16, c1: 256, c2: 128}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1, 2], stride=[512, 1, 4096, 4096, 256])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (4096, 128)
op123.sizes = ([16, 256], [128])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1, 2], stride=[512, 1, 4096, 4096, 256])
class op123_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 128}
    index0 = 32768*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf123', get_index_2, reduction)
        return store_reduction


op124_op125: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op124_op125.writes = 
    [   MemoryDep('buf124', c0, {c0: 2048}, None),
        MemoryDep('buf125', c0, {c0: 2048}, None)]
op124_op125.unmet_dependencies = [MemoryDep('buf123', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op124_op125.met_dependencies = []
op124_op125.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124_op125.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2048}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2048, 2)
op124.sizes = ([8, 256], [2])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1, 2], stride=[512, 1, 4096, 4096, 256])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 2}
    index0 = 512*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf124', get_index_1, reduction)
        return store_reduction
op124_op125.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2048}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 2048}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (2048, 1)
op125.sizes = ([2048], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op125_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf125', get_index_1, truediv, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 128}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 128}, None)]
op127.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 8, c1: 16}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (128, 1)
op127.sizes = ([8, 16], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf127', get_index_2, relu, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 524288}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 524288}, None),
        MemoryDep('buf128', 256*c0 + c2, {c0: 8, c1: 256, c2: 256}, None)]
op129.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 2048, c1: 256}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (524288, 1)
op129.sizes = ([8, 256, 256], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 256*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf128', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg156_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf129', get_index_4, mul_1, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelAlloc)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelAlloc
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.convolution


op131_op132: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op131_op132.writes = 
    [   MemoryDep('buf131', c0, {c0: 2097152}, None),
        MemoryDep('buf132', c0, {c0: 2097152}, None)]
op131_op132.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 2097152}, None),
        MemoryDep('buf130', c0, {c0: 2097152}, None)]
op131_op132.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg160_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg161_1', c1, {c0: 2048, c1: 1024}, None)]
op131_op132.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op131_op132.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 2097152}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 2097152}, None),
        MemoryDep('buf130', c0, {c0: 2097152}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg160_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg161_1', c1, {c0: 2048, c1: 1024}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (2097152, 1)
op131.sizes = ([2048, 1024], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op131_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg160_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg161_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf116', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf131', get_index_6, add_2, None)
        return store
op131_op132.snodes[1] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 2097152}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 2097152}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (2097152, 1)
op132.sizes = ([2097152], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op132_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf132', get_index_2, mul, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134_op135: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op134_op135.writes = 
    [   MemoryDep('buf134', c0, {c0: 524288}, None),
        MemoryDep('buf135', c0, {c0: 524288}, None)]
op134_op135.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 524288}, None)]
op134_op135.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg164_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg165_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg166_1', c1, {c0: 2048, c1: 256}, None)]
op134_op135.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134_op135.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 524288}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 524288}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg164_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg165_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg166_1', c1, {c0: 2048, c1: 256}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (524288, 1)
op134.sizes = ([2048, 256], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op134_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg166_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add_1, None)
        return store
op134_op135.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 524288}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 524288}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (524288, 1)
op135.sizes = ([524288], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op135_loop_body:
    var_ranges = {z0: 524288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, mul, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 1, 12288, 768])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 524288}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', 196608*c0 + c1 + 768*c2, {c0: 8, c1: 256, c2: 256}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (524288, 1)
op137.sizes = ([8, 256, 256], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 1, 12288, 768])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 196608*z0 + z1 + 768*z2
    index1 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf137', get_index_1, load, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 524288}, None)]
op138.unmet_dependencies = [   MemoryDep('buf136', 196608*c0 + c1 + 768*c2 + 256, {c0: 8, c1: 256, c2: 256}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (524288, 1)
op138.sizes = ([8, 256, 256], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 1, 12288, 768])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 196608*z0 + z1 + 768*z2 + 256
    index1 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 524288}, None)]
op140.unmet_dependencies = [   MemoryDep('buf137', 16384*c0 + c1 + 16*c2 + 256*c3 + 256*(((c1 + 16*c2)//256)), {c0: 32, c1: 16, c2: 16, c3: 64}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 64], stride=[16384, 1024, 64, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (524288, 1)
op140.sizes = ([32, 16, 16, 64], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 64], stride=[16384, 1024, 64, 1])
class op140_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 16, z3: 64}
    index0 = 16384*z0 + z1 + 16*z2 + 256*z3 + 256*(((z1 + 16*z2)//256))
    index1 = 16384*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 524288}, None)]
op142.unmet_dependencies = [MemoryDep('buf137', 16384*c0 + c1 + 256*c2, {c0: 32, c1: 256, c2: 64}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 64], stride=[16384, 1024, 64, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (524288, 1)
op142.sizes = ([32, 256, 64], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 64], stride=[16384, 1024, 64, 1])
class op142_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 64}
    index0 = 16384*z0 + z1 + 256*z2
    index1 = 16384*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf142', get_index_1, load, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op143.node.kernel = extern_kernels.mm


op144_op145_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op144_op145_op146.writes = 
    [   MemoryDep('buf144', c0, {c0: 8192}, None),
        MemoryDep('buf145', c0, {c0: 8192}, None),
        MemoryDep('buf146', c0, {c0: 2097152}, None)]
op144_op145_op146.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf141', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf143', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None)]
op144_op145_op146.met_dependencies = []
op144_op145_op146.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op144_op145_op146.snodes[0] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 8192}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf141', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf143', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (8192, 256)
op144.sizes = ([32, 256], [256])
buf139_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op144_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf144', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf141', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf143', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op144_op145_op146.snodes[1] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 8192}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf141', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf143', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf144', c0, {c0: 8192}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (8192, 256)
op145.sizes = ([32, 256], [256])
buf139_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf145_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op145_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf144', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf145', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf141', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf143', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op144_op145_op146.snodes[2] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 2097152}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf141', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf143', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf144', c0, {c0: 8192}, None),
        MemoryDep('buf145', c0, {c0: 8192}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (2097152, 1)
op146.sizes = ([32, 256, 256], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf145_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
class op146_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf144', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf145', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf141', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf143', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 524288}, None)]
op147.unmet_dependencies = [   MemoryDep('buf136', 196608*c0 + c1 + 768*c2 + 512, {c0: 8, c1: 256, c2: 256}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (524288, 1)
op147.sizes = ([8, 256, 256], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 1, 12288, 768])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 196608*z0 + z1 + 768*z2 + 512
    index1 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf147', get_index_1, load, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None), StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 64], stride=[16384, 64, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = extern_kernels.bmm


op149_op150: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op149_op150.writes = 
    [   MemoryDep('buf149', c0, {c0: 524288}, None),
        MemoryDep('buf150', c0, {c0: 524288}, None)]
op149_op150.unmet_dependencies = [   MemoryDep('buf148', 65536*c0 + 64*c1 + 16384*(((c1 + 256*c2)//16384)) + ModularIndexing(c2, 1, 64), {c0: 8, c1: 256, c2: 256}, None)]
op149_op150.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg171_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg172_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg173_1', c1, {c0: 2048, c1: 256}, None)]
op149_op150.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149_op150.snodes[0] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 524288}, None)]
op149.unmet_dependencies = [   MemoryDep('buf148', 65536*c0 + 64*c1 + 16384*(((c1 + 256*c2)//16384)) + ModularIndexing(c2, 1, 64), {c0: 8, c1: 256, c2: 256}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg171_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg172_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg173_1', c1, {c0: 2048, c1: 256}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (524288, 1)
op149.sizes = ([8, 256, 256], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 64], stride=[16384, 64, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op149_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 64*z1 + 16384*(((z1 + 256*z2)//16384)) + ModularIndexing(z2, 1, 64)
    index1 = z2
    index2 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg172_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg173_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf149', get_index_5, add_1, None)
        return store
op149_op150.snodes[1] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 524288}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 524288}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (524288, 1)
op150.sizes = ([524288], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op150_loop_body:
    var_ranges = {z0: 524288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf150', get_index_2, mul, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelAlloc)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelAlloc
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op151.node.kernel = extern_kernels.convolution


op152_op153: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op152_op153.writes = 
    [   MemoryDep('buf152', c0, {c0: 2097152}, None),
        MemoryDep('buf153', c0, {c0: 2097152}, None)]
op152_op153.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 2097152}, None),
        MemoryDep('buf151', c0, {c0: 2097152}, None)]
op152_op153.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg176_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg177_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg178_1', c1, {c0: 2048, c1: 1024}, None)]
op152_op153.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op152_op153.snodes[0] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2097152}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 2097152}, None),
        MemoryDep('buf151', c0, {c0: 2097152}, None)]
op152.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg176_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg177_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg178_1', c1, {c0: 2048, c1: 1024}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (2097152, 1)
op152.sizes = ([2048, 1024], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op152_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg178_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf132', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf152', get_index_6, add_2, None)
        return store
op152_op153.snodes[1] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 2097152}, None)]
op153.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 2097152}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (2097152, 1)
op153.sizes = ([2097152], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op153_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf153', get_index_2, mul, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.convolution


op155_op156: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op155_op156.writes = 
    [   MemoryDep('buf155', c0, {c0: 1048576}, None),
        MemoryDep('buf156', c0, {c0: 1048576}, None)]
op155_op156.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1048576}, None)]
op155_op156.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg182_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg183_1', c1, {c0: 2048, c1: 512}, None)]
op155_op156.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155_op156.snodes[0] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 1048576}, None)]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1048576}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg182_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg183_1', c1, {c0: 2048, c1: 512}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (1048576, 1)
op155.sizes = ([2048, 512], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op155_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg181_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf155', get_index_5, add_1, None)
        return store
op155_op156.snodes[1] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 1048576}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 1048576}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (1048576, 1)
op156.sizes = ([1048576], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op156_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf156', get_index_2, mul, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 1, 24576, 1536])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op157.node.kernel = extern_kernels.convolution


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1048576}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', 393216*c0 + c1 + 1536*c2, {c0: 8, c1: 512, c2: 256}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf158.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (1048576, 1)
op158.sizes = ([8, 512, 256], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 1, 24576, 1536])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 393216*z0 + z1 + 1536*z2
    index1 = 131072*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf158', get_index_1, load, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 1048576}, None)]
op159.unmet_dependencies = [   MemoryDep('buf157', 393216*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 256}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (1048576, 1)
op159.sizes = ([8, 512, 256], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 1, 24576, 1536])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op159_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 393216*z0 + z1 + 1536*z2 + 512
    index1 = 131072*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op160.node.kernel = extern_kernels.bmm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 1048576}, None)]
op161.unmet_dependencies = [   MemoryDep('buf158', 32768*c0 + c1 + 16*c2 + 256*c3 + 256*(((c1 + 16*c2)//256)), {c0: 32, c1: 16, c2: 16, c3: 128}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 128], stride=[32768, 2048, 128, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (1048576, 1)
op161.sizes = ([32, 16, 16, 128], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 128], stride=[32768, 2048, 128, 1])
class op161_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 16, z3: 128}
    index0 = 32768*z0 + z1 + 16*z2 + 256*z3 + 256*(((z1 + 16*z2)//256))
    index1 = 32768*z0 + 2048*z1 + 128*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf161', get_index_1, load, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 1048576}, None)]
op163.unmet_dependencies = [MemoryDep('buf158', 32768*c0 + c1 + 256*c2, {c0: 32, c1: 256, c2: 128}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 128], stride=[32768, 2048, 128, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (1048576, 1)
op163.sizes = ([32, 256, 128], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 128], stride=[32768, 2048, 128, 1])
class op163_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 128}
    index0 = 32768*z0 + z1 + 256*z2
    index1 = 32768*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op164.node.kernel = extern_kernels.mm


op165_op166_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op165_op166_op167.writes = 
    [   MemoryDep('buf165', c0, {c0: 8192}, None),
        MemoryDep('buf166', c0, {c0: 8192}, None),
        MemoryDep('buf167', c0, {c0: 2097152}, None)]
op165_op166_op167.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 2097152}, None),
        MemoryDep('buf162', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf164', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None)]
op165_op166_op167.met_dependencies = []
op165_op166_op167.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op165_op166_op167.snodes[0] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 8192}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 2097152}, None),
        MemoryDep('buf162', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf164', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (8192, 256)
op165.sizes = ([32, 256], [256])
buf160_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op165_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        constant = ops.constant(0.08838834764831845, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf165', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf162', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf164', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op165_op166_op167.snodes[1] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 8192}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 2097152}, None),
        MemoryDep('buf162', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf164', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf165', c0, {c0: 8192}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (8192, 256)
op166.sizes = ([32, 256], [256])
buf160_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf166_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op166_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        constant = ops.constant(0.08838834764831845, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf165', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf166', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf162', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf164', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op165_op166_op167.snodes[2] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 2097152}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 2097152}, None),
        MemoryDep('buf162', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf164', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf165', c0, {c0: 8192}, None),
        MemoryDep('buf166', c0, {c0: 8192}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (2097152, 1)
op167.sizes = ([32, 256, 256], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf166_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
class op167_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        constant = ops.constant(0.08838834764831845, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf165', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf166', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf162', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf164', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1048576}, None)]
op168.unmet_dependencies = [   MemoryDep('buf157', 393216*c0 + c1 + 1536*c2 + 1024, {c0: 8, c1: 512, c2: 256}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (1048576, 1)
op168.sizes = ([8, 512, 256], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 1, 24576, 1536])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 393216*z0 + z1 + 1536*z2 + 1024
    index1 = 131072*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf168', get_index_1, load, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf167', mode=None), StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = extern_kernels.bmm


op170_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op170_op171.writes = 
    [   MemoryDep('buf170', c0, {c0: 262144}, None),
        MemoryDep('buf171', c0, {c0: 262144}, None)]
op170_op171.unmet_dependencies = 
    [   MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((16*c1 + c2 + 128*c3 + 8)//16384)) + ModularIndexing(16*c1 + c2 + 128*c3 + 8, 128, 128) + 2048, {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((16*c1 + c2 + 128*c3)//16384)) + ModularIndexing(16*c1 + c2 + 128*c3, 128, 128), {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((32*c1 + 2*c2 + 256*c3 + 1)//32768)) + ModularIndexing(32*c1 + 2*c2 + 256*c3 + 1, 256, 128) + 128, {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((32*c1 + 2*c2 + 256*c3 + 17)//32768)) + ModularIndexing(32*c1 + 2*c2 + 256*c3 + 17, 256, 128) + 2176, {c0: 8, c1: 8, c2: 8, c3: 512}, None)]
op170_op171.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg189_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg190_1', c1, {c0: 512, c1: 512}, None)]
op170_op171.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170_op171.snodes[0] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 262144}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((16*c1 + c2 + 128*c3 + 8)//16384)) + ModularIndexing(16*c1 + c2 + 128*c3 + 8, 128, 128) + 2048, {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((16*c1 + c2 + 128*c3)//16384)) + ModularIndexing(16*c1 + c2 + 128*c3, 128, 128), {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((32*c1 + 2*c2 + 256*c3 + 1)//32768)) + ModularIndexing(32*c1 + 2*c2 + 256*c3 + 1, 256, 128) + 128, {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf169', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((32*c1 + 2*c2 + 256*c3 + 17)//32768)) + ModularIndexing(32*c1 + 2*c2 + 256*c3 + 17, 256, 128) + 2176, {c0: 8, c1: 8, c2: 8, c3: 512}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg189_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg190_1', c1, {c0: 512, c1: 512}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (262144, 1)
op170.sizes = ([8, 8, 8, 512], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op170_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 8, z3: 512}
    index0 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((16*z1 + z2 + 128*z3)//16384)) + ModularIndexing(16*z1 + z2 + 128*z3, 128, 128)
    index1 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((32*z1 + 2*z2 + 256*z3 + 1)//32768)) + ModularIndexing(32*z1 + 2*z2 + 256*z3 + 1, 256, 128) + 128
    index2 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((16*z1 + z2 + 128*z3 + 8)//16384)) + ModularIndexing(16*z1 + z2 + 128*z3 + 8, 128, 128) + 2048
    index3 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((32*z1 + 2*z2 + 256*z3 + 17)//32768)) + ModularIndexing(32*z1 + 2*z2 + 256*z3 + 17, 256, 128) + 2176
    index4 = z3
    index5 = 32768*z0 + 4096*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf169', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf169', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf169', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg187_1', get_index_4)
        sub = ops.sub(mul, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg188_1', get_index_5)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(load_5, constant_1)
        sqrt = ops.sqrt(add_3)
        reciprocal = ops.reciprocal(sqrt)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(reciprocal, constant_2)
        mul_2 = ops.mul(sub, mul_1)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('arg189_1', get_index_6)
        mul_3 = ops.mul(mul_2, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('arg190_1', get_index_7)
        add_4 = ops.add(mul_3, load_7)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf170', get_index_8, add_4, None)
        return store
op170_op171.snodes[1] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 262144}, None)]
op171.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 262144}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (262144, 1)
op171.sizes = ([262144], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op171_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf171', get_index_2, mul, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op173: ExternKernelSchedulerNode(ExternKernelAlloc)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op173.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelAlloc
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.convolution


op174_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op174_op175.writes = 
    [   MemoryDep('buf174', c0, {c0: 786432}, None),
        MemoryDep('buf175', c0, {c0: 786432}, None)]
op174_op175.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 786432}, None),
        MemoryDep('buf173', c0, {c0: 786432}, None)]
op174_op175.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg193_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg194_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg195_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg197_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg198_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg199_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg200_1', c1, {c0: 512, c1: 1536}, None)]
op174_op175.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op174_op175.snodes[0] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 786432}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 786432}, None),
        MemoryDep('buf173', c0, {c0: 786432}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg193_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg194_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg195_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg197_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg198_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg199_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg200_1', c1, {c0: 512, c1: 1536}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (786432, 1)
op174.sizes = ([512, 1536], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
class op174_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf173', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg197_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg198_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg199_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg200_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf174', get_index_10, add_4, None)
        return store
op174_op175.snodes[1] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 786432}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 786432}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (786432, 1)
op175.sizes = ([786432], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
class op175_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf175', get_index_2, mul, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177_op178: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op177_op178.writes = 
    [   MemoryDep('buf177', c0, {c0: 262144}, None),
        MemoryDep('buf178', c0, {c0: 262144}, None)]
op177_op178.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 262144}, None)]
op177_op178.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg203_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 512, c1: 512}, None)]
op177_op178.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177_op178.snodes[0] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 262144}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 262144}, None)]
op177.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg203_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 512, c1: 512}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (262144, 1)
op177.sizes = ([512, 512], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op177_loop_body:
    var_ranges = {z0: 512, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf177', get_index_5, add_1, None)
        return store
op177_op178.snodes[1] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 262144}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 262144}, None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (262144, 1)
op178.sizes = ([262144], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op178_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf177', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf178', get_index_2, mul, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op179.node.kernel = extern_kernels.convolution


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 262144}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', 98304*c0 + c1 + 1536*c2, {c0: 8, c1: 512, c2: 64}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf180.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (262144, 1)
op180.sizes = ([8, 512, 64], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 98304*z0 + z1 + 1536*z2
    index1 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf180', get_index_1, load, None)
        return store


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 262144}, None)]
op181.unmet_dependencies = [   MemoryDep('buf179', 98304*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 64}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (262144, 1)
op181.sizes = ([8, 512, 64], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op181_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 98304*z0 + z1 + 1536*z2 + 512
    index1 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op182.node.kernel = extern_kernels.bmm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 262144}, None)]
op183.unmet_dependencies = [   MemoryDep('buf180', 8192*c0 + c1 + 8*c2 + 64*c3 + 64*(((c1 + 8*c2)//64)), {c0: 32, c1: 8, c2: 8, c3: 128}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 128], stride=[8192, 1024, 128, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (262144, 1)
op183.sizes = ([32, 8, 8, 128], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 128], stride=[8192, 1024, 128, 1])
class op183_loop_body:
    var_ranges = {z0: 32, z1: 8, z2: 8, z3: 128}
    index0 = 8192*z0 + z1 + 8*z2 + 64*z3 + 64*(((z1 + 8*z2)//64))
    index1 = 8192*z0 + 1024*z1 + 128*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op184.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 262144}, None)]
op185.unmet_dependencies = [MemoryDep('buf180', 8192*c0 + c1 + 64*c2, {c0: 32, c1: 64, c2: 128}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 128], stride=[8192, 1024, 128, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (262144, 1)
op185.sizes = ([32, 64, 128], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 128], stride=[8192, 1024, 128, 1])
class op185_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 128}
    index0 = 8192*z0 + z1 + 64*z2
    index1 = 8192*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187_op188_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op187_op188_op189.writes = 
    [   MemoryDep('buf187', c0, {c0: 2048}, None),
        MemoryDep('buf188', c0, {c0: 2048}, None),
        MemoryDep('buf189', c0, {c0: 131072}, None)]
op187_op188_op189.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 131072}, None),
        MemoryDep('buf184', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf186', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None)]
op187_op188_op189.met_dependencies = []
op187_op188_op189.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op187_op188_op189.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 2048}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 131072}, None),
        MemoryDep('buf184', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf186', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (2048, 64)
op187.sizes = ([32, 64], [64])
buf182_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op187_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 15*((z1//8)) + (z2//8) + 7
    index2 = ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index3 = 960*z0 + 15*(((15*((z1//8)) + (z2//8) + 7)//16)) + 120*ModularIndexing(z1, 1, 8) + ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index4 = 15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7
    index5 = ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index6 = 960*z0 + 120*((z1//8)) + 15*(((15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index7 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        constant = ops.constant(0.08838834764831845, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf187', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf184', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf186', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op187_op188_op189.snodes[1] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 2048}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 131072}, None),
        MemoryDep('buf184', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf186', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf187', c0, {c0: 2048}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (2048, 64)
op188.sizes = ([32, 64], [64])
buf182_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf188_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op188_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 15*((z1//8)) + (z2//8) + 7
    index2 = ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index3 = 960*z0 + 15*(((15*((z1//8)) + (z2//8) + 7)//16)) + 120*ModularIndexing(z1, 1, 8) + ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index4 = 15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7
    index5 = ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index6 = 960*z0 + 120*((z1//8)) + 15*(((15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index7 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        constant = ops.constant(0.08838834764831845, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf187', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf188', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf184', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf186', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4
op187_op188_op189.snodes[2] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 131072}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 131072}, None),
        MemoryDep('buf184', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf186', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf187', c0, {c0: 2048}, None),
        MemoryDep('buf188', c0, {c0: 2048}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (131072, 1)
op189.sizes = ([32, 64, 64], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf188_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op189_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 15*((z1//8)) + (z2//8) + 7
    index2 = ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index3 = 960*z0 + 15*(((15*((z1//8)) + (z2//8) + 7)//16)) + 120*ModularIndexing(z1, 1, 8) + ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index4 = 15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7
    index5 = ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index6 = 960*z0 + 120*((z1//8)) + 15*(((15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index7 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        constant = ops.constant(0.08838834764831845, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf187', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf188', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf184', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf186', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 262144}, None)]
op190.unmet_dependencies = [   MemoryDep('buf179', 98304*c0 + c1 + 1536*c2 + 1024, {c0: 8, c1: 512, c2: 64}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (262144, 1)
op190.sizes = ([8, 512, 64], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op190_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 98304*z0 + z1 + 1536*z2 + 1024
    index1 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf189', mode=None), StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 128], stride=[8192, 128, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.bmm


op192_op193: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op192_op193.writes = 
    [   MemoryDep('buf192', c0, {c0: 262144}, None),
        MemoryDep('buf193', c0, {c0: 262144}, None)]
op192_op193.unmet_dependencies = [   MemoryDep('buf191', 32768*c0 + 128*c1 + 8192*(((c1 + 64*c2)//8192)) + ModularIndexing(c2, 1, 128), {c0: 8, c1: 64, c2: 512}, None)]
op192_op193.met_dependencies = 
    [   MemoryDep('arg209_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg210_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg211_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 512}, None)]
op192_op193.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192_op193.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 262144}, None)]
op192.unmet_dependencies = [   MemoryDep('buf191', 32768*c0 + 128*c1 + 8192*(((c1 + 64*c2)//8192)) + ModularIndexing(c2, 1, 128), {c0: 8, c1: 64, c2: 512}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg209_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg210_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg211_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 512}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (262144, 1)
op192.sizes = ([8, 64, 512], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 128], stride=[8192, 128, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 512}
    index0 = 32768*z0 + 128*z1 + 8192*(((z1 + 64*z2)//8192)) + ModularIndexing(z2, 1, 128)
    index1 = z2
    index2 = 32768*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg211_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg212_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf192', get_index_5, add_1, None)
        return store
op192_op193.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 262144}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 262144}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (262144, 1)
op193.sizes = ([262144], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op193_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf192', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf193', get_index_2, mul, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op195_op196.writes = 
    [   MemoryDep('buf195', c0, {c0: 786432}, None),
        MemoryDep('buf196', c0, {c0: 786432}, None)]
op195_op196.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 786432}, None),
        MemoryDep('buf194', c0, {c0: 786432}, None)]
op195_op196.met_dependencies = 
    [   MemoryDep('arg214_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg215_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg216_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg217_1', c1, {c0: 512, c1: 1536}, None)]
op195_op196.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195_op196.snodes[0] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 786432}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 786432}, None),
        MemoryDep('buf194', c0, {c0: 786432}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg214_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg215_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg216_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg217_1', c1, {c0: 512, c1: 1536}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (786432, 1)
op195.sizes = ([512, 1536], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
class op195_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg214_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg215_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg217_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf175', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf195', get_index_6, add_2, None)
        return store
op195_op196.snodes[1] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 786432}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 786432}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (786432, 1)
op196.sizes = ([786432], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 1, 12288, 1536])
class op196_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf196', get_index_2, mul, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg218_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 8, 8], stride=[81920, 1, 10240, 1280])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 655360}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 655360}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 512, c1: 1280}, None),
        MemoryDep('arg220_1', c1, {c0: 512, c1: 1280}, None),
        MemoryDep('arg221_1', c1, {c0: 512, c1: 1280}, None),
        MemoryDep('arg222_1', c1, {c0: 512, c1: 1280}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 8, 8], stride=[81920, 1, 10240, 1280])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (655360, 1)
op198.sizes = ([512, 1280], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 8, 8], stride=[81920, 1, 10240, 1280])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 8, 8], stride=[81920, 1, 10240, 1280])
class op198_loop_body:
    var_ranges = {z0: 512, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg219_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg220_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg221_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg222_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf198', get_index_5, add_1, None)
        return store


op199_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op199_op200.writes = 
    [   MemoryDep('buf199', c0, {c0: 10240}, None),
        MemoryDep('buf200', c0, {c0: 10240}, None)]
op199_op200.unmet_dependencies = [MemoryDep('buf198', 81920*c0 + c1 + 1280*c2, {c0: 8, c1: 1280, c2: 64}, None)]
op199_op200.met_dependencies = []
op199_op200.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199_op200.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 10240}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', 81920*c0 + c1 + 1280*c2, {c0: 8, c1: 1280, c2: 64}, None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (10240, 64)
op199.sizes = ([8, 1280], [64])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 8, 8], stride=[81920, 1, 10240, 1280])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op199_loop_body:
    var_ranges = {z0: 8, z1: 1280, z2: 64}
    index0 = 81920*z0 + z1 + 1280*z2
    index1 = 1280*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf199', get_index_2, reduction)
        return store_reduction
op199_op200.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 10240}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 10240}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (10240, 1)
op200.sizes = ([10240], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op200_loop_body:
    var_ranges = {z0: 10240}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf200', get_index_1, truediv, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg223_1', mode=None), StarDep(name='arg224_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf201.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op201.node.kernel = extern_kernels.addmm



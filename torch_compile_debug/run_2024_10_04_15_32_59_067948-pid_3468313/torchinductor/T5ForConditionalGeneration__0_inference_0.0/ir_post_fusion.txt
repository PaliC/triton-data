op0_op1: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op0_op1.writes = 
    [   MemoryDep('buf0', c0, {c0: 4096}, None),
        MemoryDep('buf1', c0, {c0: 2097152}, None)]
op0_op1.unmet_dependencies = []
op0_op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg58_1', c1, {c0: 4096, c1: 512}, None)]
op0_op1.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op0_op1.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 4096}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (4096, 512)
op0.sizes = ([4096], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op0_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        mul = ops.mul(load_1, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_2, reduction)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp9 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 * tmp6
            tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
            tmp10 = _tmp9 + tmp8
            _tmp9 = tl.where(rmask, tmp10, _tmp9)
        tmp9 = tl.sum(_tmp9, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)
op0_op1.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 2097152}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 4096}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg58_1', c1, {c0: 4096, c1: 512}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (2097152, 1)
op1.sizes = ([4096, 512], [])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op1_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg58_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf0', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf1', get_index_4, mul_1, None)
        return store
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 32128, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 32128), "index out of bounds: 0 <= tmp5 < 32128")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op0_op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp9 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 * tmp6
            tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
            tmp10 = _tmp9 + tmp8
            _tmp9 = tl.where(rmask, tmp10, _tmp9)
        tmp9 = tl.sum(_tmp9, 1)[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp13 = tmp0 + tmp12
            tmp14 = tmp0 < 0
            tmp15 = tl.where(tmp14, tmp13, tmp0)
            tl.device_assert((0 <= tmp15) & (tmp15 < 32128), "index out of bounds: 0 <= tmp15 < 32128")
            tmp17 = tl.load(in_ptr1 + (r1 + (512*tmp15)), rmask, eviction_policy='evict_last', other=0.0)
            tmp18 = 512.0
            tmp19 = tmp9 / tmp18
            tmp20 = 1e-06
            tmp21 = tmp19 + tmp20
            tmp22 = libdevice.rsqrt(tmp21)
            tmp23 = tmp17 * tmp22
            tmp24 = tmp11 * tmp23
            tl.store(out_ptr1 + (r1 + (512*x0)), tmp24, rmask)


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.node.kernel = extern_kernels.mm


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op3.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.node.kernel = extern_kernels.mm


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 2097152}, None)]
op4.unmet_dependencies = [   MemoryDep('buf2', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (2097152, 1)
op4.sizes = ([4, 8, 1024, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op4_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 2097152}, None)]
op5.unmet_dependencies = [MemoryDep('buf3', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (2097152, 1)
op5.sizes = ([4, 512, 1024], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op5_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.bmm


op7_op8_op9_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op7_op8_op9_op11.writes = 
    [   MemoryDep('buf11', c0, {c0: 33554432}, None),
        MemoryDep('buf7', c0, {c0: 33554432}, None),
        MemoryDep('buf8', c0, {c0: 32768}, None),
        MemoryDep('buf9', c0, {c0: 32768}, None)]
op7_op8_op9_op11.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 33554432}, None)]
op7_op8_op9_op11.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op7_op8_op9_op11.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op7_op8_op9_op11.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 33554432}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 33554432}, None)]
op7.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (33554432, 1)
op7.sizes = ([4, 8, 1024, 1024], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op7_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 8*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg57_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf7', get_index_7, add_3, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op7_op8_op9_op11.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 32768}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 33554432}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (32768, 1024)
op8.sizes = ([32768], [1024])
buf7_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op8_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, reduction)
        return store_reduction
op8 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op7_op8_op9_op11.snodes[2] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 32768}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 33554432}, None),
        MemoryDep('buf8', c0, {c0: 32768}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (32768, 1024)
op9.sizes = ([32768], [1024])
buf7_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf9_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op9_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_2, reduction)
        return store_reduction
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op7_op8_op9_op11.snodes[3] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 33554432}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 33554432}, None),
        MemoryDep('buf8', c0, {c0: 32768}, None),
        MemoryDep('buf9', c0, {c0: 32768}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (33554432, 1)
op11.sizes = ([32768, 1024], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf9_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf11_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op11_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf9', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf11', get_index_3, truediv, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op7_op8_op9_op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [RBLOCK])
        tmp37 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp35, 0))
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [RBLOCK])
        tmp42 = triton_helpers.promote_to_tensor(tl.sum(tmp40, 0))
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp43, None)


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op10.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2097152}, None)]
op12.unmet_dependencies = [   MemoryDep('buf10', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (2097152, 1)
op12.sizes = ([4, 8, 1024, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op12_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.bmm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 2097152}, None)]
op14.unmet_dependencies = [   MemoryDep('buf13', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (2097152, 1)
op14.sizes = ([4, 1024, 8, 64], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op14_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op19_op17_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op16_op19_op17_op20.writes = 
    [   MemoryDep('buf16', c0, {c0: 4096}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None),
        MemoryDep('buf19', c0, {c0: 4096}, None),
        MemoryDep('buf20', c0, {c0: 2097152}, None)]
op16_op19_op17_op20.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 2097152}, None)]
op16_op19_op17_op20.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg63_1', c1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg7_1', c1, {c0: 4096, c1: 512}, None)]
op16_op19_op17_op20.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op16_op19_op17_op20.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 4096}, None)]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 2097152}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (4096, 512)
op16.sizes = ([4096], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op16_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        add = ops.add(load_1, load_2)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf16', get_index_3, reduction)
        return store_reduction
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op16_op19_op17_op20.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 4096}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (4096, 512)
op19.sizes = ([4096], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op19_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        mul = ops.mul(load_1, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp9 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 * tmp6
            tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
            tmp10 = _tmp9 + tmp8
            _tmp9 = tl.where(rmask, tmp10, _tmp9)
        tmp9 = tl.sum(_tmp9, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)
op16_op19_op17_op20.snodes[2] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 2097152}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf16', c0, {c0: 4096}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg63_1', c1, {c0: 4096, c1: 512}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (2097152, 1)
op17.sizes = ([4096, 512], [])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op17_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg63_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf15', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf16', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf17', get_index_5, mul_1, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 32128, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 32128), "index out of bounds: 0 <= tmp5 < 32128")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = 512.0
        tmp12 = tmp10 / tmp11
        tmp13 = 1e-06
        tmp14 = tmp12 + tmp13
        tmp15 = libdevice.rsqrt(tmp14)
        tmp16 = tmp9 * tmp15
        tmp17 = tmp0 * tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op16_op19_op17_op20.snodes[3] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 2097152}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 4096}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg7_1', c1, {c0: 4096, c1: 512}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (2097152, 1)
op20.sizes = ([4096, 512], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf20_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op20_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf19', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf20', get_index_4, mul_1, None)
        return store
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 32128, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 32128), "index out of bounds: 0 <= tmp5 < 32128")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op16_op19_op17_op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, out_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tmp6 + tmp7
            tmp9 = tmp8 * tmp8
            tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
            tmp12 = _tmp11 + tmp10
            _tmp11 = tl.where(rmask, tmp12, _tmp11)
            tmp13 = tmp6 * tmp6
            tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
            tmp16 = _tmp15 + tmp14
            _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tmp11 = tl.sum(_tmp11, 1)[:, None]
        tmp15 = tl.sum(_tmp15, 1)[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp17 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp24 = tl.load(in_ptr2 + (r1 + (512*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp33 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp18 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp19 = tmp0 + tmp18
            tmp20 = tmp0 < 0
            tmp21 = tl.where(tmp20, tmp19, tmp0)
            tl.device_assert((0 <= tmp21) & (tmp21 < 32128), "index out of bounds: 0 <= tmp21 < 32128")
            tmp23 = tl.load(in_ptr1 + (r1 + (512*tmp21)), rmask, eviction_policy='evict_last', other=0.0)
            tmp25 = tmp23 + tmp24
            tmp26 = 512.0
            tmp27 = tmp11 / tmp26
            tmp28 = 1e-06
            tmp29 = tmp27 + tmp28
            tmp30 = libdevice.rsqrt(tmp29)
            tmp31 = tmp25 * tmp30
            tmp32 = tmp17 * tmp31
            tmp34 = tmp15 / tmp26
            tmp35 = tmp34 + tmp28
            tmp36 = libdevice.rsqrt(tmp35)
            tmp37 = tmp23 * tmp36
            tmp38 = tmp33 * tmp37
            tl.store(out_ptr2 + (r1 + (512*x0)), tmp32, rmask)
            tl.store(out_ptr3 + (r1 + (512*x0)), tmp38, rmask)


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op18.node.kernel = extern_kernels.mm


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg2_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.node.kernel = extern_kernels.mm


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op22.met_dependencies = [StarDep(name='arg3_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2097152}, None)]
op23.unmet_dependencies = [   MemoryDep('buf21', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2097152, 1)
op23.sizes = ([4, 8, 1024, 64], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op23_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf23', get_index_1, load, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 2097152}, None)]
op24.unmet_dependencies = [MemoryDep('buf22', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (2097152, 1)
op24.sizes = ([4, 512, 1024], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op24_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf24', get_index_1, load, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf23', mode=None), StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.bmm


op26_op27_op28_op30: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op26_op27_op28_op30.writes = 
    [   MemoryDep('buf26', c0, {c0: 33554432}, None),
        MemoryDep('buf27', c0, {c0: 32768}, None),
        MemoryDep('buf28', c0, {c0: 32768}, None),
        MemoryDep('buf30', c0, {c0: 33554432}, None)]
op26_op27_op28_op30.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 33554432}, None)]
op26_op27_op28_op30.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op26_op27_op28_op30.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
    ]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op26_op27_op28_op30.snodes[0] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 33554432}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 33554432}, None)]
op26.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (33554432, 1)
op26.sizes = ([4, 8, 1024, 1024], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op26_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 8*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf26', get_index_6, add_4, None)
        return store
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op26_op27_op28_op30.snodes[1] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 32768}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 33554432}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (32768, 1024)
op27.sizes = ([32768], [1024])
buf26_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op27_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, reduction)
        return store_reduction
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op26_op27_op28_op30.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 32768}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 33554432}, None),
        MemoryDep('buf27', c0, {c0: 32768}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (32768, 1024)
op28.sizes = ([32768], [1024])
buf26_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op28_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_2, reduction)
        return store_reduction
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op26_op27_op28_op30.snodes[3] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 33554432}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 33554432}, None),
        MemoryDep('buf27', c0, {c0: 32768}, None),
        MemoryDep('buf28', c0, {c0: 32768}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (33554432, 1)
op30.sizes = ([32768, 1024], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op30_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf30', get_index_3, truediv, None)
        return store
op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op26_op27_op28_op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [RBLOCK])
        tmp36 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp34, 0))
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [RBLOCK])
        tmp41 = triton_helpers.promote_to_tensor(tl.sum(tmp39, 0))
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp42, None)


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op29.met_dependencies = [StarDep(name='arg4_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2097152}, None)]
op31.unmet_dependencies = [   MemoryDep('buf29', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (2097152, 1)
op31.sizes = ([4, 8, 1024, 64], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op31_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None), StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = extern_kernels.bmm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2097152}, None)]
op33.unmet_dependencies = [   MemoryDep('buf32', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (2097152, 1)
op33.sizes = ([4, 1024, 8, 64], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op33_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, load, None)
        return store
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.mm


op35_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op35_op36.writes = 
    [   MemoryDep('buf35', c0, {c0: 4096}, None),
        MemoryDep('buf36', c0, {c0: 2097152}, None)]
op35_op36.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 2097152}, None)]
op35_op36.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg10_1', c1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None)]
op35_op36.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35_op36.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 4096}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 2097152}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (4096, 512)
op35.sizes = ([4096], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op35_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        add = ops.add(load_1, load_2)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf35', get_index_3, reduction)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op35_op36.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 2097152}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 2097152}, None),
        MemoryDep('buf35', c0, {c0: 4096}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg10_1', c1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (2097152, 1)
op36.sizes = ([4096, 512], [])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op36_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf34', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf35', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf36', get_index_5, mul_1, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 32128, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 32128), "index out of bounds: 0 <= tmp5 < 32128")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = 512.0
        tmp12 = tmp10 / tmp11
        tmp13 = 1e-06
        tmp14 = tmp12 + tmp13
        tmp15 = libdevice.rsqrt(tmp14)
        tmp16 = tmp9 * tmp15
        tmp17 = tmp0 * tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op35_op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 8388608}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 8388608}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (8388608, 1)
op38.sizes = ([8388608], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op38_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf38', get_index_1, relu, None)
        return store
op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.mm


op40_op41: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op40_op41.writes = 
    [   MemoryDep('buf40', c0, {c0: 4096}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None)]
op40_op41.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 2097152}, None),
        MemoryDep('buf39', c0, {c0: 2097152}, None)]
op40_op41.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg15_1', c1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None)]
op40_op41.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op40_op41.snodes[0] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 4096}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 2097152}, None),
        MemoryDep('buf39', c0, {c0: 2097152}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (4096, 512)
op40.sizes = ([4096], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op40_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf39', get_index_3)
        add_1 = ops.add(add, load_3)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf40', get_index_4, reduction)
        return store_reduction
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)
op40_op41.snodes[1] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 2097152}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 2097152}, None),
        MemoryDep('buf39', c0, {c0: 2097152}, None),
        MemoryDep('buf40', c0, {c0: 4096}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg15_1', c1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (2097152, 1)
op41.sizes = ([4096, 512], [])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf41_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op41_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg15_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf34', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf39', get_index_4)
        add_1 = ops.add(add, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf40', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf41', get_index_6, mul_1, None)
        return store
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x2), None)
        tmp12 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 32128, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 32128), "index out of bounds: 0 <= tmp5 < 32128")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = tmp9 + tmp10
        tmp13 = 512.0
        tmp14 = tmp12 / tmp13
        tmp15 = 1e-06
        tmp16 = tmp14 + tmp15
        tmp17 = libdevice.rsqrt(tmp16)
        tmp18 = tmp11 * tmp17
        tmp19 = tmp0 * tmp18
        tl.store(out_ptr0 + (x2), tmp19, None)
op40_op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp15 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tmp16 = 512.0
        tmp17 = tmp14 / tmp16
        tmp18 = 1e-06
        tmp19 = tmp17 + tmp18
        tmp20 = libdevice.rsqrt(tmp19)
        tmp21 = tmp10 * tmp20
        tmp22 = tmp15 * tmp21
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp22, None)


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.node.kernel = extern_kernels.mm


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op43.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 2097152}, None)]
op44.unmet_dependencies = [   MemoryDep('buf42', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (2097152, 1)
op44.sizes = ([4, 8, 1024, 64], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op44_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf44', get_index_1, load, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2097152}, None)]
op45.unmet_dependencies = [MemoryDep('buf43', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (2097152, 1)
op45.sizes = ([4, 512, 1024], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op45_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.bmm


op47_op48_op49_op51: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op47_op48_op49_op51.writes = 
    [   MemoryDep('buf47', c0, {c0: 33554432}, None),
        MemoryDep('buf48', c0, {c0: 32768}, None),
        MemoryDep('buf49', c0, {c0: 32768}, None),
        MemoryDep('buf51', c0, {c0: 33554432}, None)]
op47_op48_op49_op51.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 33554432}, None)]
op47_op48_op49_op51.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op47_op48_op49_op51.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op47_op48_op49_op51.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 33554432}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 33554432}, None)]
op47.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (33554432, 1)
op47.sizes = ([4, 8, 1024, 1024], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op47_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 8*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf47', get_index_6, add_4, None)
        return store
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op47_op48_op49_op51.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 32768}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 33554432}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (32768, 1024)
op48.sizes = ([32768], [1024])
buf47_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op48_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_1, reduction)
        return store_reduction
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op47_op48_op49_op51.snodes[2] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 32768}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 33554432}, None),
        MemoryDep('buf48', c0, {c0: 32768}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (32768, 1024)
op49.sizes = ([32768], [1024])
buf47_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op49_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_2, reduction)
        return store_reduction
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op47_op48_op49_op51.snodes[3] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 33554432}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 33554432}, None),
        MemoryDep('buf48', c0, {c0: 32768}, None),
        MemoryDep('buf49', c0, {c0: 32768}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (33554432, 1)
op51.sizes = ([32768, 1024], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf51_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op51_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf49', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf51', get_index_3, truediv, None)
        return store
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op47_op48_op49_op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [RBLOCK])
        tmp36 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp34, 0))
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [RBLOCK])
        tmp41 = triton_helpers.promote_to_tensor(tl.sum(tmp39, 0))
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp42, None)


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op50.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 2097152}, None)]
op52.unmet_dependencies = [   MemoryDep('buf50', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (2097152, 1)
op52.sizes = ([4, 8, 1024, 64], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op52_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf52', get_index_1, load, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None), StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.bmm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 2097152}, None)]
op54.unmet_dependencies = [   MemoryDep('buf53', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (2097152, 1)
op54.sizes = ([4, 1024, 8, 64], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op54_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf54', get_index_1, load, None)
        return store
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56_op57_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op56_op57_op58.writes = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf57', c0, {c0: 4096}, None),
        MemoryDep('buf58', c0, {c0: 2097152}, None)]
op56_op57_op58.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 2097152}, None),
        MemoryDep('buf39', c0, {c0: 2097152}, None),
        MemoryDep('buf55', c0, {c0: 2097152}, None)]
op56_op57_op58.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg18_1', c1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op56_op57_op58.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56_op57_op58.snodes[0] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 2097152}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 2097152}, None),
        MemoryDep('buf39', c0, {c0: 2097152}, None),
        MemoryDep('buf55', c0, {c0: 2097152}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (2097152, 1)
op56.sizes = ([4096, 512], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op56_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf39', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf55', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf56', get_index_5, add_2, None)
        return store
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 512)
        x0 = xindex % 512
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x2), None)
        tmp9 = tl.load(in_ptr3 + (x2), None)
        tmp11 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.full([XBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (x0 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tl.store(in_out_ptr0 + (x2), tmp12, None)
op56_op57_op58.snodes[1] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 4096}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 2097152}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (4096, 512)
op57.sizes = ([4096], [512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op57_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, reduction)
        return store_reduction
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op56_op57_op58.snodes[2] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2097152}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf57', c0, {c0: 4096}, None)]
op58.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 4096, c1: 512}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (2097152, 1)
op58.sizes = ([4096, 512], [])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf58_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op58_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg18_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf57', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf58', get_index_3, mul_1, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op56_op57_op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp17 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [RBLOCK])
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp14, 0))
        tmp18 = 512.0
        tmp19 = tmp16 / tmp18
        tmp20 = 1e-06
        tmp21 = tmp19 + tmp20
        tmp22 = libdevice.rsqrt(tmp21)
        tmp23 = tmp12 * tmp22
        tmp24 = tmp17 * tmp23
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp12, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp24, None)


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 8388608}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 8388608}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (8388608, 1)
op60.sizes = ([8388608], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op60_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf60', get_index_1, relu, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62_op63: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op62_op63.writes = 
    [   MemoryDep('buf62', c0, {c0: 4096}, None),
        MemoryDep('buf63', c0, {c0: 2097152}, None)]
op62_op63.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None)]
op62_op63.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 4096, c1: 512}, None)]
op62_op63.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op62_op63.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 4096}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (4096, 512)
op62.sizes = ([4096], [512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op62_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf62', get_index_2, reduction)
        return store_reduction
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op62_op63.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 2097152}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf62', c0, {c0: 4096}, None)]
op63.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 4096, c1: 512}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (2097152, 1)
op63.sizes = ([4096, 512], [])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf63_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op63_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf63', get_index_4, mul_1, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op62_op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.mm


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op65.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = extern_kernels.mm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 2097152}, None)]
op66.unmet_dependencies = [   MemoryDep('buf64', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (2097152, 1)
op66.sizes = ([4, 8, 1024, 64], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op66_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf66', get_index_1, load, None)
        return store
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 2097152}, None)]
op67.unmet_dependencies = [MemoryDep('buf65', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (2097152, 1)
op67.sizes = ([4, 512, 1024], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op67_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf67', get_index_1, load, None)
        return store
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf66', mode=None), StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.bmm


op69_op70_op71_op73: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op71_op73.writes = 
    [   MemoryDep('buf69', c0, {c0: 33554432}, None),
        MemoryDep('buf70', c0, {c0: 32768}, None),
        MemoryDep('buf71', c0, {c0: 32768}, None),
        MemoryDep('buf73', c0, {c0: 33554432}, None)]
op69_op70_op71_op73.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 33554432}, None)]
op69_op70_op71_op73.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op69_op70_op71_op73.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op69_op70_op71_op73.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 33554432}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 33554432}, None)]
op69.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (33554432, 1)
op69.sizes = ([4, 8, 1024, 1024], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op69_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 8*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf69', get_index_6, add_4, None)
        return store
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op69_op70_op71_op73.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 32768}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 33554432}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (32768, 1024)
op70.sizes = ([32768], [1024])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op70_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, reduction)
        return store_reduction
op70 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op69_op70_op71_op73.snodes[2] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 32768}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 33554432}, None),
        MemoryDep('buf70', c0, {c0: 32768}, None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (32768, 1024)
op71.sizes = ([32768], [1024])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf71_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op71_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_2, reduction)
        return store_reduction
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op69_op70_op71_op73.snodes[3] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 33554432}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 33554432}, None),
        MemoryDep('buf70', c0, {c0: 32768}, None),
        MemoryDep('buf71', c0, {c0: 32768}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (33554432, 1)
op73.sizes = ([32768, 1024], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf71_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op73_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf71', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf73', get_index_3, truediv, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op69_op70_op71_op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [RBLOCK])
        tmp36 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp34, 0))
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [RBLOCK])
        tmp41 = triton_helpers.promote_to_tensor(tl.sum(tmp39, 0))
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp42, None)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op72.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 2097152}, None)]
op74.unmet_dependencies = [   MemoryDep('buf72', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (2097152, 1)
op74.sizes = ([4, 8, 1024, 64], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op74_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf74', get_index_1, load, None)
        return store
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.bmm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 2097152}, None)]
op76.unmet_dependencies = [   MemoryDep('buf75', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (2097152, 1)
op76.sizes = ([4, 1024, 8, 64], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op76_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op77.node.kernel = extern_kernels.mm


op78_op79: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op78_op79.writes = 
    [   MemoryDep('buf78', c0, {c0: 4096}, None),
        MemoryDep('buf79', c0, {c0: 2097152}, None)]
op78_op79.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None)]
op78_op79.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 4096, c1: 512}, None)]
op78_op79.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78_op79.snodes[0] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 4096}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (4096, 512)
op78.sizes = ([4096], [512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op78_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_3, reduction)
        return store_reduction
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op78_op79.snodes[1] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2097152}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf78', c0, {c0: 4096}, None)]
op79.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 4096, c1: 512}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (2097152, 1)
op79.sizes = ([4096, 512], [])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op79_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg26_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf77', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf78', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf79', get_index_5, mul_1, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op78_op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 8388608}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 8388608}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (8388608, 1)
op81.sizes = ([8388608], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op81_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf81', get_index_1, relu, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.mm


op83_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op83_op84.writes = 
    [   MemoryDep('buf83', c0, {c0: 4096}, None),
        MemoryDep('buf84', c0, {c0: 2097152}, None)]
op83_op84.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf82', c0, {c0: 2097152}, None)]
op83_op84.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 4096, c1: 512}, None)]
op83_op84.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
    ]
]
op83_op84.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 4096}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf82', c0, {c0: 2097152}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (4096, 512)
op83.sizes = ([4096], [512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op83_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf82', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf83', get_index_4, reduction)
        return store_reduction
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op83_op84.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2097152}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf82', c0, {c0: 2097152}, None),
        MemoryDep('buf83', c0, {c0: 4096}, None)]
op84.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 4096, c1: 512}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (2097152, 1)
op84.sizes = ([4096, 512], [])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf84_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op84_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg31_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf77', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf82', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf83', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf84', get_index_6, mul_1, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op83_op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.mm


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op86.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 2097152}, None)]
op87.unmet_dependencies = [   MemoryDep('buf85', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (2097152, 1)
op87.sizes = ([4, 8, 1024, 64], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op87_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf87', get_index_1, load, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 2097152}, None)]
op88.unmet_dependencies = [MemoryDep('buf86', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (2097152, 1)
op88.sizes = ([4, 512, 1024], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op88_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf88', get_index_1, load, None)
        return store
op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.bmm


op90_op91_op92_op94: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op90_op91_op92_op94.writes = 
    [   MemoryDep('buf90', c0, {c0: 33554432}, None),
        MemoryDep('buf91', c0, {c0: 32768}, None),
        MemoryDep('buf92', c0, {c0: 32768}, None),
        MemoryDep('buf94', c0, {c0: 33554432}, None)]
op90_op91_op92_op94.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 33554432}, None)]
op90_op91_op92_op94.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op90_op91_op92_op94.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
    ]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf92.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op90_op91_op92_op94.snodes[0] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 33554432}, None)]
op90.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 33554432}, None)]
op90.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (33554432, 1)
op90.sizes = ([4, 8, 1024, 1024], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op90_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 8*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf90', get_index_6, add_4, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op90_op91_op92_op94.snodes[1] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 32768}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 33554432}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (32768, 1024)
op91.sizes = ([32768], [1024])
buf90_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op91_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf91', get_index_1, reduction)
        return store_reduction
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op90_op91_op92_op94.snodes[2] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 32768}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 33554432}, None),
        MemoryDep('buf91', c0, {c0: 32768}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf92.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (32768, 1024)
op92.sizes = ([32768], [1024])
buf90_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op92_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf91', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf92', get_index_2, reduction)
        return store_reduction
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op90_op91_op92_op94.snodes[3] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 33554432}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 33554432}, None),
        MemoryDep('buf91', c0, {c0: 32768}, None),
        MemoryDep('buf92', c0, {c0: 32768}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (33554432, 1)
op94.sizes = ([32768, 1024], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op94_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf91', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf92', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf94', get_index_3, truediv, None)
        return store
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op90_op91_op92_op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [RBLOCK])
        tmp36 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp34, 0))
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [RBLOCK])
        tmp41 = triton_helpers.promote_to_tensor(tl.sum(tmp39, 0))
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp42, None)


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op93.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 2097152}, None)]
op95.unmet_dependencies = [   MemoryDep('buf93', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (2097152, 1)
op95.sizes = ([4, 8, 1024, 64], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op95_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf95', get_index_1, load, None)
        return store
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf94', mode=None), StarDep(name='buf95', mode=None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.bmm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2097152}, None)]
op97.unmet_dependencies = [   MemoryDep('buf96', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (2097152, 1)
op97.sizes = ([4, 1024, 8, 64], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op97_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.mm


op99_op100_op101: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op99_op100_op101.writes = 
    [   MemoryDep('buf100', c0, {c0: 4096}, None),
        MemoryDep('buf101', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op99_op100_op101.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf82', c0, {c0: 2097152}, None),
        MemoryDep('buf98', c0, {c0: 2097152}, None)]
op99_op100_op101.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 4096, c1: 512}, None)]
op99_op100_op101.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op99_op100_op101.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 2097152}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf82', c0, {c0: 2097152}, None),
        MemoryDep('buf98', c0, {c0: 2097152}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (2097152, 1)
op99.sizes = ([2097152], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op99_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf82', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf98', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, add_3, None)
        return store
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op99_op100_op101.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 4096}, None)]
op100.unmet_dependencies = [MemoryDep('buf99', c0, {c0: 2097152}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (4096, 512)
op100.sizes = ([4096], [512])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op100_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf100', get_index_1, reduction)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op99_op100_op101.snodes[2] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 2097152}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 4096}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op101.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 4096, c1: 512}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (2097152, 1)
op101.sizes = ([4096, 512], [])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf101_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op101_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg34_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf100', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf101', get_index_3, mul_1, None)
        return store
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op99_op100_op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 8388608}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 8388608}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (8388608, 1)
op103.sizes = ([8388608], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op103_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf103', get_index_1, relu, None)
        return store
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op104.node.kernel = extern_kernels.mm


op105_op106: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op105_op106.writes = 
    [   MemoryDep('buf105', c0, {c0: 4096}, None),
        MemoryDep('buf106', c0, {c0: 2097152}, None)]
op105_op106.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op105_op106.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 4096, c1: 512}, None)]
op105_op106.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
    ]
]
op105_op106.snodes[0] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 4096}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (4096, 512)
op105.sizes = ([4096], [512])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op105_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_2, reduction)
        return store_reduction
op105 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op105_op106.snodes[1] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 2097152}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf105', c0, {c0: 4096}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op106.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 4096, c1: 512}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (2097152, 1)
op106.sizes = ([4096, 512], [])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf106_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op106_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg39_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf104', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf105', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf106', get_index_4, mul_1, None)
        return store
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op105_op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op108.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.mm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 2097152}, None)]
op109.unmet_dependencies = [   MemoryDep('buf107', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (2097152, 1)
op109.sizes = ([4, 8, 1024, 64], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op109_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, load, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 2097152}, None)]
op110.unmet_dependencies = [MemoryDep('buf108', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (2097152, 1)
op110.sizes = ([4, 512, 1024], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op110_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf109', mode=None), StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.bmm


op112_op113_op114_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op112_op113_op114_op116.writes = 
    [   MemoryDep('buf112', c0, {c0: 33554432}, None),
        MemoryDep('buf113', c0, {c0: 32768}, None),
        MemoryDep('buf114', c0, {c0: 32768}, None),
        MemoryDep('buf116', c0, {c0: 33554432}, None)]
op112_op113_op114_op116.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 33554432}, None)]
op112_op113_op114_op116.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op112_op113_op114_op116.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op112_op113_op114_op116.snodes[0] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 33554432}, None)]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 33554432}, None)]
op112.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (33554432, 1)
op112.sizes = ([4, 8, 1024, 1024], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op112_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 8*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf112', get_index_6, add_4, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op112_op113_op114_op116.snodes[1] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 32768}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 33554432}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (32768, 1024)
op113.sizes = ([32768], [1024])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op113_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf113', get_index_1, reduction)
        return store_reduction
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op112_op113_op114_op116.snodes[2] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 32768}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 33554432}, None),
        MemoryDep('buf113', c0, {c0: 32768}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (32768, 1024)
op114.sizes = ([32768], [1024])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf114_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op114_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf114', get_index_2, reduction)
        return store_reduction
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op112_op113_op114_op116.snodes[3] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 33554432}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 33554432}, None),
        MemoryDep('buf113', c0, {c0: 32768}, None),
        MemoryDep('buf114', c0, {c0: 32768}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (33554432, 1)
op116.sizes = ([32768, 1024], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf114_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op116_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf114', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf116', get_index_3, truediv, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op112_op113_op114_op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [RBLOCK])
        tmp36 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp34, 0))
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [RBLOCK])
        tmp41 = triton_helpers.promote_to_tensor(tl.sum(tmp39, 0))
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp42, None)


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op115.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op115.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 2097152}, None)]
op117.unmet_dependencies = [   MemoryDep('buf115', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (2097152, 1)
op117.sizes = ([4, 8, 1024, 64], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op117_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf117', get_index_1, load, None)
        return store
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf116', mode=None), StarDep(name='buf117', mode=None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.node.kernel = extern_kernels.bmm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 2097152}, None)]
op119.unmet_dependencies = [   MemoryDep('buf118', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (2097152, 1)
op119.sizes = ([4, 1024, 8, 64], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op119_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf119', get_index_1, load, None)
        return store
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op120.node.kernel = extern_kernels.mm


op121_op122: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op121_op122.writes = 
    [   MemoryDep('buf121', c0, {c0: 4096}, None),
        MemoryDep('buf122', c0, {c0: 2097152}, None)]
op121_op122.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op121_op122.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 4096, c1: 512}, None)]
op121_op122.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121_op122.snodes[0] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 4096}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (4096, 512)
op121.sizes = ([4096], [512])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op121_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf121', get_index_3, reduction)
        return store_reduction
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op121_op122.snodes[1] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 2097152}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf121', c0, {c0: 4096}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op122.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 4096, c1: 512}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (2097152, 1)
op122.sizes = ([4096, 512], [])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf122_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op122_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg42_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf104', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf120', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf121', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf122', get_index_5, mul_1, None)
        return store
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op121_op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 8388608}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 8388608}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (8388608, 1)
op124.sizes = ([8388608], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op124_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf124', get_index_1, relu, None)
        return store
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf125.users = [
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op125.node.kernel = extern_kernels.mm


op126_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op126_op127.writes = 
    [   MemoryDep('buf126', c0, {c0: 4096}, None),
        MemoryDep('buf127', c0, {c0: 2097152}, None)]
op126_op127.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf125', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op126_op127.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 4096, c1: 512}, None)]
op126_op127.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op126_op127.snodes[0] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 4096}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf125', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (4096, 512)
op126.sizes = ([4096], [512])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op126_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf125', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf126', get_index_4, reduction)
        return store_reduction
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op126_op127.snodes[1] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 2097152}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf125', c0, {c0: 2097152}, None),
        MemoryDep('buf126', c0, {c0: 4096}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op127.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 4096, c1: 512}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (2097152, 1)
op127.sizes = ([4096, 512], [])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf127_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op127_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg47_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf104', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf120', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf125', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf126', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf127', get_index_6, mul_1, None)
        return store
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op126_op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op129.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 2097152}, None)]
op130.unmet_dependencies = [   MemoryDep('buf128', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (2097152, 1)
op130.sizes = ([4, 8, 1024, 64], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op130_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf130', get_index_1, load, None)
        return store
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 2097152}, None)]
op131.unmet_dependencies = [MemoryDep('buf129', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (2097152, 1)
op131.sizes = ([4, 512, 1024], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op131_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf131', get_index_1, load, None)
        return store
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf130', mode=None), StarDep(name='buf131', mode=None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.node.kernel = extern_kernels.bmm


op133_op134_op135_op137: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op133_op134_op135_op137.writes = 
    [   MemoryDep('buf133', c0, {c0: 33554432}, None),
        MemoryDep('buf134', c0, {c0: 32768}, None),
        MemoryDep('buf135', c0, {c0: 32768}, None),
        MemoryDep('buf137', c0, {c0: 33554432}, None)]
op133_op134_op135_op137.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 33554432}, None)]
op133_op134_op135_op137.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op133_op134_op135_op137.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf135.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op133_op134_op135_op137.snodes[0] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 33554432}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 33554432}, None)]
op133.met_dependencies = [MemoryDep('arg6_1', c1 + 8*tmp27, {c0: 4, c1: 8}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (33554432, 1)
op133.sizes = ([4, 8, 1024, 1024], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op133_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 8*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf133', get_index_6, add_4, None)
        return store
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op133_op134_op135_op137.snodes[1] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 32768}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 33554432}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (32768, 1024)
op134.sizes = ([32768], [1024])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op134_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf134', get_index_1, reduction)
        return store_reduction
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op133_op134_op135_op137.snodes[2] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 32768}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 33554432}, None),
        MemoryDep('buf134', c0, {c0: 32768}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf135.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (32768, 1024)
op135.sizes = ([32768], [1024])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf135_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op135_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf135', get_index_2, reduction)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op133_op134_op135_op137.snodes[3] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 33554432}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 33554432}, None),
        MemoryDep('buf134', c0, {c0: 32768}, None),
        MemoryDep('buf135', c0, {c0: 32768}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (33554432, 1)
op137.sizes = ([32768, 1024], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf135_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf137_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op137_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf135', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf137', get_index_3, truediv, None)
        return store
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op133_op134_op135_op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (8*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [RBLOCK])
        tmp36 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp34, 0))
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [RBLOCK])
        tmp41 = triton_helpers.promote_to_tensor(tl.sum(tmp39, 0))
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp42, None)


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op136.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 2097152}, None)]
op138.unmet_dependencies = [   MemoryDep('buf136', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (2097152, 1)
op138.sizes = ([4, 8, 1024, 64], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op138_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 2097152}, None)]
op140.unmet_dependencies = [   MemoryDep('buf139', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (2097152, 1)
op140.sizes = ([4, 1024, 8, 64], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op140_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142_op143_op144: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op142_op143_op144.writes = 
    [   MemoryDep('buf142', c0, {c0: 2097152}, None),
        MemoryDep('buf143', c0, {c0: 4096}, None),
        MemoryDep('buf144', c0, {c0: 2097152}, None)]
op142_op143_op144.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf125', c0, {c0: 2097152}, None),
        MemoryDep('buf141', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op142_op143_op144.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 4096, c1: 512}, None)]
op142_op143_op144.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142_op143_op144.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 2097152}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf125', c0, {c0: 2097152}, None),
        MemoryDep('buf141', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (2097152, 1)
op142.sizes = ([2097152], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op142_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf125', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf141', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_3, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op142_op143_op144.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 4096}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 2097152}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (4096, 512)
op143.sizes = ([4096], [512])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op143_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, reduction)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op142_op143_op144.snodes[2] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 2097152}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 2097152}, None),
        MemoryDep('buf143', c0, {c0: 4096}, None)]
op144.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 4096, c1: 512}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (2097152, 1)
op144.sizes = ([4096, 512], [])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf144_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op144_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg50_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf143', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf144', get_index_3, mul_1, None)
        return store
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op142_op143_op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.node.kernel = extern_kernels.mm


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 8388608}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 8388608}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (8388608, 1)
op146.sizes = ([8388608], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op146_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf146', get_index_1, relu, None)
        return store
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op147.node.kernel = extern_kernels.mm


op148_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op148_op149.writes = 
    [   MemoryDep('buf148', c0, {c0: 4096}, None),
        MemoryDep('buf149', c0, {c0: 2097152}, None)]
op148_op149.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 2097152}, None),
        MemoryDep('buf147', c0, {c0: 2097152}, None)]
op148_op149.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 4096, c1: 512}, None)]
op148_op149.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op148_op149.snodes[0] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 4096}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 2097152}, None),
        MemoryDep('buf147', c0, {c0: 2097152}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (4096, 512)
op148.sizes = ([4096], [512])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op148_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf147', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_2, reduction)
        return store_reduction
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op148_op149.snodes[1] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 2097152}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 2097152}, None),
        MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf148', c0, {c0: 4096}, None)]
op149.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 4096, c1: 512}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (2097152, 1)
op149.sizes = ([4096, 512], [])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op149_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf147', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf148', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf149', get_index_4, mul_1, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op148_op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op150.node.kernel = extern_kernels.mm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 2097152}, None)]
op151.unmet_dependencies = [   MemoryDep('buf18', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (2097152, 1)
op151.sizes = ([4, 8, 1024, 64], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op151_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf151', get_index_1, load, None)
        return store
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2097152}, None)]
op152.unmet_dependencies = [MemoryDep('buf150', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (2097152, 1)
op152.sizes = ([4, 512, 1024], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op152_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf152', get_index_1, load, None)
        return store
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf151', mode=None), StarDep(name='buf152', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op153.node.kernel = extern_kernels.bmm


op154_op155_op157: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op154_op155_op157.writes = 
    [   MemoryDep('buf154', c0, {c0: 32768}, None),
        MemoryDep('buf155', c0, {c0: 32768}, None),
        MemoryDep('buf157', c0, {c0: 33554432}, None)]
op154_op155_op157.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 33554432}, None)]
op154_op155_op157.met_dependencies = []
op154_op155_op157.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op154_op155_op157.snodes[0] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 32768}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 33554432}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (32768, 1024)
op154.sizes = ([32768], [1024])
buf153_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op154_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_1, reduction)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op154_op155_op157.snodes[1] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 32768}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 33554432}, None),
        MemoryDep('buf154', c0, {c0: 32768}, None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (32768, 1024)
op155.sizes = ([32768], [1024])
buf153_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op155_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_2, reduction)
        return store_reduction
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op154_op155_op157.snodes[2] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 33554432}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 33554432}, None),
        MemoryDep('buf154', c0, {c0: 32768}, None),
        MemoryDep('buf155', c0, {c0: 32768}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (33554432, 1)
op157.sizes = ([32768, 1024], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op157_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf157', get_index_3, truediv, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op154_op155_op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp9, None)


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op156.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf156.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op156.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 2097152}, None)]
op158.unmet_dependencies = [   MemoryDep('buf156', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (2097152, 1)
op158.sizes = ([4, 8, 1024, 64], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op158_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf158', get_index_1, load, None)
        return store
op158 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf157', mode=None), StarDep(name='buf158', mode=None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.node.kernel = extern_kernels.bmm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 2097152}, None)]
op160.unmet_dependencies = [   MemoryDep('buf159', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (2097152, 1)
op160.sizes = ([4, 1024, 8, 64], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op160_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf160', get_index_1, load, None)
        return store
op160 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.mm


op162_op163: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op162_op163.writes = 
    [   MemoryDep('buf162', c0, {c0: 4096}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None)]
op162_op163.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None)]
op162_op163.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg66_1', c1, {c0: 4096, c1: 512}, None)]
op162_op163.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162_op163.snodes[0] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 4096}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (4096, 512)
op162.sizes = ([4096], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op162_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        add_1 = ops.add(add, load_3)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf162', get_index_4, reduction)
        return store_reduction
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)
op162_op163.snodes[1] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 2097152}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None),
        MemoryDep('buf162', c0, {c0: 4096}, None)]
op163.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 4096, c1: 512}, None),
        MemoryDep('arg66_1', c1, {c0: 4096, c1: 512}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (2097152, 1)
op163.sizes = ([4096, 512], [])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf163_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op163_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg66_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf15', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf161', get_index_4)
        add_1 = ops.add(add, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf162', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf163', get_index_6, mul_1, None)
        return store
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x2), None)
        tmp12 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 32128, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 32128), "index out of bounds: 0 <= tmp5 < 32128")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = tmp9 + tmp10
        tmp13 = 512.0
        tmp14 = tmp12 / tmp13
        tmp15 = 1e-06
        tmp16 = tmp14 + tmp15
        tmp17 = libdevice.rsqrt(tmp16)
        tmp18 = tmp11 * tmp17
        tmp19 = tmp0 * tmp18
        tl.store(out_ptr0 + (x2), tmp19, None)
op162_op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp15 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tmp16 = 512.0
        tmp17 = tmp14 / tmp16
        tmp18 = 1e-06
        tmp19 = tmp17 + tmp18
        tmp20 = libdevice.rsqrt(tmp19)
        tmp21 = tmp10 * tmp20
        tmp22 = tmp15 * tmp21
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp22, None)


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 8388608}, None)]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 8388608}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (8388608, 1)
op165.sizes = ([8388608], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op165_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf165', get_index_1, relu, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167_op168_op169: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op169.writes = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf168', c0, {c0: 4096}, None),
        MemoryDep('buf169', c0, {c0: 2097152}, None)]
op167_op168_op169.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None),
        MemoryDep('buf166', c0, {c0: 2097152}, None)]
op167_op168_op169.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None),
        MemoryDep('arg71_1', c1, {c0: 4096, c1: 512}, None)]
op167_op168_op169.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op167_op168_op169.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 2097152}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None),
        MemoryDep('buf166', c0, {c0: 2097152}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 4096, c1: 512}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (2097152, 1)
op167.sizes = ([4096, 512], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32128, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op167_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf166', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf167', get_index_5, add_2, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 512)
        x0 = xindex % 512
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x2), None)
        tmp9 = tl.load(in_ptr3 + (x2), None)
        tmp11 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.full([XBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (x0 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tl.store(in_out_ptr0 + (x2), tmp12, None)
op167_op168_op169.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 4096}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 2097152}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (4096, 512)
op168.sizes = ([4096], [512])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op168_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, reduction)
        return store_reduction
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op167_op168_op169.snodes[2] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 2097152}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf168', c0, {c0: 4096}, None)]
op169.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 4096, c1: 512}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (2097152, 1)
op169.sizes = ([4096, 512], [])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf169_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op169_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg71_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf168', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf169', get_index_3, mul_1, None)
        return store
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op167_op168_op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp17 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 32128, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32128), "index out of bounds: 0 <= tmp4 < 32128")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [RBLOCK])
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp14, 0))
        tmp18 = 512.0
        tmp19 = tmp16 / tmp18
        tmp20 = 1e-06
        tmp21 = tmp19 + tmp20
        tmp22 = libdevice.rsqrt(tmp21)
        tmp23 = tmp12 * tmp22
        tmp24 = tmp17 * tmp23
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp12, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp24, None)


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170.node.kernel = extern_kernels.mm


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op171.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op171.node.kernel = extern_kernels.mm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 2097152}, None)]
op172.unmet_dependencies = [   MemoryDep('buf170', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (2097152, 1)
op172.sizes = ([4, 8, 1024, 64], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op172_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf172', get_index_1, load, None)
        return store
op172 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 2097152}, None)]
op173.unmet_dependencies = [MemoryDep('buf171', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (2097152, 1)
op173.sizes = ([4, 512, 1024], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op173_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf173', get_index_1, load, None)
        return store
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf172', mode=None), StarDep(name='buf173', mode=None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op174.node.kernel = extern_kernels.bmm


op175_op176_op177_op179: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op175_op176_op177_op179.writes = 
    [   MemoryDep('buf175', c0, {c0: 33554432}, None),
        MemoryDep('buf176', c0, {c0: 32768}, None),
        MemoryDep('buf177', c0, {c0: 32768}, None),
        MemoryDep('buf179', c0, {c0: 33554432}, None)]
op175_op176_op177_op179.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 33554432}, None)]
op175_op176_op177_op179.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op175_op176_op177_op179.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op175_op176_op177_op179.snodes[0] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 33554432}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 33554432}, None)]
op175.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (33554432, 1)
op175.sizes = ([4, 8, 1024, 1024], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op175_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 8*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg57_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf175', get_index_7, add_3, None)
        return store
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op175_op176_op177_op179.snodes[1] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 32768}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 33554432}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (32768, 1024)
op176.sizes = ([32768], [1024])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op176_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf176', get_index_1, reduction)
        return store_reduction
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op175_op176_op177_op179.snodes[2] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 32768}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 33554432}, None),
        MemoryDep('buf176', c0, {c0: 32768}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (32768, 1024)
op177.sizes = ([32768], [1024])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf177_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op177_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf176', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf177', get_index_2, reduction)
        return store_reduction
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op175_op176_op177_op179.snodes[3] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 33554432}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 33554432}, None),
        MemoryDep('buf176', c0, {c0: 32768}, None),
        MemoryDep('buf177', c0, {c0: 32768}, None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (33554432, 1)
op179.sizes = ([32768, 1024], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf177_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf179_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op179_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf176', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf177', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf179', get_index_3, truediv, None)
        return store
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op175_op176_op177_op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [RBLOCK])
        tmp37 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp35, 0))
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [RBLOCK])
        tmp42 = triton_helpers.promote_to_tensor(tl.sum(tmp40, 0))
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp43, None)


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op178.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 2097152}, None)]
op180.unmet_dependencies = [   MemoryDep('buf178', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (2097152, 1)
op180.sizes = ([4, 8, 1024, 64], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op180_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf180', get_index_1, load, None)
        return store
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf179', mode=None), StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.bmm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 2097152}, None)]
op182.unmet_dependencies = [   MemoryDep('buf181', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (2097152, 1)
op182.sizes = ([4, 1024, 8, 64], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op182_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, load, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op184_op185.writes = 
    [   MemoryDep('buf184', c0, {c0: 4096}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None)]
op184_op185.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None)]
op184_op185.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 4096, c1: 512}, None)]
op184_op185.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184_op185.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 4096}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (4096, 512)
op184.sizes = ([4096], [512])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op184_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf184', get_index_2, reduction)
        return store_reduction
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op184_op185.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 2097152}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf184', c0, {c0: 4096}, None)]
op185.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 4096, c1: 512}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (2097152, 1)
op185.sizes = ([4096, 512], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf185_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op185_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf183', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf185', get_index_4, mul_1, None)
        return store
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op184_op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op187.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.node.kernel = extern_kernels.mm


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 2097152}, None)]
op188.unmet_dependencies = [   MemoryDep('buf186', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (2097152, 1)
op188.sizes = ([4, 8, 1024, 64], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op188_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 2097152}, None)]
op189.unmet_dependencies = [MemoryDep('buf187', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (2097152, 1)
op189.sizes = ([4, 512, 1024], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op189_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf189', get_index_1, load, None)
        return store
op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf188', mode=None), StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.bmm


op191_op192_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op191_op192_op194.writes = 
    [   MemoryDep('buf191', c0, {c0: 32768}, None),
        MemoryDep('buf192', c0, {c0: 32768}, None),
        MemoryDep('buf194', c0, {c0: 33554432}, None)]
op191_op192_op194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 33554432}, None)]
op191_op192_op194.met_dependencies = []
op191_op192_op194.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
    ]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op191_op192_op194.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 32768}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 33554432}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (32768, 1024)
op191.sizes = ([32768], [1024])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op191_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf191', get_index_1, reduction)
        return store_reduction
op191 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op191_op192_op194.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 32768}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 33554432}, None),
        MemoryDep('buf191', c0, {c0: 32768}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (32768, 1024)
op192.sizes = ([32768], [1024])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op192_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf192', get_index_2, reduction)
        return store_reduction
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op191_op192_op194.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 33554432}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 33554432}, None),
        MemoryDep('buf191', c0, {c0: 32768}, None),
        MemoryDep('buf192', c0, {c0: 32768}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (33554432, 1)
op194.sizes = ([32768, 1024], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf194_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op194_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf192', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf194', get_index_3, truediv, None)
        return store
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op191_op192_op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp9, None)


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op193.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 2097152}, None)]
op195.unmet_dependencies = [   MemoryDep('buf193', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (2097152, 1)
op195.sizes = ([4, 8, 1024, 64], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op195_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf195', get_index_1, load, None)
        return store
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None), StarDep(name='buf195', mode=None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.bmm


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 2097152}, None)]
op197.unmet_dependencies = [   MemoryDep('buf196', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (2097152, 1)
op197.sizes = ([4, 1024, 8, 64], [])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op197_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf197', get_index_1, load, None)
        return store
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op198.node.kernel = extern_kernels.mm


op199_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op199_op200.writes = 
    [   MemoryDep('buf199', c0, {c0: 4096}, None),
        MemoryDep('buf200', c0, {c0: 2097152}, None)]
op199_op200.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None)]
op199_op200.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 4096, c1: 512}, None)]
op199_op200.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199_op200.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 4096}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (4096, 512)
op199.sizes = ([4096], [512])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op199_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf199', get_index_3, reduction)
        return store_reduction
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op199_op200.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 2097152}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf199', c0, {c0: 4096}, None)]
op200.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 4096, c1: 512}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (2097152, 1)
op200.sizes = ([4096, 512], [])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf200_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op200_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf183', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf198', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf199', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf200', get_index_5, mul_1, None)
        return store
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op199_op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.mm


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 8388608}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 8388608}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (8388608, 1)
op202.sizes = ([8388608], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op202_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf202', get_index_1, relu, None)
        return store
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
    ]
]
op203.node.kernel = extern_kernels.mm


op204_op205: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op204_op205.writes = 
    [   MemoryDep('buf204', c0, {c0: 4096}, None),
        MemoryDep('buf205', c0, {c0: 2097152}, None)]
op204_op205.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf203', c0, {c0: 2097152}, None)]
op204_op205.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 4096, c1: 512}, None)]
op204_op205.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf205.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op204_op205.snodes[0] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 4096}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf203', c0, {c0: 2097152}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (4096, 512)
op204.sizes = ([4096], [512])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op204_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf203', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_4, reduction)
        return store_reduction
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op204_op205.snodes[1] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 2097152}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf203', c0, {c0: 2097152}, None),
        MemoryDep('buf204', c0, {c0: 4096}, None)]
op205.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 4096, c1: 512}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf205.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (2097152, 1)
op205.sizes = ([4096, 512], [])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf205_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op205_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg84_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf183', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf198', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf203', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf204', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf205', get_index_6, mul_1, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op204_op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.mm


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op207.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 2097152}, None)]
op208.unmet_dependencies = [   MemoryDep('buf206', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (2097152, 1)
op208.sizes = ([4, 8, 1024, 64], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op208_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf208', get_index_1, load, None)
        return store
op208 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 2097152}, None)]
op209.unmet_dependencies = [MemoryDep('buf207', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (2097152, 1)
op209.sizes = ([4, 512, 1024], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op209_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.bmm


op211_op212_op213_op215: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op211_op212_op213_op215.writes = 
    [   MemoryDep('buf211', c0, {c0: 33554432}, None),
        MemoryDep('buf212', c0, {c0: 32768}, None),
        MemoryDep('buf213', c0, {c0: 32768}, None),
        MemoryDep('buf215', c0, {c0: 33554432}, None)]
op211_op212_op213_op215.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 33554432}, None)]
op211_op212_op213_op215.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op211_op212_op213_op215.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op211_op212_op213_op215.snodes[0] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 33554432}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 33554432}, None)]
op211.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (33554432, 1)
op211.sizes = ([4, 8, 1024, 1024], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op211_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 8*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg57_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf211', get_index_7, add_3, None)
        return store
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op211_op212_op213_op215.snodes[1] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 32768}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 33554432}, None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (32768, 1024)
op212.sizes = ([32768], [1024])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op212_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf212', get_index_1, reduction)
        return store_reduction
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op211_op212_op213_op215.snodes[2] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 32768}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 33554432}, None),
        MemoryDep('buf212', c0, {c0: 32768}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (32768, 1024)
op213.sizes = ([32768], [1024])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op213_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_2, reduction)
        return store_reduction
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op211_op212_op213_op215.snodes[3] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 33554432}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 33554432}, None),
        MemoryDep('buf212', c0, {c0: 32768}, None),
        MemoryDep('buf213', c0, {c0: 32768}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (33554432, 1)
op215.sizes = ([32768, 1024], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf215_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op215_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf213', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf215', get_index_3, truediv, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op211_op212_op213_op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [RBLOCK])
        tmp37 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp35, 0))
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [RBLOCK])
        tmp42 = triton_helpers.promote_to_tensor(tl.sum(tmp40, 0))
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp43, None)


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op214.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op214.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 2097152}, None)]
op216.unmet_dependencies = [   MemoryDep('buf214', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (2097152, 1)
op216.sizes = ([4, 8, 1024, 64], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op216_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf216', get_index_1, load, None)
        return store
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.node.kernel = extern_kernels.bmm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 2097152}, None)]
op218.unmet_dependencies = [   MemoryDep('buf217', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (2097152, 1)
op218.sizes = ([4, 1024, 8, 64], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op218_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf218', get_index_1, load, None)
        return store
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.node.kernel = extern_kernels.mm


op220_op221_op222: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op220_op221_op222.writes = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf221', c0, {c0: 4096}, None),
        MemoryDep('buf222', c0, {c0: 2097152}, None)]
op220_op221_op222.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf203', c0, {c0: 2097152}, None),
        MemoryDep('buf219', c0, {c0: 2097152}, None)]
op220_op221_op222.met_dependencies = [MemoryDep('arg89_1', c1, {c0: 4096, c1: 512}, None)]
op220_op221_op222.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220_op221_op222.snodes[0] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 2097152}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 2097152}, None),
        MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf198', c0, {c0: 2097152}, None),
        MemoryDep('buf203', c0, {c0: 2097152}, None),
        MemoryDep('buf219', c0, {c0: 2097152}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (2097152, 1)
op220.sizes = ([2097152], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op220_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf203', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf219', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf220', get_index_5, add_3, None)
        return store
op220 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op220_op221_op222.snodes[1] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 4096}, None)]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 2097152}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (4096, 512)
op221.sizes = ([4096], [512])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op221_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf221', get_index_1, reduction)
        return store_reduction
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op220_op221_op222.snodes[2] =
op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 2097152}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf221', c0, {c0: 4096}, None)]
op222.met_dependencies = [MemoryDep('arg89_1', c1, {c0: 4096, c1: 512}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (2097152, 1)
op222.sizes = ([4096, 512], [])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf222_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op222_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg89_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf221', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf222', get_index_3, mul_1, None)
        return store
op222 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op220_op221_op222 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.mm


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op224.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 2097152}, None)]
op225.unmet_dependencies = [   MemoryDep('buf223', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (2097152, 1)
op225.sizes = ([4, 8, 1024, 64], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op225_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf225', get_index_1, load, None)
        return store
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 2097152}, None)]
op226.unmet_dependencies = [MemoryDep('buf224', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (2097152, 1)
op226.sizes = ([4, 512, 1024], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op226_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf226', get_index_1, load, None)
        return store
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf225', mode=None), StarDep(name='buf226', mode=None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op227.node.kernel = extern_kernels.bmm


op228_op229_op231: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op228_op229_op231.writes = 
    [   MemoryDep('buf228', c0, {c0: 32768}, None),
        MemoryDep('buf229', c0, {c0: 32768}, None),
        MemoryDep('buf231', c0, {c0: 33554432}, None)]
op228_op229_op231.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 33554432}, None)]
op228_op229_op231.met_dependencies = []
op228_op229_op231.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op228_op229_op231.snodes[0] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 32768}, None)]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 33554432}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (32768, 1024)
op228.sizes = ([32768], [1024])
buf227_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op228_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf228', get_index_1, reduction)
        return store_reduction
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op228_op229_op231.snodes[1] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 32768}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf227', c0, {c0: 33554432}, None),
        MemoryDep('buf228', c0, {c0: 32768}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (32768, 1024)
op229.sizes = ([32768], [1024])
buf227_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf229_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op229_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_2, reduction)
        return store_reduction
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op228_op229_op231.snodes[2] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 33554432}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf227', c0, {c0: 33554432}, None),
        MemoryDep('buf228', c0, {c0: 32768}, None),
        MemoryDep('buf229', c0, {c0: 32768}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (33554432, 1)
op231.sizes = ([32768, 1024], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf229_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf231_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op231_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf229', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf231', get_index_3, truediv, None)
        return store
op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op228_op229_op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp9, None)


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op230.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 2097152}, None)]
op232.unmet_dependencies = [   MemoryDep('buf230', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (2097152, 1)
op232.sizes = ([4, 8, 1024, 64], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op232_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.bmm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 2097152}, None)]
op234.unmet_dependencies = [   MemoryDep('buf233', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (2097152, 1)
op234.sizes = ([4, 1024, 8, 64], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op234_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf234', get_index_1, load, None)
        return store
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.mm


op236_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op236_op237.writes = 
    [   MemoryDep('buf236', c0, {c0: 4096}, None),
        MemoryDep('buf237', c0, {c0: 2097152}, None)]
op236_op237.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None)]
op236_op237.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 4096, c1: 512}, None)]
op236_op237.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236_op237.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 4096}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (4096, 512)
op236.sizes = ([4096], [512])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op236_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_2, reduction)
        return store_reduction
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op236_op237.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 2097152}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf236', c0, {c0: 4096}, None)]
op237.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 4096, c1: 512}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (2097152, 1)
op237.sizes = ([4096, 512], [])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf237_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op237_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg92_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf236', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf237', get_index_4, mul_1, None)
        return store
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op236_op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 8388608}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 8388608}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (8388608, 1)
op239.sizes = ([8388608], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op239_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf239', get_index_1, relu, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op240.node.kernel = extern_kernels.mm


op241_op242: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op241_op242.writes = 
    [   MemoryDep('buf241', c0, {c0: 4096}, None),
        MemoryDep('buf242', c0, {c0: 2097152}, None)]
op241_op242.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None)]
op241_op242.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 4096, c1: 512}, None)]
op241_op242.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op241_op242.snodes[0] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 4096}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (4096, 512)
op241.sizes = ([4096], [512])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op241_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf241', get_index_3, reduction)
        return store_reduction
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op241_op242.snodes[1] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 2097152}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf241', c0, {c0: 4096}, None)]
op242.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 4096, c1: 512}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (2097152, 1)
op242.sizes = ([4096, 512], [])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op242_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg97_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf240', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf241', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf242', get_index_5, mul_1, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op241_op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.mm


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op244.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 2097152}, None)]
op245.unmet_dependencies = [   MemoryDep('buf243', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (2097152, 1)
op245.sizes = ([4, 8, 1024, 64], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op245_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf245', get_index_1, load, None)
        return store
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 2097152}, None)]
op246.unmet_dependencies = [MemoryDep('buf244', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (2097152, 1)
op246.sizes = ([4, 512, 1024], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op246_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf246', get_index_1, load, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None), StarDep(name='buf246', mode=None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.bmm


op248_op249_op250_op252: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op248_op249_op250_op252.writes = 
    [   MemoryDep('buf248', c0, {c0: 33554432}, None),
        MemoryDep('buf249', c0, {c0: 32768}, None),
        MemoryDep('buf250', c0, {c0: 32768}, None),
        MemoryDep('buf252', c0, {c0: 33554432}, None)]
op248_op249_op250_op252.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 33554432}, None)]
op248_op249_op250_op252.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op248_op249_op250_op252.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op248_op249_op250_op252.snodes[0] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 33554432}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 33554432}, None)]
op248.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (33554432, 1)
op248.sizes = ([4, 8, 1024, 1024], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op248_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 8*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg57_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf248', get_index_7, add_3, None)
        return store
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op248_op249_op250_op252.snodes[1] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 32768}, None)]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 33554432}, None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (32768, 1024)
op249.sizes = ([32768], [1024])
buf248_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op249_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf249', get_index_1, reduction)
        return store_reduction
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op248_op249_op250_op252.snodes[2] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 32768}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 33554432}, None),
        MemoryDep('buf249', c0, {c0: 32768}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (32768, 1024)
op250.sizes = ([32768], [1024])
buf248_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf250_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op250_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf249', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf250', get_index_2, reduction)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op248_op249_op250_op252.snodes[3] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 33554432}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 33554432}, None),
        MemoryDep('buf249', c0, {c0: 32768}, None),
        MemoryDep('buf250', c0, {c0: 32768}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (33554432, 1)
op252.sizes = ([32768, 1024], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf250_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op252_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf249', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf250', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf252', get_index_3, truediv, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op248_op249_op250_op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [RBLOCK])
        tmp37 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp35, 0))
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [RBLOCK])
        tmp42 = triton_helpers.promote_to_tensor(tl.sum(tmp40, 0))
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp43, None)


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op251.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op251.node.kernel = extern_kernels.mm


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 2097152}, None)]
op253.unmet_dependencies = [   MemoryDep('buf251', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (2097152, 1)
op253.sizes = ([4, 8, 1024, 64], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op253_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf253', get_index_1, load, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.bmm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 2097152}, None)]
op255.unmet_dependencies = [   MemoryDep('buf254', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (2097152, 1)
op255.sizes = ([4, 1024, 8, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op255_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf255', get_index_1, load, None)
        return store
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op256.node.kernel = extern_kernels.mm


op257_op258: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op257_op258.writes = 
    [   MemoryDep('buf257', c0, {c0: 4096}, None),
        MemoryDep('buf258', c0, {c0: 2097152}, None)]
op257_op258.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf256', c0, {c0: 2097152}, None)]
op257_op258.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 4096, c1: 512}, None)]
op257_op258.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257_op258.snodes[0] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 4096}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf256', c0, {c0: 2097152}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (4096, 512)
op257.sizes = ([4096], [512])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op257_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_4, reduction)
        return store_reduction
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op257_op258.snodes[1] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 2097152}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf256', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 4096}, None)]
op258.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 4096, c1: 512}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (2097152, 1)
op258.sizes = ([4096, 512], [])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf258_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op258_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg102_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf240', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf256', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf257', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf258', get_index_6, mul_1, None)
        return store
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op257_op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.node.kernel = extern_kernels.mm


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op260.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 2097152}, None)]
op261.unmet_dependencies = [   MemoryDep('buf259', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (2097152, 1)
op261.sizes = ([4, 8, 1024, 64], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op261_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf261', get_index_1, load, None)
        return store
op261 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 2097152}, None)]
op262.unmet_dependencies = [MemoryDep('buf260', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (2097152, 1)
op262.sizes = ([4, 512, 1024], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op262_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, load, None)
        return store
op262 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf262', mode=None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op263.node.kernel = extern_kernels.bmm


op264_op265_op267: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op264_op265_op267.writes = 
    [   MemoryDep('buf264', c0, {c0: 32768}, None),
        MemoryDep('buf265', c0, {c0: 32768}, None),
        MemoryDep('buf267', c0, {c0: 33554432}, None)]
op264_op265_op267.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 33554432}, None)]
op264_op265_op267.met_dependencies = []
op264_op265_op267.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf265.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op264_op265_op267.snodes[0] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 32768}, None)]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 33554432}, None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (32768, 1024)
op264.sizes = ([32768], [1024])
buf263_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op264_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf264', get_index_1, reduction)
        return store_reduction
op264 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op264_op265_op267.snodes[1] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 32768}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf263', c0, {c0: 33554432}, None),
        MemoryDep('buf264', c0, {c0: 32768}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf265.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (32768, 1024)
op265.sizes = ([32768], [1024])
buf263_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf265_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op265_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf264', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf265', get_index_2, reduction)
        return store_reduction
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op264_op265_op267.snodes[2] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 33554432}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf263', c0, {c0: 33554432}, None),
        MemoryDep('buf264', c0, {c0: 32768}, None),
        MemoryDep('buf265', c0, {c0: 32768}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (33554432, 1)
op267.sizes = ([32768, 1024], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf265_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op267_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf264', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf265', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf267', get_index_3, truediv, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op264_op265_op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp9, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op266.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf266.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op266.node.kernel = extern_kernels.mm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 2097152}, None)]
op268.unmet_dependencies = [   MemoryDep('buf266', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (2097152, 1)
op268.sizes = ([4, 8, 1024, 64], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op268_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf268', get_index_1, load, None)
        return store
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf267', mode=None), StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = extern_kernels.bmm


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 2097152}, None)]
op270.unmet_dependencies = [   MemoryDep('buf269', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (2097152, 1)
op270.sizes = ([4, 1024, 8, 64], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op270_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf270', get_index_1, load, None)
        return store
op270 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272_op273_op274: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op272_op273_op274.writes = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf273', c0, {c0: 4096}, None),
        MemoryDep('buf274', c0, {c0: 2097152}, None)]
op272_op273_op274.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf256', c0, {c0: 2097152}, None),
        MemoryDep('buf271', c0, {c0: 2097152}, None)]
op272_op273_op274.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 4096, c1: 512}, None)]
op272_op273_op274.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
    ]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op272_op273_op274.snodes[0] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 2097152}, None)]
op272.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf256', c0, {c0: 2097152}, None),
        MemoryDep('buf271', c0, {c0: 2097152}, None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
    ]
]
op272.group.device = cuda:0
op272.group.iteration = (2097152, 1)
op272.sizes = ([2097152], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op272_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf271', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf272', get_index_5, add_3, None)
        return store
op272 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op272_op273_op274.snodes[1] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 4096}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 2097152}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (4096, 512)
op273.sizes = ([4096], [512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op273_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf273', get_index_1, reduction)
        return store_reduction
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op272_op273_op274.snodes[2] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 2097152}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf273', c0, {c0: 4096}, None)]
op274.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 4096, c1: 512}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (2097152, 1)
op274.sizes = ([4096, 512], [])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op274_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg105_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf272', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf273', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf274', get_index_3, mul_1, None)
        return store
op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op272_op273_op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.node.kernel = extern_kernels.mm


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 8388608}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 8388608}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (8388608, 1)
op276.sizes = ([8388608], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op276_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf276', get_index_1, relu, None)
        return store
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
    ]
]
op277.node.kernel = extern_kernels.mm


op278_op279: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op278_op279.writes = 
    [   MemoryDep('buf278', c0, {c0: 4096}, None),
        MemoryDep('buf279', c0, {c0: 2097152}, None)]
op278_op279.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None)]
op278_op279.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 4096, c1: 512}, None)]
op278_op279.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op278_op279.snodes[0] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 4096}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (4096, 512)
op278.sizes = ([4096], [512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op278_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf278', get_index_2, reduction)
        return store_reduction
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op278_op279.snodes[1] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 2097152}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf278', c0, {c0: 4096}, None)]
op279.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 4096, c1: 512}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op279.group.device = cuda:0
op279.group.iteration = (2097152, 1)
op279.sizes = ([4096, 512], [])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op279_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg110_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf272', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf277', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf278', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf279', get_index_4, mul_1, None)
        return store
op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op278_op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op281.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 2097152}, None)]
op282.unmet_dependencies = [   MemoryDep('buf280', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (2097152, 1)
op282.sizes = ([4, 8, 1024, 64], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op282_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 2097152}, None)]
op283.unmet_dependencies = [MemoryDep('buf281', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (2097152, 1)
op283.sizes = ([4, 512, 1024], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op283_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf283', get_index_1, load, None)
        return store
op283 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op284: ExternKernelSchedulerNode(ExternKernelOut)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf282', mode=None), StarDep(name='buf283', mode=None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ExternKernelOut
    buf284.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.bmm


op285_op286_op287_op289: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op285_op286_op287_op289.writes = 
    [   MemoryDep('buf285', c0, {c0: 33554432}, None),
        MemoryDep('buf286', c0, {c0: 32768}, None),
        MemoryDep('buf287', c0, {c0: 32768}, None),
        MemoryDep('buf289', c0, {c0: 33554432}, None)]
op285_op286_op287_op289.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 33554432}, None)]
op285_op286_op287_op289.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op285_op286_op287_op289.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf287.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op285_op286_op287_op289.snodes[0] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 33554432}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 33554432}, None)]
op285.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (33554432, 1)
op285.sizes = ([4, 8, 1024, 1024], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op285_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 8*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg57_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf285', get_index_7, add_3, None)
        return store
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op285_op286_op287_op289.snodes[1] =
op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 32768}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 33554432}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (32768, 1024)
op286.sizes = ([32768], [1024])
buf285_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op286_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf286', get_index_1, reduction)
        return store_reduction
op286 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op285_op286_op287_op289.snodes[2] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 32768}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 33554432}, None),
        MemoryDep('buf286', c0, {c0: 32768}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf287.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (32768, 1024)
op287.sizes = ([32768], [1024])
buf285_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf287_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op287_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf286', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf287', get_index_2, reduction)
        return store_reduction
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op285_op286_op287_op289.snodes[3] =
op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 33554432}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 33554432}, None),
        MemoryDep('buf286', c0, {c0: 32768}, None),
        MemoryDep('buf287', c0, {c0: 32768}, None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (33554432, 1)
op289.sizes = ([32768, 1024], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf287_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf289_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op289_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf286', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf287', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf289', get_index_3, truediv, None)
        return store
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op285_op286_op287_op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [RBLOCK])
        tmp37 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp35, 0))
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [RBLOCK])
        tmp42 = triton_helpers.promote_to_tensor(tl.sum(tmp40, 0))
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp43, None)


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op288.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf288.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op288.node.kernel = extern_kernels.mm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 2097152}, None)]
op290.unmet_dependencies = [   MemoryDep('buf288', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (2097152, 1)
op290.sizes = ([4, 8, 1024, 64], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op290_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf289', mode=None), StarDep(name='buf290', mode=None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.node.kernel = extern_kernels.bmm


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 2097152}, None)]
op292.unmet_dependencies = [   MemoryDep('buf291', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (2097152, 1)
op292.sizes = ([4, 1024, 8, 64], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op292_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf292', get_index_1, load, None)
        return store
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
    ]
]
op293.node.kernel = extern_kernels.mm


op294_op295: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op294_op295.writes = 
    [   MemoryDep('buf294', c0, {c0: 4096}, None),
        MemoryDep('buf295', c0, {c0: 2097152}, None)]
op294_op295.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None)]
op294_op295.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 4096, c1: 512}, None)]
op294_op295.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294_op295.snodes[0] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 4096}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (4096, 512)
op294.sizes = ([4096], [512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op294_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf293', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_3, reduction)
        return store_reduction
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op294_op295.snodes[1] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 2097152}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None),
        MemoryDep('buf294', c0, {c0: 4096}, None)]
op295.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 4096, c1: 512}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (2097152, 1)
op295.sizes = ([4096, 512], [])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf295_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op295_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg115_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf272', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf277', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf293', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf294', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf295', get_index_5, mul_1, None)
        return store
op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op294_op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op296: ExternKernelSchedulerNode(ExternKernelOut)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelOut
    buf296.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf296.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op296.node.kernel = extern_kernels.mm


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op297.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf297.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 2097152}, None)]
op298.unmet_dependencies = [   MemoryDep('buf296', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (2097152, 1)
op298.sizes = ([4, 8, 1024, 64], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op298_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf298', get_index_1, load, None)
        return store
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 2097152}, None)]
op299.unmet_dependencies = [MemoryDep('buf297', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (2097152, 1)
op299.sizes = ([4, 512, 1024], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op299_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf299', get_index_1, load, None)
        return store
op299 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf298', mode=None), StarDep(name='buf299', mode=None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
    ]
]
op300.node.kernel = extern_kernels.bmm


op301_op302_op304: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op301_op302_op304.writes = 
    [   MemoryDep('buf301', c0, {c0: 32768}, None),
        MemoryDep('buf302', c0, {c0: 32768}, None),
        MemoryDep('buf304', c0, {c0: 33554432}, None)]
op301_op302_op304.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 33554432}, None)]
op301_op302_op304.met_dependencies = []
op301_op302_op304.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf301.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op301_op302_op304.snodes[0] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 32768}, None)]
op301.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 33554432}, None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf301.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
]
op301.group.device = cuda:0
op301.group.iteration = (32768, 1024)
op301.sizes = ([32768], [1024])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op301_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_1, reduction)
        return store_reduction
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op301_op302_op304.snodes[1] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 32768}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 33554432}, None),
        MemoryDep('buf301', c0, {c0: 32768}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (32768, 1024)
op302.sizes = ([32768], [1024])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf302_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op302_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf301', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf302', get_index_2, reduction)
        return store_reduction
op302 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op301_op302_op304.snodes[2] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 33554432}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 33554432}, None),
        MemoryDep('buf301', c0, {c0: 32768}, None),
        MemoryDep('buf302', c0, {c0: 32768}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (33554432, 1)
op304.sizes = ([32768, 1024], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf302_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf304_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op304_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf301', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf302', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf304', get_index_3, truediv, None)
        return store
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op301_op302_op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp9, None)


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op303.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.node.kernel = extern_kernels.mm


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 2097152}, None)]
op305.unmet_dependencies = [   MemoryDep('buf303', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (2097152, 1)
op305.sizes = ([4, 8, 1024, 64], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op305_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf305', get_index_1, load, None)
        return store
op305 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf304', mode=None), StarDep(name='buf305', mode=None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf306.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.node.kernel = extern_kernels.bmm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 2097152}, None)]
op307.unmet_dependencies = [   MemoryDep('buf306', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (2097152, 1)
op307.sizes = ([4, 1024, 8, 64], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op307_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf307', get_index_1, load, None)
        return store
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op308.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
    ]
]
op308.node.kernel = extern_kernels.mm


op309_op310: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op309_op310.writes = 
    [   MemoryDep('buf309', c0, {c0: 4096}, None),
        MemoryDep('buf310', c0, {c0: 2097152}, None)]
op309_op310.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None),
        MemoryDep('buf308', c0, {c0: 2097152}, None)]
op309_op310.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 4096, c1: 512}, None)]
op309_op310.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309_op310.snodes[0] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 4096}, None)]
op309.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None),
        MemoryDep('buf308', c0, {c0: 2097152}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (4096, 512)
op309.sizes = ([4096], [512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op309_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf293', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf308', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf309', get_index_4, reduction)
        return store_reduction
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op309_op310.snodes[1] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 2097152}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None),
        MemoryDep('buf308', c0, {c0: 2097152}, None),
        MemoryDep('buf309', c0, {c0: 4096}, None)]
op310.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 4096, c1: 512}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (2097152, 1)
op310.sizes = ([4096, 512], [])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf310_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op310_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg118_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf272', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf277', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf293', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf308', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf309', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf310', get_index_6, mul_1, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op309_op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 8388608}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 8388608}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (8388608, 1)
op312.sizes = ([8388608], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op312_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, relu, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False)]
]
op313.node.kernel = extern_kernels.mm


op314_op315_op316: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op314_op315_op316.writes = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf315', c0, {c0: 4096}, None),
        MemoryDep('buf316', c0, {c0: 2097152}, None)]
op314_op315_op316.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None),
        MemoryDep('buf308', c0, {c0: 2097152}, None),
        MemoryDep('buf313', c0, {c0: 2097152}, None)]
op314_op315_op316.met_dependencies = [MemoryDep('arg123_1', c1, {c0: 4096, c1: 512}, None)]
op314_op315_op316.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf314.users = [
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf315.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op314_op315_op316.snodes[0] =
op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 2097152}, None)]
op314.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 2097152}, None),
        MemoryDep('buf277', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None),
        MemoryDep('buf308', c0, {c0: 2097152}, None),
        MemoryDep('buf313', c0, {c0: 2097152}, None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf314.users = [
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op314.group.device = cuda:0
op314.group.iteration = (2097152, 1)
op314.sizes = ([2097152], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op314_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf293', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf308', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf313', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf314', get_index_5, add_3, None)
        return store
op314 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op314_op315_op316.snodes[1] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 4096}, None)]
op315.unmet_dependencies = [MemoryDep('buf314', c0, {c0: 2097152}, None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf315.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (4096, 512)
op315.sizes = ([4096], [512])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op315_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf315', get_index_1, reduction)
        return store_reduction
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op314_op315_op316.snodes[2] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 2097152}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf315', c0, {c0: 4096}, None)]
op316.met_dependencies = [MemoryDep('arg123_1', c1, {c0: 4096, c1: 512}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (2097152, 1)
op316.sizes = ([4096, 512], [])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf316_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op316_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg123_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf315', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf316', get_index_3, mul_1, None)
        return store
op316 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op314_op315_op316 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op317.node.kernel = extern_kernels.mm


op318: ExternKernelSchedulerNode(ExternKernelOut)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op318.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelOut
    buf318.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op318.node.kernel = extern_kernels.mm


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 2097152}, None)]
op319.unmet_dependencies = [   MemoryDep('buf317', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (2097152, 1)
op319.sizes = ([4, 8, 1024, 64], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op319_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf319', get_index_1, load, None)
        return store
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 2097152}, None)]
op320.unmet_dependencies = [MemoryDep('buf318', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (2097152, 1)
op320.sizes = ([4, 512, 1024], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op320_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf320', get_index_1, load, None)
        return store
op320 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf319', mode=None), StarDep(name='buf320', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
]
op321.node.kernel = extern_kernels.bmm


op322_op323_op324_op326: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op322_op323_op324_op326.writes = 
    [   MemoryDep('buf322', c0, {c0: 33554432}, None),
        MemoryDep('buf323', c0, {c0: 32768}, None),
        MemoryDep('buf324', c0, {c0: 32768}, None),
        MemoryDep('buf326', c0, {c0: 33554432}, None)]
op322_op323_op324_op326.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 33554432}, None)]
op322_op323_op324_op326.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op322_op323_op324_op326.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
    ]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op322_op323_op324_op326.snodes[0] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 33554432}, None)]
op322.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 33554432}, None)]
op322.met_dependencies = [MemoryDep('arg57_1', c1 + 8*tmp20, {c0: 4, c1: 8}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op322.group.device = cuda:0
op322.group.iteration = (33554432, 1)
op322.sizes = ([4, 8, 1024, 1024], [])
buf321_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32, 8], stride=[8, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op322_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 1024}
    index0 = 8388608*z0 + 1048576*z1 + 1024*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 8*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg57_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf322', get_index_7, add_3, None)
        return store
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576) % 8
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op322_op323_op324_op326.snodes[1] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 32768}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 33554432}, None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
    ]
]
op323.group.device = cuda:0
op323.group.iteration = (32768, 1024)
op323.sizes = ([32768], [1024])
buf322_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op323_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf323', get_index_1, reduction)
        return store_reduction
op323 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op322_op323_op324_op326.snodes[2] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 32768}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 33554432}, None),
        MemoryDep('buf323', c0, {c0: 32768}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (32768, 1024)
op324.sizes = ([32768], [1024])
buf322_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf324_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op324_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf323', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_2, reduction)
        return store_reduction
op324 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op322_op323_op324_op326.snodes[3] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 33554432}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 33554432}, None),
        MemoryDep('buf323', c0, {c0: 32768}, None),
        MemoryDep('buf324', c0, {c0: 32768}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (33554432, 1)
op326.sizes = ([32768, 1024], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf324_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf326_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op326_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf323', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf324', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf326', get_index_3, truediv, None)
        return store
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op322_op323_op324_op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 8
        tmp0 = tl.load(in_out_ptr0 + (r3 + (1024*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (8*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [RBLOCK])
        tmp37 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp35, 0))
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [RBLOCK])
        tmp42 = triton_helpers.promote_to_tensor(tl.sum(tmp40, 0))
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (1024*x4)), tmp43, None)


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op325.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op325.node.kernel = extern_kernels.mm


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 2097152}, None)]
op327.unmet_dependencies = [   MemoryDep('buf325', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (2097152, 1)
op327.sizes = ([4, 8, 1024, 64], [])
buf325_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op327_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf327', get_index_1, load, None)
        return store
op327 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf326', mode=None), StarDep(name='buf327', mode=None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.node.kernel = extern_kernels.bmm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 2097152}, None)]
op329.unmet_dependencies = [   MemoryDep('buf328', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (2097152, 1)
op329.sizes = ([4, 1024, 8, 64], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op329_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf329', get_index_1, load, None)
        return store
op329 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op330: ExternKernelSchedulerNode(ExternKernelOut)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelOut
    buf330.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op330.node.kernel = extern_kernels.mm


op331_op332: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op331_op332.writes = 
    [   MemoryDep('buf331', c0, {c0: 4096}, None),
        MemoryDep('buf332', c0, {c0: 2097152}, None)]
op331_op332.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None)]
op331_op332.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 512}, None)]
op331_op332.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op331_op332.snodes[0] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 4096}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (4096, 512)
op331.sizes = ([4096], [512])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op331_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf330', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf331', get_index_2, reduction)
        return store_reduction
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op331_op332.snodes[1] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 2097152}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf331', c0, {c0: 4096}, None)]
op332.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 512}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (2097152, 1)
op332.sizes = ([4096, 512], [])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op332_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg128_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf330', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf331', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf332', get_index_4, mul_1, None)
        return store
op332 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op331_op332 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op333: ExternKernelSchedulerNode(ExternKernelOut)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelOut
    buf333.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.node.kernel = extern_kernels.mm


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op334.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op334.node.kernel = extern_kernels.mm


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 2097152}, None)]
op335.unmet_dependencies = [   MemoryDep('buf333', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (2097152, 1)
op335.sizes = ([4, 8, 1024, 64], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op335_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf335', get_index_1, load, None)
        return store
op335 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 2097152}, None)]
op336.unmet_dependencies = [MemoryDep('buf334', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}, None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (2097152, 1)
op336.sizes = ([4, 512, 1024], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 64, 1024], stride=[524288, 65536, 1024, 1])
class op336_loop_body:
    var_ranges = {z0: 4, z1: 512, z2: 1024}
    index0 = 524288*z0 + z1 + 512*z2
    index1 = 524288*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf336', get_index_1, load, None)
        return store
op336 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048, 1024], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 2048
        xnumel = 1024
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (1024*y3)), tmp0, xmask)


op337: ExternKernelSchedulerNode(ExternKernelOut)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf335', mode=None), StarDep(name='buf336', mode=None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ExternKernelOut
    buf337.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False),
    ]
]
op337.node.kernel = extern_kernels.bmm


op338_op339_op341: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op338_op339_op341.writes = 
    [   MemoryDep('buf338', c0, {c0: 32768}, None),
        MemoryDep('buf339', c0, {c0: 32768}, None),
        MemoryDep('buf341', c0, {c0: 33554432}, None)]
op338_op339_op341.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 33554432}, None)]
op338_op339_op341.met_dependencies = []
op338_op339_op341.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf339.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op338_op339_op341.snodes[0] =
op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 32768}, None)]
op338.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 33554432}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (32768, 1024)
op338.sizes = ([32768], [1024])
buf337_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op338_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf338', get_index_1, reduction)
        return store_reduction
op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (x0), tmp3, None)
op338_op339_op341.snodes[1] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 32768}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf337', c0, {c0: 33554432}, None),
        MemoryDep('buf338', c0, {c0: 32768}, None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
    buf339.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (32768, 1024)
op339.sizes = ([32768], [1024])
buf337_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
class op339_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf339', get_index_2, reduction)
        return store_reduction
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op338_op339_op341.snodes[2] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 33554432}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf337', c0, {c0: 33554432}, None),
        MemoryDep('buf338', c0, {c0: 32768}, None),
        MemoryDep('buf339', c0, {c0: 32768}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (33554432, 1)
op341.sizes = ([32768, 1024], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 1024], stride=[1048576, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1], stride=[8192, 1024, 1, 32768])
buf341_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 1024], stride=[8388608, 1048576, 1024, 1])
class op341_loop_body:
    var_ranges = {z0: 32768, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf339', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf341', get_index_3, truediv, None)
        return store
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op338_op339_op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp9, None)


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op340.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op340.node.kernel = extern_kernels.mm


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 2097152}, None)]
op342.unmet_dependencies = [   MemoryDep('buf340', 524288*c0 + 64*c1 + 512*c2 + c3, {c0: 4, c1: 8, c2: 1024, c3: 64}, None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (2097152, 1)
op342.sizes = ([4, 8, 1024, 64], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 8, 1024, 64], stride=[524288, 65536, 64, 1])
class op342_loop_body:
    var_ranges = {z0: 4, z1: 8, z2: 1024, z3: 64}
    index0 = 524288*z0 + 64*z1 + 512*z2 + z3
    index1 = 524288*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf342', get_index_1, load, None)
        return store
op342 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 8
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (512*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf341', mode=None), StarDep(name='buf342', mode=None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.node.kernel = extern_kernels.bmm


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 2097152}, None)]
op344.unmet_dependencies = [   MemoryDep('buf343', 524288*c0 + 64*c1 + 65536*c2 + c3, {c0: 4, c1: 1024, c2: 8, c3: 64}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (2097152, 1)
op344.sizes = ([4, 1024, 8, 64], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[32, 1024, 64], stride=[65536, 64, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 8, 64], stride=[524288, 512, 64, 1])
class op344_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 8, z3: 64}
    index0 = 524288*z0 + 64*z1 + 65536*z2 + z3
    index1 = 524288*z0 + 512*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf344', get_index_1, load, None)
        return store
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 8
        x2 = (xindex // 512) % 1024
        x3 = (xindex // 524288)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (65536*x1) + (524288*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op345.node.kernel = extern_kernels.mm


op346_op347: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op346_op347.writes = 
    [   MemoryDep('buf346', c0, {c0: 4096}, None),
        MemoryDep('buf347', c0, {c0: 2097152}, None)]
op346_op347.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf345', c0, {c0: 2097152}, None)]
op346_op347.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 4096, c1: 512}, None)]
op346_op347.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346_op347.snodes[0] =
op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 4096}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf345', c0, {c0: 2097152}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (4096, 512)
op346.sizes = ([4096], [512])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op346_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf330', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf345', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf346', get_index_3, reduction)
        return store_reduction
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op346_op347.snodes[1] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 2097152}, None)]
op347.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf345', c0, {c0: 2097152}, None),
        MemoryDep('buf346', c0, {c0: 4096}, None)]
op347.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 4096, c1: 512}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (2097152, 1)
op347.sizes = ([4096, 512], [])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf347_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op347_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg131_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf330', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf345', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf346', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf347', get_index_5, mul_1, None)
        return store
op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op346_op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op348.node.kernel = extern_kernels.mm


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 8388608}, None)]
op349.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 8388608}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (8388608, 1)
op349.sizes = ([8388608], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[4096, 2048], stride=[2048, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 2048], stride=[2097152, 2048, 1])
class op349_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf349', get_index_1, relu, None)
        return store
op349 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = triton_helpers.maximum(tmp1, tmp0)
        tl.store(in_out_ptr0 + (x0), tmp2, None)


op350: ExternKernelSchedulerNode(ExternKernelOut)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op350.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op350.outputs = [
    buf350: ExternKernelOut
    buf350.layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op350.node.kernel = extern_kernels.mm


op351_op352: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op351_op352.writes = 
    [   MemoryDep('buf351', c0, {c0: 4096}, None),
        MemoryDep('buf352', c0, {c0: 2097152}, None)]
op351_op352.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf345', c0, {c0: 2097152}, None),
        MemoryDep('buf350', c0, {c0: 2097152}, None)]
op351_op352.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 4096, c1: 512}, None)]
op351_op352.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351_op352.snodes[0] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 4096}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf345', c0, {c0: 2097152}, None),
        MemoryDep('buf350', c0, {c0: 2097152}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (4096, 512)
op351.sizes = ([4096], [512])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op351_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf330', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf345', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf350', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf351', get_index_4, reduction)
        return store_reduction
op351 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op351_op352.snodes[1] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 2097152}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None),
        MemoryDep('buf345', c0, {c0: 2097152}, None),
        MemoryDep('buf350', c0, {c0: 2097152}, None),
        MemoryDep('buf351', c0, {c0: 4096}, None)]
op352.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 4096, c1: 512}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (2097152, 1)
op352.sizes = ([4096, 512], [])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[4096, 512], stride=[512, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op352_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg132_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf330', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf345', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf350', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf351', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        constant_2 = ops.constant(0.04419417382415922, torch.float32)
        mul_2 = ops.mul(mul_1, constant_2)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf352', get_index_6, mul_2, None)
        return store
op352 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tmp16 = 0.04419417382415922
        tmp17 = tmp15 * tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op351_op352 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tmp19 = 0.04419417382415922
        tmp20 = tmp18 * tmp19
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='arg1_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[4096, 32128], stride=[32128, 1])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op353.node.kernel = extern_kernels.mm


op354_op355: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op354_op355.writes = 
    [   MemoryDep('buf354', c0, {c0: 4096}, None),
        MemoryDep('buf355', c0, {c0: 4096}, None)]
op354_op355.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 131596288}, None)]
op354_op355.met_dependencies = []
op354_op355.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op354_op355.snodes[0] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 4096}, None)]
op354.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 131596288}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (4096, 32128)
op354.sizes = ([4096], [32128])
buf353_layout = FixedLayout('cuda', torch.float32, size=[4096, 32128], stride=[32128, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op354_loop_body:
    var_ranges = {z0: 4096, z1: 32128}
    index0 = 32128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf354', get_index_1, reduction)
        return store_reduction
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 32128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
op354_op355.snodes[1] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 4096}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf353', c0, {c0: 131596288}, None),
        MemoryDep('buf354', c0, {c0: 4096}, None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (4096, 32128)
op355.sizes = ([4096], [32128])
buf353_layout = FixedLayout('cuda', torch.float32, size=[4096, 32128], stride=[32128, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf355_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op355_loop_body:
    var_ranges = {z0: 4096, z1: 32128}
    index0 = 32128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf354', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf355', get_index_2, reduction)
        return store_reduction
op355 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 32128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)
op354_op355 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 32128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
        _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp4 = tl.load(in_ptr0 + (r1 + (32128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tmp4 - tmp2
            tmp6 = tl_math.exp(tmp5)
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = _tmp8 + tmp7
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = tl.sum(_tmp8, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp8, None)


op356_op357_op358: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op356_op357_op358.writes = 
    [   MemoryDep('buf356', 0, {}, None),
        MemoryDep('buf357', 0, {}, None),
        MemoryDep('buf358', 0, {}, None)]
op356_op357_op358.unmet_dependencies = 
    [   MemoryDep('buf353', 32128*c0 + tmp8, {c0: 4096}, None),
        MemoryDep('buf354', c0, {c0: 4096}, None),
        MemoryDep('buf355', c0, {c0: 4096}, None)]
op356_op357_op358.met_dependencies = [MemoryDep('arg52_1', c0, {c0: 4096}, None)]
op356_op357_op358.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf358.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op356_op357_op358.snodes[0] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', 0, {}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf353', 32128*c0 + tmp8, {c0: 4096}, None),
        MemoryDep('buf354', c0, {c0: 4096}, None),
        MemoryDep('buf355', c0, {c0: 4096}, None)]
op356.met_dependencies = [MemoryDep('arg52_1', c0, {c0: 4096}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (1, 4096)
op356.sizes = ([], [4096])
arg52_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[4096, 32128], stride=[32128, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf355_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf356_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op356_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = indirect0 + 32128*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg52_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg52_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg52_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf353', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf354', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf355', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf356', get_index_6, reduction)
        return store_reduction
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 32128)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 32128")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (32128*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)
op356_op357_op358.snodes[1] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', 0, {}, None)]
op357.unmet_dependencies = []
op357.met_dependencies = [MemoryDep('arg52_1', c0, {c0: 4096}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1, 4096)
op357.sizes = ([], [4096])
arg52_1_layout = FixedLayout('cuda', torch.int64, size=[4, 1024], stride=[1024, 1])
buf357_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op357_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg52_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf357', get_index_1, reduction)
        return store_reduction
op357 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)
op356_op357_op358.snodes[2] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', 0, {}, None)]
op358.unmet_dependencies = [MemoryDep('buf356', 0, {}, None), MemoryDep('buf357', 0, {}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf358.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (1, 1)
op358.sizes = ([], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf357_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf358_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op358_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf357', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf358', get_index_2, truediv, None)
        return store
op358 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)
op356_op357_op358 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 32128, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 32128)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 32128")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (32128*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
            tmp22 = tmp2.to(tl.int64)
            tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
            tmp25 = _tmp24 + tmp23
            _tmp24 = tl.where(rmask, tmp25, _tmp24)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tmp24 = tl.sum(_tmp24, 1)[:, None]
        tmp26 = tmp24.to(tl.float32)
        tmp27 = tmp20 / tmp26
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp27, None)



op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 512}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c0, {c0: 512}, None),
        MemoryDep('arg2_1', c1 + 1536*tmp0, {c0: 512, c1: 1536}, None),
        MemoryDep('arg3_1', c1 + 1536*tmp2, {c0: 512, c1: 1536}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (512, 1536)
op0.sizes = ([512], [1536])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128100, 1536], stride=[1536, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op0_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = z0
    index1 = 1536*indirect0 + z1
    index2 = 1536*indirect1 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_4, getitem)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x0), xmask, eviction_policy='evict_last')
        tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 128100, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert(((0 <= tmp4) & (tmp4 < 128100)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 128100")
            tmp6 = tl.load(in_ptr1 + (r1 + (1536*tmp4)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
            tmp9 = tmp7 + tmp8
            tmp10 = tmp7 < 0
            tmp11 = tl.where(tmp10, tmp9, tmp7)
            tl.device_assert(((0 <= tmp11) & (tmp11 < 512)) | ~(xmask), "index out of bounds: 0 <= tmp11 < 512")
            tmp13 = tl.load(in_ptr3 + (r1 + (1536*tmp11)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp6 + tmp13
            tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
            tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
                tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
            )
            tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
            tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
            tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
            tmp16_mean, tmp16_m2, tmp16_weight, 1
        )
        tmp16 = tmp16_tmp[:, None]
        tmp17 = tmp17_tmp[:, None]
        tmp18 = tmp18_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp16, xmask)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 512}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c0, {c0: 512}, None),
        MemoryDep('arg2_1', c1 + 1536*tmp0, {c0: 512, c1: 1536}, None),
        MemoryDep('arg3_1', c1 + 1536*tmp2, {c0: 512, c1: 1536}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (512, 1536)
op1.sizes = ([512], [1536])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128100, 1536], stride=[1536, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op1_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = z0
    index1 = 1536*indirect0 + z1
    index2 = 1536*indirect1 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_4, getitem_1)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x0), xmask, eviction_policy='evict_last')
        tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 128100, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert(((0 <= tmp4) & (tmp4 < 128100)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 128100")
            tmp6 = tl.load(in_ptr1 + (r1 + (1536*tmp4)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
            tmp9 = tmp7 + tmp8
            tmp10 = tmp7 < 0
            tmp11 = tl.where(tmp10, tmp9, tmp7)
            tl.device_assert(((0 <= tmp11) & (tmp11 < 512)) | ~(xmask), "index out of bounds: 0 <= tmp11 < 512")
            tmp13 = tl.load(in_ptr3 + (r1 + (1536*tmp11)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp6 + tmp13
            tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
            tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
                tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
            )
            tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
            tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
            tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
            tmp16_mean, tmp16_m2, tmp16_weight, 1
        )
        tmp16 = tmp16_tmp[:, None]
        tmp17 = tmp17_tmp[:, None]
        tmp18 = tmp18_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp17, xmask)


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 786432}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 512}, None), MemoryDep('buf1', c0, {c0: 512}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c0, {c0: 512}, None),
        MemoryDep('arg2_1', c1 + 1536*tmp0, {c0: 512, c1: 1536}, None),
        MemoryDep('arg3_1', c1 + 1536*tmp2, {c0: 512, c1: 1536}, None),
        MemoryDep('arg4_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg5_1', c1, {c0: 512, c1: 1536}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (786432, 1)
op3.sizes = ([512, 1536], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128100, 1536], stride=[1536, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf1_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op3_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = z0
    index1 = 1536*indirect0 + z1
    index2 = 1536*indirect1 + z1
    index3 = z1
    index4 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf0', get_index_4)
        sub = ops.sub(add, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg4_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg5_1', get_index_7)
        add_2 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf3', get_index_8, add_2, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 1536)
        x0 = xindex % 1536
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp15 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp24 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 128100, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 128100), "index out of bounds: 0 <= tmp4 < 128100")
        tmp6 = tl.load(in_ptr1 + (x0 + (1536*tmp4)), None)
        tmp8 = tl.full([XBLOCK], 512, tl.int32)
        tmp9 = tmp7 + tmp8
        tmp10 = tmp7 < 0
        tmp11 = tl.where(tmp10, tmp9, tmp7)
        tl.device_assert((0 <= tmp11) & (tmp11 < 512), "index out of bounds: 0 <= tmp11 < 512")
        tmp13 = tl.load(in_ptr3 + (x0 + (1536*tmp11)), None)
        tmp14 = tmp6 + tmp13
        tmp16 = tmp14 - tmp15
        tmp18 = 1536.0
        tmp19 = tmp17 / tmp18
        tmp20 = 1e-07
        tmp21 = tmp19 + tmp20
        tmp22 = libdevice.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp25 = tmp23 * tmp24
        tmp27 = tmp25 + tmp26
        tl.store(out_ptr0 + (x2), tmp27, None)


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 786432}, None)]
op6.unmet_dependencies = [MemoryDep('buf4', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op6.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (786432, 1)
op6.sizes = ([24, 512, 64], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op6_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, add, None)
        return store
op6 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 786432}, None)]
op7.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 786432}, None)]
op7.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 512, c1: 1536}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (786432, 1)
op7.sizes = ([512, 1536], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op7_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf7', get_index_2, mul, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 12288}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 6291456}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (12288, 512)
op9.sizes = ([12288], [512])
buf8_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op9_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_1, reduction)
        return store_reduction
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 12288}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf8', c0, {c0: 6291456}, None),
        MemoryDep('buf9', c0, {c0: 12288}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (12288, 512)
op10.sizes = ([12288], [512])
buf8_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf10_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op10_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf9', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_2, reduction)
        return store_reduction
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op11.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 6291456}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 12288}, None),
        MemoryDep('buf8', c0, {c0: 6291456}, None),
        MemoryDep('buf9', c0, {c0: 12288}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (6291456, 1)
op12.sizes = ([12288, 512], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf10_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op12_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf9', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf10', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf12', get_index_3, where_1, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 786432}, None)]
op13.unmet_dependencies = [MemoryDep('buf11', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op13.met_dependencies = [MemoryDep('arg11_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (786432, 1)
op13.sizes = ([24, 512, 64], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op13_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg11_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf13', get_index_2, add, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.bmm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 786432}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (786432, 1)
op15.sizes = ([512, 24, 64], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op15_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 512}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 786432}, None),
        MemoryDep('buf3', c0, {c0: 786432}, None)]
op17.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 512, c1: 1536}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (512, 1536)
op17.sizes = ([512], [1536])
buf16_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op17_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem)
        return store_reduction
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 512}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 786432}, None),
        MemoryDep('buf3', c0, {c0: 786432}, None)]
op18.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 512, c1: 1536}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (512, 1536)
op18.sizes = ([512], [1536])
buf16_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op18_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, getitem_1)
        return store_reduction
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 786432}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 786432}, None),
        MemoryDep('buf17', c0, {c0: 512}, None),
        MemoryDep('buf18', c0, {c0: 512}, None),
        MemoryDep('buf3', c0, {c0: 786432}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg14_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg15_1', c1, {c0: 512, c1: 1536}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (786432, 1)
op20.sizes = ([512, 1536], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op20_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf17', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf18', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg14_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg15_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf20', get_index_7, add_3, None)
        return store
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.mm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 3145728}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 3145728}, None)]
op22.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 512, c1: 6144}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (3145728, 1)
op22.sizes = ([512, 6144], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op22_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg17_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf22', get_index_4, mul_2, None)
        return store
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 512}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 786432}, None),
        MemoryDep('buf23', c0, {c0: 786432}, None)]
op24.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 512, c1: 1536}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (512, 1536)
op24.sizes = ([512], [1536])
buf23_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op24_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf20', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem)
        return store_reduction
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 512}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 786432}, None),
        MemoryDep('buf23', c0, {c0: 786432}, None)]
op25.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 512, c1: 1536}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (512, 1536)
op25.sizes = ([512], [1536])
buf23_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op25_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf20', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem_1)
        return store_reduction
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 786432}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 786432}, None),
        MemoryDep('buf23', c0, {c0: 786432}, None),
        MemoryDep('buf24', c0, {c0: 512}, None),
        MemoryDep('buf25', c0, {c0: 512}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg20_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg21_1', c1, {c0: 512, c1: 1536}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf27.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (786432, 1)
op27.sizes = ([512, 1536], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf25_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op27_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf20', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf24', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf25', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg20_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg21_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf27', get_index_7, add_3, None)
        return store
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.mm


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op29.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 786432}, None)]
op30.unmet_dependencies = [MemoryDep('buf28', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op30.met_dependencies = [MemoryDep('arg23_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (786432, 1)
op30.sizes = ([24, 512, 64], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op30_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, add, None)
        return store
op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 786432}, None)]
op31.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 786432}, None)]
op31.met_dependencies = [MemoryDep('arg25_1', c1, {c0: 512, c1: 1536}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (786432, 1)
op31.sizes = ([512, 1536], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op31_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf31', get_index_2, mul, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None), StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.bmm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 12288}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 6291456}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (12288, 512)
op33.sizes = ([12288], [512])
buf32_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op33_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_1, reduction)
        return store_reduction
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 12288}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 12288}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (12288, 512)
op34.sizes = ([12288], [512])
buf32_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op34_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_2, reduction)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op35.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 6291456}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 12288}, None),
        MemoryDep('buf34', c0, {c0: 12288}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (6291456, 1)
op36.sizes = ([12288, 512], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op36_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf34', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf36', get_index_3, where_1, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 786432}, None)]
op37.unmet_dependencies = [MemoryDep('buf35', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op37.met_dependencies = [MemoryDep('arg27_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (786432, 1)
op37.sizes = ([24, 512, 64], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op37_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf37', get_index_2, add, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = extern_kernels.bmm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 786432}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (786432, 1)
op39.sizes = ([512, 24, 64], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op39_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 512}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 786432}, None),
        MemoryDep('buf40', c0, {c0: 786432}, None)]
op41.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 512, c1: 1536}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (512, 1536)
op41.sizes = ([512], [1536])
buf40_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op41_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem)
        return store_reduction
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 512}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 786432}, None),
        MemoryDep('buf40', c0, {c0: 786432}, None)]
op42.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 512, c1: 1536}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (512, 1536)
op42.sizes = ([512], [1536])
buf40_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op42_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf42', get_index_3, getitem_1)
        return store_reduction
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 786432}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 786432}, None),
        MemoryDep('buf40', c0, {c0: 786432}, None),
        MemoryDep('buf41', c0, {c0: 512}, None),
        MemoryDep('buf42', c0, {c0: 512}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg30_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg31_1', c1, {c0: 512, c1: 1536}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf44.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (786432, 1)
op44.sizes = ([512, 1536], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op44_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf41', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf42', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg30_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg31_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf44', get_index_7, add_3, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.mm


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 3145728}, None)]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 3145728}, None)]
op46.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 512, c1: 6144}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (3145728, 1)
op46.sizes = ([512, 6144], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op46_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg33_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf46', get_index_4, mul_2, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 512}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 786432}, None),
        MemoryDep('buf47', c0, {c0: 786432}, None)]
op48.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 512, c1: 1536}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf48.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (512, 1536)
op48.sizes = ([512], [1536])
buf47_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op48_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf48', get_index_3, getitem)
        return store_reduction
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 512}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 786432}, None),
        MemoryDep('buf47', c0, {c0: 786432}, None)]
op49.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 512, c1: 1536}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (512, 1536)
op49.sizes = ([512], [1536])
buf47_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op49_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf49', get_index_3, getitem_1)
        return store_reduction
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 786432}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 786432}, None),
        MemoryDep('buf47', c0, {c0: 786432}, None),
        MemoryDep('buf48', c0, {c0: 512}, None),
        MemoryDep('buf49', c0, {c0: 512}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg36_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg37_1', c1, {c0: 512, c1: 1536}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (786432, 1)
op51.sizes = ([512, 1536], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf49_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op51_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf48', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf49', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg36_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg37_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf51', get_index_7, add_3, None)
        return store
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = extern_kernels.mm


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op53.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 786432}, None)]
op54.unmet_dependencies = [MemoryDep('buf52', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op54.met_dependencies = [MemoryDep('arg39_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (786432, 1)
op54.sizes = ([24, 512, 64], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op54_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf54', get_index_2, add, None)
        return store
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 786432}, None)]
op55.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 786432}, None)]
op55.met_dependencies = [MemoryDep('arg41_1', c1, {c0: 512, c1: 1536}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (786432, 1)
op55.sizes = ([512, 1536], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op55_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf55', get_index_2, mul, None)
        return store
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf54', mode=None), StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
    ]
]
op56.node.kernel = extern_kernels.bmm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 12288}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 6291456}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (12288, 512)
op57.sizes = ([12288], [512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op57_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, reduction)
        return store_reduction
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 12288}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 6291456}, None),
        MemoryDep('buf57', c0, {c0: 12288}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf58.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (12288, 512)
op58.sizes = ([12288], [512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op58_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf58', get_index_2, reduction)
        return store_reduction
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op59.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 6291456}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 6291456}, None),
        MemoryDep('buf57', c0, {c0: 12288}, None),
        MemoryDep('buf58', c0, {c0: 12288}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (6291456, 1)
op60.sizes = ([12288, 512], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op60_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf58', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf60', get_index_3, where_1, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 786432}, None)]
op61.unmet_dependencies = [MemoryDep('buf59', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op61.met_dependencies = [MemoryDep('arg43_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (786432, 1)
op61.sizes = ([24, 512, 64], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op61_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf61', get_index_2, add, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None), StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.bmm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 786432}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (786432, 1)
op63.sizes = ([512, 24, 64], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op63_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf63', get_index_1, load, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.mm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 512}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 786432}, None),
        MemoryDep('buf64', c0, {c0: 786432}, None)]
op65.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 512, c1: 1536}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (512, 1536)
op65.sizes = ([512], [1536])
buf64_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op65_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf51', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, getitem)
        return store_reduction
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 512}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 786432}, None),
        MemoryDep('buf64', c0, {c0: 786432}, None)]
op66.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 512, c1: 1536}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (512, 1536)
op66.sizes = ([512], [1536])
buf64_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op66_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf51', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_3, getitem_1)
        return store_reduction
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 786432}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 786432}, None),
        MemoryDep('buf64', c0, {c0: 786432}, None),
        MemoryDep('buf65', c0, {c0: 512}, None),
        MemoryDep('buf66', c0, {c0: 512}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg46_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg47_1', c1, {c0: 512, c1: 1536}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf68.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (786432, 1)
op68.sizes = ([512, 1536], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf66_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op68_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf51', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf65', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg46_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg47_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add_3, None)
        return store
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.mm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 3145728}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 3145728}, None)]
op70.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 512, c1: 6144}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (3145728, 1)
op70.sizes = ([512, 6144], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op70_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf69', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf70', get_index_4, mul_2, None)
        return store
op70 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op71.node.kernel = extern_kernels.mm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 512}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 786432}, None),
        MemoryDep('buf71', c0, {c0: 786432}, None)]
op72.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 512, c1: 1536}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf72.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (512, 1536)
op72.sizes = ([512], [1536])
buf71_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op72_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf72', get_index_3, getitem)
        return store_reduction
op72 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 512}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 786432}, None),
        MemoryDep('buf71', c0, {c0: 786432}, None)]
op73.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 512, c1: 1536}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf73.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (512, 1536)
op73.sizes = ([512], [1536])
buf71_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op73_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf73', get_index_3, getitem_1)
        return store_reduction
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 786432}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 786432}, None),
        MemoryDep('buf71', c0, {c0: 786432}, None),
        MemoryDep('buf72', c0, {c0: 512}, None),
        MemoryDep('buf73', c0, {c0: 512}, None)]
op75.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg52_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg53_1', c1, {c0: 512, c1: 1536}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf75.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (786432, 1)
op75.sizes = ([512, 1536], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op75_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf72', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf73', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg52_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg53_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf75', get_index_7, add_3, None)
        return store
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op77.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.mm


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 786432}, None)]
op78.unmet_dependencies = [MemoryDep('buf76', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op78.met_dependencies = [MemoryDep('arg55_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (786432, 1)
op78.sizes = ([24, 512, 64], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op78_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf78', get_index_2, add, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 786432}, None)]
op79.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 786432}, None)]
op79.met_dependencies = [MemoryDep('arg57_1', c1, {c0: 512, c1: 1536}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (786432, 1)
op79.sizes = ([512, 1536], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op79_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf79', get_index_2, mul, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None), StarDep(name='buf79', mode=None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.bmm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 12288}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 6291456}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (12288, 512)
op81.sizes = ([12288], [512])
buf80_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op81_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf81', get_index_1, reduction)
        return store_reduction
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 12288}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf80', c0, {c0: 6291456}, None),
        MemoryDep('buf81', c0, {c0: 12288}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (12288, 512)
op82.sizes = ([12288], [512])
buf80_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf82_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op82_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf81', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf82', get_index_2, reduction)
        return store_reduction
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op83.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 6291456}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf80', c0, {c0: 6291456}, None),
        MemoryDep('buf81', c0, {c0: 12288}, None),
        MemoryDep('buf82', c0, {c0: 12288}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (6291456, 1)
op84.sizes = ([12288, 512], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf82_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op84_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf81', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf82', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf84', get_index_3, where_1, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 786432}, None)]
op85.unmet_dependencies = [MemoryDep('buf83', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op85.met_dependencies = [MemoryDep('arg59_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (786432, 1)
op85.sizes = ([24, 512, 64], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op85_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf85', get_index_2, add, None)
        return store
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None), StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.bmm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 786432}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (786432, 1)
op87.sizes = ([512, 24, 64], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op87_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf87', get_index_1, load, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 512}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 786432}, None),
        MemoryDep('buf88', c0, {c0: 786432}, None)]
op89.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 512, c1: 1536}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf89.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (512, 1536)
op89.sizes = ([512], [1536])
buf88_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op89_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf75', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf89', get_index_3, getitem)
        return store_reduction
op89 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 512}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 786432}, None),
        MemoryDep('buf88', c0, {c0: 786432}, None)]
op90.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 512, c1: 1536}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (512, 1536)
op90.sizes = ([512], [1536])
buf88_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op90_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf75', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf90', get_index_3, getitem_1)
        return store_reduction
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 786432}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 786432}, None),
        MemoryDep('buf88', c0, {c0: 786432}, None),
        MemoryDep('buf89', c0, {c0: 512}, None),
        MemoryDep('buf90', c0, {c0: 512}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg62_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg63_1', c1, {c0: 512, c1: 1536}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf92.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (786432, 1)
op92.sizes = ([512, 1536], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf90_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op92_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf75', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf89', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf90', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg62_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg63_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf92', get_index_7, add_3, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 3145728}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 3145728}, None)]
op94.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 512, c1: 6144}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (3145728, 1)
op94.sizes = ([512, 6144], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op94_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg65_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf94', get_index_4, mul_2, None)
        return store
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op95.node.kernel = extern_kernels.mm


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 512}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 786432}, None),
        MemoryDep('buf95', c0, {c0: 786432}, None)]
op96.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 512, c1: 1536}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf96.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (512, 1536)
op96.sizes = ([512], [1536])
buf95_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op96_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem)
        return store_reduction
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 512}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 786432}, None),
        MemoryDep('buf95', c0, {c0: 786432}, None)]
op97.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 512, c1: 1536}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf97.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (512, 1536)
op97.sizes = ([512], [1536])
buf95_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op97_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf97', get_index_3, getitem_1)
        return store_reduction
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 786432}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 786432}, None),
        MemoryDep('buf95', c0, {c0: 786432}, None),
        MemoryDep('buf96', c0, {c0: 512}, None),
        MemoryDep('buf97', c0, {c0: 512}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg68_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg69_1', c1, {c0: 512, c1: 1536}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (786432, 1)
op99.sizes = ([512, 1536], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op99_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf96', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf97', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg68_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg69_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf99', get_index_7, add_3, None)
        return store
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op101.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.mm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 786432}, None)]
op102.unmet_dependencies = [MemoryDep('buf100', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op102.met_dependencies = [MemoryDep('arg71_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (786432, 1)
op102.sizes = ([24, 512, 64], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op102_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf102', get_index_2, add, None)
        return store
op102 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 786432}, None)]
op103.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 786432}, None)]
op103.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 512, c1: 1536}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (786432, 1)
op103.sizes = ([512, 1536], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op103_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf103', get_index_2, mul, None)
        return store
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
    ]
]
op104.node.kernel = extern_kernels.bmm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 12288}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 6291456}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (12288, 512)
op105.sizes = ([12288], [512])
buf104_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op105_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, reduction)
        return store_reduction
op105 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 12288}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 6291456}, None),
        MemoryDep('buf105', c0, {c0: 12288}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (12288, 512)
op106.sizes = ([12288], [512])
buf104_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op106_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_2, reduction)
        return store_reduction
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op107.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 6291456}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 6291456}, None),
        MemoryDep('buf105', c0, {c0: 12288}, None),
        MemoryDep('buf106', c0, {c0: 12288}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (6291456, 1)
op108.sizes = ([12288, 512], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf108_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op108_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf106', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf108', get_index_3, where_1, None)
        return store
op108 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 786432}, None)]
op109.unmet_dependencies = [MemoryDep('buf107', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op109.met_dependencies = [MemoryDep('arg75_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (786432, 1)
op109.sizes = ([24, 512, 64], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op109_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf109', get_index_2, add, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf108', mode=None), StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.node.kernel = extern_kernels.bmm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 786432}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (786432, 1)
op111.sizes = ([512, 24, 64], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op111_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store
op111 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 512}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 786432}, None),
        MemoryDep('buf99', c0, {c0: 786432}, None)]
op113.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 512, c1: 1536}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (512, 1536)
op113.sizes = ([512], [1536])
buf112_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op113_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_3, getitem)
        return store_reduction
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 512}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 786432}, None),
        MemoryDep('buf99', c0, {c0: 786432}, None)]
op114.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 512, c1: 1536}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (512, 1536)
op114.sizes = ([512], [1536])
buf112_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op114_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_3, getitem_1)
        return store_reduction
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 786432}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 786432}, None),
        MemoryDep('buf113', c0, {c0: 512}, None),
        MemoryDep('buf114', c0, {c0: 512}, None),
        MemoryDep('buf99', c0, {c0: 786432}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg78_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg79_1', c1, {c0: 512, c1: 1536}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (786432, 1)
op116.sizes = ([512, 1536], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf114_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op116_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf113', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf114', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg78_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg79_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf116', get_index_7, add_3, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.mm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 3145728}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 3145728}, None)]
op118.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 512, c1: 6144}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (3145728, 1)
op118.sizes = ([512, 6144], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op118_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg81_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf118', get_index_4, mul_2, None)
        return store
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
    ]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 512}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 786432}, None),
        MemoryDep('buf119', c0, {c0: 786432}, None)]
op120.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 512, c1: 1536}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf120.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (512, 1536)
op120.sizes = ([512], [1536])
buf119_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op120_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem)
        return store_reduction
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 512}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 786432}, None),
        MemoryDep('buf119', c0, {c0: 786432}, None)]
op121.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 512, c1: 1536}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (512, 1536)
op121.sizes = ([512], [1536])
buf119_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op121_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem_1)
        return store_reduction
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 786432}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 786432}, None),
        MemoryDep('buf119', c0, {c0: 786432}, None),
        MemoryDep('buf120', c0, {c0: 512}, None),
        MemoryDep('buf121', c0, {c0: 512}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg84_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg85_1', c1, {c0: 512, c1: 1536}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf123.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (786432, 1)
op123.sizes = ([512, 1536], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf121_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op123_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf120', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf121', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg84_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg85_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf123', get_index_7, add_3, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.mm


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op125.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 786432}, None)]
op126.unmet_dependencies = [MemoryDep('buf124', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op126.met_dependencies = [MemoryDep('arg87_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (786432, 1)
op126.sizes = ([24, 512, 64], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op126_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf126', get_index_2, add, None)
        return store
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 786432}, None)]
op127.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 786432}, None)]
op127.met_dependencies = [MemoryDep('arg89_1', c1, {c0: 512, c1: 1536}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (786432, 1)
op127.sizes = ([512, 1536], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op127_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf127', get_index_2, mul, None)
        return store
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op128.node.kernel = extern_kernels.bmm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 12288}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 6291456}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (12288, 512)
op129.sizes = ([12288], [512])
buf128_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op129_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, reduction)
        return store_reduction
op129 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 12288}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 6291456}, None),
        MemoryDep('buf129', c0, {c0: 12288}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf130.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (12288, 512)
op130.sizes = ([12288], [512])
buf128_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf130_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op130_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf129', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_2, reduction)
        return store_reduction
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op131.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 6291456}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 6291456}, None),
        MemoryDep('buf129', c0, {c0: 12288}, None),
        MemoryDep('buf130', c0, {c0: 12288}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (6291456, 1)
op132.sizes = ([12288, 512], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf130_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op132_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf129', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf130', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf132', get_index_3, where_1, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 786432}, None)]
op133.unmet_dependencies = [MemoryDep('buf131', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op133.met_dependencies = [MemoryDep('arg91_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (786432, 1)
op133.sizes = ([24, 512, 64], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op133_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf133', get_index_2, add, None)
        return store
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None), StarDep(name='buf133', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.bmm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 786432}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (786432, 1)
op135.sizes = ([512, 24, 64], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op135_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf135', get_index_1, load, None)
        return store
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 512}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 786432}, None),
        MemoryDep('buf136', c0, {c0: 786432}, None)]
op137.met_dependencies = [MemoryDep('arg93_1', c1, {c0: 512, c1: 1536}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (512, 1536)
op137.sizes = ([512], [1536])
buf136_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op137_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_3, getitem)
        return store_reduction
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 512}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 786432}, None),
        MemoryDep('buf136', c0, {c0: 786432}, None)]
op138.met_dependencies = [MemoryDep('arg93_1', c1, {c0: 512, c1: 1536}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (512, 1536)
op138.sizes = ([512], [1536])
buf136_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op138_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_3, getitem_1)
        return store_reduction
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 786432}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 786432}, None),
        MemoryDep('buf136', c0, {c0: 786432}, None),
        MemoryDep('buf137', c0, {c0: 512}, None),
        MemoryDep('buf138', c0, {c0: 512}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg94_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg95_1', c1, {c0: 512, c1: 1536}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf140.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (786432, 1)
op140.sizes = ([512, 1536], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf138_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op140_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf137', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf138', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg94_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg95_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf140', get_index_7, add_3, None)
        return store
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 3145728}, None)]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 3145728}, None)]
op142.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 512, c1: 6144}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (3145728, 1)
op142.sizes = ([512, 6144], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op142_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf141', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf142', get_index_4, mul_2, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 512}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 786432}, None),
        MemoryDep('buf143', c0, {c0: 786432}, None)]
op144.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 512, c1: 1536}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (512, 1536)
op144.sizes = ([512], [1536])
buf143_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op144_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem)
        return store_reduction
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 512}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 786432}, None),
        MemoryDep('buf143', c0, {c0: 786432}, None)]
op145.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 512, c1: 1536}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (512, 1536)
op145.sizes = ([512], [1536])
buf143_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op145_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf145', get_index_3, getitem_1)
        return store_reduction
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 786432}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 786432}, None),
        MemoryDep('buf143', c0, {c0: 786432}, None),
        MemoryDep('buf144', c0, {c0: 512}, None),
        MemoryDep('buf145', c0, {c0: 512}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg101_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg99_1', c1, {c0: 512, c1: 1536}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf147.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (786432, 1)
op147.sizes = ([512, 1536], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op147_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf144', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf145', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg100_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg101_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf147', get_index_7, add_3, None)
        return store
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = extern_kernels.mm


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op149.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.mm


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 786432}, None)]
op150.unmet_dependencies = [MemoryDep('buf148', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op150.met_dependencies = [MemoryDep('arg103_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (786432, 1)
op150.sizes = ([24, 512, 64], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op150_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf150', get_index_2, add, None)
        return store
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 786432}, None)]
op151.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 786432}, None)]
op151.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 512, c1: 1536}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (786432, 1)
op151.sizes = ([512, 1536], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op151_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf151', get_index_2, mul, None)
        return store
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf150', mode=None), StarDep(name='buf151', mode=None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op152.node.kernel = extern_kernels.bmm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 12288}, None)]
op153.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 6291456}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (12288, 512)
op153.sizes = ([12288], [512])
buf152_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op153_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf153', get_index_1, reduction)
        return store_reduction
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 12288}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 12288}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (12288, 512)
op154.sizes = ([12288], [512])
buf152_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf154_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op154_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf153', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_2, reduction)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op155.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 6291456}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 12288}, None),
        MemoryDep('buf154', c0, {c0: 12288}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (6291456, 1)
op156.sizes = ([12288, 512], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf154_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op156_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf153', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf154', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf156', get_index_3, where_1, None)
        return store
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 786432}, None)]
op157.unmet_dependencies = [MemoryDep('buf155', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op157.met_dependencies = [MemoryDep('arg107_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (786432, 1)
op157.sizes = ([24, 512, 64], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op157_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf157', get_index_2, add, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.node.kernel = extern_kernels.bmm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 786432}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (786432, 1)
op159.sizes = ([512, 24, 64], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op159_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 512}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 786432}, None),
        MemoryDep('buf160', c0, {c0: 786432}, None)]
op161.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 512, c1: 1536}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (512, 1536)
op161.sizes = ([512], [1536])
buf160_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op161_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem)
        return store_reduction
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 512}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 786432}, None),
        MemoryDep('buf160', c0, {c0: 786432}, None)]
op162.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 512, c1: 1536}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (512, 1536)
op162.sizes = ([512], [1536])
buf160_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op162_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_1)
        return store_reduction
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 786432}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 786432}, None),
        MemoryDep('buf160', c0, {c0: 786432}, None),
        MemoryDep('buf161', c0, {c0: 512}, None),
        MemoryDep('buf162', c0, {c0: 512}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg110_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg111_1', c1, {c0: 512, c1: 1536}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (786432, 1)
op164.sizes = ([512, 1536], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf162_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op164_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg110_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg111_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf164', get_index_7, add_3, None)
        return store
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 3145728}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 3145728}, None)]
op166.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 512, c1: 6144}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (3145728, 1)
op166.sizes = ([512, 6144], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op166_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf166', get_index_4, mul_2, None)
        return store
op166 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 512}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 786432}, None),
        MemoryDep('buf167', c0, {c0: 786432}, None)]
op168.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 512, c1: 1536}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (512, 1536)
op168.sizes = ([512], [1536])
buf167_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op168_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf168', get_index_3, getitem)
        return store_reduction
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 512}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 786432}, None),
        MemoryDep('buf167', c0, {c0: 786432}, None)]
op169.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 512, c1: 1536}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (512, 1536)
op169.sizes = ([512], [1536])
buf167_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op169_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf169', get_index_3, getitem_1)
        return store_reduction
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 786432}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 786432}, None),
        MemoryDep('buf167', c0, {c0: 786432}, None),
        MemoryDep('buf168', c0, {c0: 512}, None),
        MemoryDep('buf169', c0, {c0: 512}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg116_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg117_1', c1, {c0: 512, c1: 1536}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf171.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (786432, 1)
op171.sizes = ([512, 1536], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf169_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op171_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf168', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf169', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg116_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg117_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf171', get_index_7, add_3, None)
        return store
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op173.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 786432}, None)]
op174.unmet_dependencies = [MemoryDep('buf172', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op174.met_dependencies = [MemoryDep('arg119_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (786432, 1)
op174.sizes = ([24, 512, 64], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op174_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf174', get_index_2, add, None)
        return store
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 786432}, None)]
op175.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 786432}, None)]
op175.met_dependencies = [MemoryDep('arg121_1', c1, {c0: 512, c1: 1536}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (786432, 1)
op175.sizes = ([512, 1536], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op175_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf175', get_index_2, mul, None)
        return store
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf174', mode=None), StarDep(name='buf175', mode=None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
    ]
]
op176.node.kernel = extern_kernels.bmm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 12288}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 6291456}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf177.users = [
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (12288, 512)
op177.sizes = ([12288], [512])
buf176_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op177_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf177', get_index_1, reduction)
        return store_reduction
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 12288}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 6291456}, None),
        MemoryDep('buf177', c0, {c0: 12288}, None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf178.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (12288, 512)
op178.sizes = ([12288], [512])
buf176_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf178_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op178_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf177', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf178', get_index_2, reduction)
        return store_reduction
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op179.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 6291456}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 6291456}, None),
        MemoryDep('buf177', c0, {c0: 12288}, None),
        MemoryDep('buf178', c0, {c0: 12288}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (6291456, 1)
op180.sizes = ([12288, 512], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf178_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf180_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op180_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf177', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf178', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf180', get_index_3, where_1, None)
        return store
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 786432}, None)]
op181.unmet_dependencies = [MemoryDep('buf179', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op181.met_dependencies = [MemoryDep('arg123_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (786432, 1)
op181.sizes = ([24, 512, 64], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op181_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf181', get_index_2, add, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.bmm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 786432}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (786432, 1)
op183.sizes = ([512, 24, 64], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op183_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store
op183 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op184.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 512}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 786432}, None),
        MemoryDep('buf184', c0, {c0: 786432}, None)]
op185.met_dependencies = [MemoryDep('arg125_1', c1, {c0: 512, c1: 1536}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (512, 1536)
op185.sizes = ([512], [1536])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op185_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem)
        return store_reduction
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 512}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 786432}, None),
        MemoryDep('buf184', c0, {c0: 786432}, None)]
op186.met_dependencies = [MemoryDep('arg125_1', c1, {c0: 512, c1: 1536}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf186.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (512, 1536)
op186.sizes = ([512], [1536])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op186_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf186', get_index_3, getitem_1)
        return store_reduction
op186 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 786432}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 786432}, None),
        MemoryDep('buf184', c0, {c0: 786432}, None),
        MemoryDep('buf185', c0, {c0: 512}, None),
        MemoryDep('buf186', c0, {c0: 512}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg126_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg127_1', c1, {c0: 512, c1: 1536}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (786432, 1)
op188.sizes = ([512, 1536], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op188_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf185', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf186', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg126_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg127_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf188', get_index_7, add_3, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False)]
]
op189.node.kernel = extern_kernels.mm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 3145728}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', c0, {c0: 3145728}, None)]
op190.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 512, c1: 6144}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (3145728, 1)
op190.sizes = ([512, 6144], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op190_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf189', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf190', get_index_4, mul_2, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op191.node.kernel = extern_kernels.mm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 512}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 786432}, None),
        MemoryDep('buf191', c0, {c0: 786432}, None)]
op192.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 512, c1: 1536}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf192.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (512, 1536)
op192.sizes = ([512], [1536])
buf191_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op192_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_3, getitem)
        return store_reduction
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 512}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 786432}, None),
        MemoryDep('buf191', c0, {c0: 786432}, None)]
op193.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 512, c1: 1536}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf193.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (512, 1536)
op193.sizes = ([512], [1536])
buf191_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op193_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf193', get_index_3, getitem_1)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 786432}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 786432}, None),
        MemoryDep('buf191', c0, {c0: 786432}, None),
        MemoryDep('buf192', c0, {c0: 512}, None),
        MemoryDep('buf193', c0, {c0: 512}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg132_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg133_1', c1, {c0: 512, c1: 1536}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf195.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (786432, 1)
op195.sizes = ([512, 1536], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op195_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf192', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf193', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg132_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg133_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf195', get_index_7, add_3, None)
        return store
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op196.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.mm


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op197.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 786432}, None)]
op198.unmet_dependencies = [MemoryDep('buf196', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op198.met_dependencies = [MemoryDep('arg135_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (786432, 1)
op198.sizes = ([24, 512, 64], [])
buf196_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op198_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf198', get_index_2, add, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 786432}, None)]
op199.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 786432}, None)]
op199.met_dependencies = [MemoryDep('arg137_1', c1, {c0: 512, c1: 1536}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (786432, 1)
op199.sizes = ([512, 1536], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op199_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf199', get_index_2, mul, None)
        return store
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf198', mode=None), StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.bmm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 12288}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 6291456}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (12288, 512)
op201.sizes = ([12288], [512])
buf200_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op201_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf201', get_index_1, reduction)
        return store_reduction
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 12288}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf200', c0, {c0: 6291456}, None),
        MemoryDep('buf201', c0, {c0: 12288}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (12288, 512)
op202.sizes = ([12288], [512])
buf200_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op202_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf201', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf202', get_index_2, reduction)
        return store_reduction
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op203.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 6291456}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf200', c0, {c0: 6291456}, None),
        MemoryDep('buf201', c0, {c0: 12288}, None),
        MemoryDep('buf202', c0, {c0: 12288}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (6291456, 1)
op204.sizes = ([12288, 512], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf204_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op204_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf201', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf202', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf204', get_index_3, where_1, None)
        return store
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 786432}, None)]
op205.unmet_dependencies = [MemoryDep('buf203', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op205.met_dependencies = [MemoryDep('arg139_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (786432, 1)
op205.sizes = ([24, 512, 64], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op205_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf205', get_index_2, add, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None), StarDep(name='buf205', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.bmm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 786432}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (786432, 1)
op207.sizes = ([512, 24, 64], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op207_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.mm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 512}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 786432}, None),
        MemoryDep('buf208', c0, {c0: 786432}, None)]
op209.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 512, c1: 1536}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf209.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (512, 1536)
op209.sizes = ([512], [1536])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op209_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf209', get_index_3, getitem)
        return store_reduction
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 512}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 786432}, None),
        MemoryDep('buf208', c0, {c0: 786432}, None)]
op210.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 512, c1: 1536}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (512, 1536)
op210.sizes = ([512], [1536])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op210_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_3, getitem_1)
        return store_reduction
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 786432}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 786432}, None),
        MemoryDep('buf208', c0, {c0: 786432}, None),
        MemoryDep('buf209', c0, {c0: 512}, None),
        MemoryDep('buf210', c0, {c0: 512}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg142_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg143_1', c1, {c0: 512, c1: 1536}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (786432, 1)
op212.sizes = ([512, 1536], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf210_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op212_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf209', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf210', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg142_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg143_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf212', get_index_7, add_3, None)
        return store
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.mm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 3145728}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 3145728}, None)]
op214.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 512, c1: 6144}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (3145728, 1)
op214.sizes = ([512, 6144], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op214_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf214', get_index_4, mul_2, None)
        return store
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op215.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 512}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 786432}, None),
        MemoryDep('buf215', c0, {c0: 786432}, None)]
op216.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 512, c1: 1536}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf216.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (512, 1536)
op216.sizes = ([512], [1536])
buf215_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op216_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf212', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem)
        return store_reduction
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 512}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 786432}, None),
        MemoryDep('buf215', c0, {c0: 786432}, None)]
op217.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 512, c1: 1536}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (512, 1536)
op217.sizes = ([512], [1536])
buf215_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op217_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf212', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf217', get_index_3, getitem_1)
        return store_reduction
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 786432}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 786432}, None),
        MemoryDep('buf215', c0, {c0: 786432}, None),
        MemoryDep('buf216', c0, {c0: 512}, None),
        MemoryDep('buf217', c0, {c0: 512}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg148_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg149_1', c1, {c0: 512, c1: 1536}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (786432, 1)
op219.sizes = ([512, 1536], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf217_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op219_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf212', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf216', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf217', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg148_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg149_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf219', get_index_7, add_3, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op221.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op221.node.kernel = extern_kernels.mm


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 786432}, None)]
op222.unmet_dependencies = [MemoryDep('buf220', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op222.met_dependencies = [MemoryDep('arg151_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (786432, 1)
op222.sizes = ([24, 512, 64], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op222_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf222', get_index_2, add, None)
        return store
op222 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 786432}, None)]
op223.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 786432}, None)]
op223.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 512, c1: 1536}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (786432, 1)
op223.sizes = ([512, 1536], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op223_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf223', get_index_2, mul, None)
        return store
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf222', mode=None), StarDep(name='buf223', mode=None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.bmm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 12288}, None)]
op225.unmet_dependencies = [MemoryDep('buf224', c0, {c0: 6291456}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
    ]
]
op225.group.device = cuda:0
op225.group.iteration = (12288, 512)
op225.sizes = ([12288], [512])
buf224_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op225_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf225', get_index_1, reduction)
        return store_reduction
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 12288}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 6291456}, None),
        MemoryDep('buf225', c0, {c0: 12288}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (12288, 512)
op226.sizes = ([12288], [512])
buf224_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf226_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op226_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf225', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf226', get_index_2, reduction)
        return store_reduction
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op227.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf227.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.node.kernel = extern_kernels.mm


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 6291456}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 6291456}, None),
        MemoryDep('buf225', c0, {c0: 12288}, None),
        MemoryDep('buf226', c0, {c0: 12288}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (6291456, 1)
op228.sizes = ([12288, 512], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf226_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op228_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf225', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf226', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf228', get_index_3, where_1, None)
        return store
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 786432}, None)]
op229.unmet_dependencies = [MemoryDep('buf227', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op229.met_dependencies = [MemoryDep('arg155_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (786432, 1)
op229.sizes = ([24, 512, 64], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op229_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf229', get_index_2, add, None)
        return store
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None), StarDep(name='buf229', mode=None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.bmm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 786432}, None)]
op231.unmet_dependencies = [MemoryDep('buf230', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (786432, 1)
op231.sizes = ([512, 24, 64], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op231_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf231', get_index_1, load, None)
        return store
op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op232.node.kernel = extern_kernels.mm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 512}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 786432}, None),
        MemoryDep('buf232', c0, {c0: 786432}, None)]
op233.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 512, c1: 1536}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (512, 1536)
op233.sizes = ([512], [1536])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op233_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem)
        return store_reduction
op233 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 512}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 786432}, None),
        MemoryDep('buf232', c0, {c0: 786432}, None)]
op234.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 512, c1: 1536}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (512, 1536)
op234.sizes = ([512], [1536])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op234_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, getitem_1)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 786432}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 786432}, None),
        MemoryDep('buf232', c0, {c0: 786432}, None),
        MemoryDep('buf233', c0, {c0: 512}, None),
        MemoryDep('buf234', c0, {c0: 512}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg158_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg159_1', c1, {c0: 512, c1: 1536}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (786432, 1)
op236.sizes = ([512, 1536], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf234_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op236_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf233', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg158_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg159_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf236', get_index_7, add_3, None)
        return store
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op237.node.kernel = extern_kernels.mm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 3145728}, None)]
op238.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 3145728}, None)]
op238.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 512, c1: 6144}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (3145728, 1)
op238.sizes = ([512, 6144], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op238_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf237', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf238', get_index_4, mul_2, None)
        return store
op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 512}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 786432}, None),
        MemoryDep('buf239', c0, {c0: 786432}, None)]
op240.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 512, c1: 1536}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf240.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (512, 1536)
op240.sizes = ([512], [1536])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op240_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf240', get_index_3, getitem)
        return store_reduction
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 512}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 786432}, None),
        MemoryDep('buf239', c0, {c0: 786432}, None)]
op241.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 512, c1: 1536}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf241.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (512, 1536)
op241.sizes = ([512], [1536])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op241_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf241', get_index_3, getitem_1)
        return store_reduction
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 786432}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 786432}, None),
        MemoryDep('buf239', c0, {c0: 786432}, None),
        MemoryDep('buf240', c0, {c0: 512}, None),
        MemoryDep('buf241', c0, {c0: 512}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg164_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg165_1', c1, {c0: 512, c1: 1536}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf243.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (786432, 1)
op243.sizes = ([512, 1536], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf241_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op243_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf240', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf241', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg164_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg165_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf243', get_index_7, add_3, None)
        return store
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op245.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False)]
]
op245.node.kernel = extern_kernels.mm


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 786432}, None)]
op246.unmet_dependencies = [MemoryDep('buf244', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op246.met_dependencies = [MemoryDep('arg167_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (786432, 1)
op246.sizes = ([24, 512, 64], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op246_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf246', get_index_2, add, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 786432}, None)]
op247.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 786432}, None)]
op247.met_dependencies = [MemoryDep('arg169_1', c1, {c0: 512, c1: 1536}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (786432, 1)
op247.sizes = ([512, 1536], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op247_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf247', get_index_2, mul, None)
        return store
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf246', mode=None), StarDep(name='buf247', mode=None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.bmm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 12288}, None)]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 6291456}, None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (12288, 512)
op249.sizes = ([12288], [512])
buf248_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op249_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf249', get_index_1, reduction)
        return store_reduction
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 12288}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 6291456}, None),
        MemoryDep('buf249', c0, {c0: 12288}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (12288, 512)
op250.sizes = ([12288], [512])
buf248_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf250_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op250_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf249', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf250', get_index_2, reduction)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op251.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 6291456}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 6291456}, None),
        MemoryDep('buf249', c0, {c0: 12288}, None),
        MemoryDep('buf250', c0, {c0: 12288}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (6291456, 1)
op252.sizes = ([12288, 512], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf250_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf252_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op252_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf249', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf250', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf252', get_index_3, where_1, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 786432}, None)]
op253.unmet_dependencies = [MemoryDep('buf251', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op253.met_dependencies = [MemoryDep('arg171_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (786432, 1)
op253.sizes = ([24, 512, 64], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op253_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf253', get_index_2, add, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.bmm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 786432}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (786432, 1)
op255.sizes = ([512, 24, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op255_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf255', get_index_1, load, None)
        return store
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op256.node.kernel = extern_kernels.mm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 512}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 786432}, None),
        MemoryDep('buf256', c0, {c0: 786432}, None)]
op257.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 512, c1: 1536}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf257.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (512, 1536)
op257.sizes = ([512], [1536])
buf256_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op257_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf257', get_index_3, getitem)
        return store_reduction
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 512}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 786432}, None),
        MemoryDep('buf256', c0, {c0: 786432}, None)]
op258.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 512, c1: 1536}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf258.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (512, 1536)
op258.sizes = ([512], [1536])
buf256_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op258_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf258', get_index_3, getitem_1)
        return store_reduction
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 786432}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 786432}, None),
        MemoryDep('buf256', c0, {c0: 786432}, None),
        MemoryDep('buf257', c0, {c0: 512}, None),
        MemoryDep('buf258', c0, {c0: 512}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg174_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg175_1', c1, {c0: 512, c1: 1536}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf260.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (786432, 1)
op260.sizes = ([512, 1536], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf258_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op260_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf257', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf258', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg174_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg175_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf260', get_index_7, add_3, None)
        return store
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False)]
]
op261.node.kernel = extern_kernels.mm


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 3145728}, None)]
op262.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 3145728}, None)]
op262.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 512, c1: 6144}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (3145728, 1)
op262.sizes = ([512, 6144], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op262_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf261', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf262', get_index_4, mul_2, None)
        return store
op262 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op263.node.kernel = extern_kernels.mm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 512}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 786432}, None),
        MemoryDep('buf263', c0, {c0: 786432}, None)]
op264.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 512, c1: 1536}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf264.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (512, 1536)
op264.sizes = ([512], [1536])
buf263_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op264_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem)
        return store_reduction
op264 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 512}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 786432}, None),
        MemoryDep('buf263', c0, {c0: 786432}, None)]
op265.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 512, c1: 1536}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf265.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (512, 1536)
op265.sizes = ([512], [1536])
buf263_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op265_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf265', get_index_3, getitem_1)
        return store_reduction
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 786432}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 786432}, None),
        MemoryDep('buf263', c0, {c0: 786432}, None),
        MemoryDep('buf264', c0, {c0: 512}, None),
        MemoryDep('buf265', c0, {c0: 512}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg179_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg180_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg181_1', c1, {c0: 512, c1: 1536}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf267.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (786432, 1)
op267.sizes = ([512, 1536], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf265_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op267_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf264', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf265', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg180_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg181_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf267', get_index_7, add_3, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op269.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 786432}, None)]
op270.unmet_dependencies = [MemoryDep('buf268', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op270.met_dependencies = [MemoryDep('arg183_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (786432, 1)
op270.sizes = ([24, 512, 64], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op270_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf270', get_index_2, add, None)
        return store
op270 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 786432}, None)]
op271.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 786432}, None)]
op271.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 512, c1: 1536}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (786432, 1)
op271.sizes = ([512, 1536], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op271_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf271', get_index_2, mul, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.bmm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 12288}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 6291456}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (12288, 512)
op273.sizes = ([12288], [512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op273_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf273', get_index_1, reduction)
        return store_reduction
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 12288}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 6291456}, None),
        MemoryDep('buf273', c0, {c0: 12288}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf274.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (12288, 512)
op274.sizes = ([12288], [512])
buf272_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf274_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op274_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_2, reduction)
        return store_reduction
op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op275.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.node.kernel = extern_kernels.mm


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 6291456}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 6291456}, None),
        MemoryDep('buf273', c0, {c0: 12288}, None),
        MemoryDep('buf274', c0, {c0: 12288}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (6291456, 1)
op276.sizes = ([12288, 512], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf274_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf276_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op276_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf274', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf276', get_index_3, where_1, None)
        return store
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 786432}, None)]
op277.unmet_dependencies = [MemoryDep('buf275', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op277.met_dependencies = [MemoryDep('arg187_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (786432, 1)
op277.sizes = ([24, 512, 64], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op277_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf277', get_index_2, add, None)
        return store
op277 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf276', mode=None), StarDep(name='buf277', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.node.kernel = extern_kernels.bmm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 786432}, None)]
op279.unmet_dependencies = [MemoryDep('buf278', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (786432, 1)
op279.sizes = ([512, 24, 64], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op279_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf279', get_index_1, load, None)
        return store
op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 512}, None)]
op281.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 786432}, None),
        MemoryDep('buf280', c0, {c0: 786432}, None)]
op281.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 512, c1: 1536}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf281.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (512, 1536)
op281.sizes = ([512], [1536])
buf280_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op281_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf281', get_index_3, getitem)
        return store_reduction
op281 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 512}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 786432}, None),
        MemoryDep('buf280', c0, {c0: 786432}, None)]
op282.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 512, c1: 1536}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (512, 1536)
op282.sizes = ([512], [1536])
buf280_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op282_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf282', get_index_3, getitem_1)
        return store_reduction
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 786432}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 786432}, None),
        MemoryDep('buf280', c0, {c0: 786432}, None),
        MemoryDep('buf281', c0, {c0: 512}, None),
        MemoryDep('buf282', c0, {c0: 512}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg190_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg191_1', c1, {c0: 512, c1: 1536}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf284.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (786432, 1)
op284.sizes = ([512, 1536], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf282_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op284_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf281', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf282', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg190_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg191_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf284', get_index_7, add_3, None)
        return store
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op285: ExternKernelSchedulerNode(ExternKernelOut)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op285.outputs = [
    buf285: ExternKernelOut
    buf285.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
]
op285.node.kernel = extern_kernels.mm


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 3145728}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 3145728}, None)]
op286.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 512, c1: 6144}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (3145728, 1)
op286.sizes = ([512, 6144], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op286_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg193_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf286', get_index_4, mul_2, None)
        return store
op286 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 512}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 786432}, None),
        MemoryDep('buf287', c0, {c0: 786432}, None)]
op288.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 512, c1: 1536}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (512, 1536)
op288.sizes = ([512], [1536])
buf287_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op288_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf284', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf288', get_index_3, getitem)
        return store_reduction
op288 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 512}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 786432}, None),
        MemoryDep('buf287', c0, {c0: 786432}, None)]
op289.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 512, c1: 1536}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf289.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (512, 1536)
op289.sizes = ([512], [1536])
buf287_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op289_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf284', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf289', get_index_3, getitem_1)
        return store_reduction
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 786432}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 786432}, None),
        MemoryDep('buf287', c0, {c0: 786432}, None),
        MemoryDep('buf288', c0, {c0: 512}, None),
        MemoryDep('buf289', c0, {c0: 512}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg196_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg197_1', c1, {c0: 512, c1: 1536}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf291.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (786432, 1)
op291.sizes = ([512, 1536], [])
buf287_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf289_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op291_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf284', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf288', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf289', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg196_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg197_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf291', get_index_7, add_3, None)
        return store
op291 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op292.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op292.node.kernel = extern_kernels.mm


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op293.met_dependencies = [StarDep(name='arg200_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.mm


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 786432}, None)]
op294.unmet_dependencies = [MemoryDep('buf292', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op294.met_dependencies = [MemoryDep('arg199_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (786432, 1)
op294.sizes = ([24, 512, 64], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op294_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg199_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf294', get_index_2, add, None)
        return store
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 786432}, None)]
op295.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 786432}, None)]
op295.met_dependencies = [MemoryDep('arg201_1', c1, {c0: 512, c1: 1536}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (786432, 1)
op295.sizes = ([512, 1536], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op295_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg201_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf295', get_index_2, mul, None)
        return store
op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op296: ExternKernelSchedulerNode(ExternKernelOut)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf294', mode=None), StarDep(name='buf295', mode=None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ExternKernelOut
    buf296.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False),
    ]
]
op296.node.kernel = extern_kernels.bmm


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 12288}, None)]
op297.unmet_dependencies = [MemoryDep('buf296', c0, {c0: 6291456}, None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf297.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op297.group.device = cuda:0
op297.group.iteration = (12288, 512)
op297.sizes = ([12288], [512])
buf296_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op297_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf297', get_index_1, reduction)
        return store_reduction
op297 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 12288}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf296', c0, {c0: 6291456}, None),
        MemoryDep('buf297', c0, {c0: 12288}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf298.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (12288, 512)
op298.sizes = ([12288], [512])
buf296_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op298_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf297', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf298', get_index_2, reduction)
        return store_reduction
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op299.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf299.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op299.node.kernel = extern_kernels.mm


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 6291456}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf296', c0, {c0: 6291456}, None),
        MemoryDep('buf297', c0, {c0: 12288}, None),
        MemoryDep('buf298', c0, {c0: 12288}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (6291456, 1)
op300.sizes = ([12288, 512], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf298_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf300_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op300_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf297', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf298', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf300', get_index_3, where_1, None)
        return store
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 786432}, None)]
op301.unmet_dependencies = [MemoryDep('buf299', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op301.met_dependencies = [MemoryDep('arg203_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (786432, 1)
op301.sizes = ([24, 512, 64], [])
buf299_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op301_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf301', get_index_2, add, None)
        return store
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf300', mode=None), StarDep(name='buf301', mode=None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.node.kernel = extern_kernels.bmm


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 786432}, None)]
op303.unmet_dependencies = [MemoryDep('buf302', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (786432, 1)
op303.sizes = ([512, 24, 64], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op303_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf303', get_index_1, load, None)
        return store
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op304: ExternKernelSchedulerNode(ExternKernelOut)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op304.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op304.outputs = [
    buf304: ExternKernelOut
    buf304.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf304.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
    ]
]
op304.node.kernel = extern_kernels.mm


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 512}, None)]
op305.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 786432}, None),
        MemoryDep('buf304', c0, {c0: 786432}, None)]
op305.met_dependencies = [MemoryDep('arg205_1', c1, {c0: 512, c1: 1536}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf305.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (512, 1536)
op305.sizes = ([512], [1536])
buf304_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op305_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf291', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf305', get_index_3, getitem)
        return store_reduction
op305 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 512}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 786432}, None),
        MemoryDep('buf304', c0, {c0: 786432}, None)]
op306.met_dependencies = [MemoryDep('arg205_1', c1, {c0: 512, c1: 1536}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf306.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (512, 1536)
op306.sizes = ([512], [1536])
buf304_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op306_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf291', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf306', get_index_3, getitem_1)
        return store_reduction
op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 786432}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 786432}, None),
        MemoryDep('buf304', c0, {c0: 786432}, None),
        MemoryDep('buf305', c0, {c0: 512}, None),
        MemoryDep('buf306', c0, {c0: 512}, None)]
op308.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg206_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg207_1', c1, {c0: 512, c1: 1536}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf308.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (786432, 1)
op308.sizes = ([512, 1536], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf306_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op308_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf291', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf305', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf306', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg206_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg207_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf308', get_index_7, add_3, None)
        return store
op308 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.mm


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 3145728}, None)]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 3145728}, None)]
op310.met_dependencies = [MemoryDep('arg209_1', c1, {c0: 512, c1: 6144}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (3145728, 1)
op310.sizes = ([512, 6144], [])
buf309_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op310_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf309', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf310', get_index_4, mul_2, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op311.node.kernel = extern_kernels.mm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 512}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 786432}, None),
        MemoryDep('buf311', c0, {c0: 786432}, None)]
op312.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 512, c1: 1536}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf312.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (512, 1536)
op312.sizes = ([512], [1536])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op312_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf308', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf312', get_index_3, getitem)
        return store_reduction
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 512}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 786432}, None),
        MemoryDep('buf311', c0, {c0: 786432}, None)]
op313.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 512, c1: 1536}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (512, 1536)
op313.sizes = ([512], [1536])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op313_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf308', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf313', get_index_3, getitem_1)
        return store_reduction
op313 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 786432}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 786432}, None),
        MemoryDep('buf311', c0, {c0: 786432}, None),
        MemoryDep('buf312', c0, {c0: 512}, None),
        MemoryDep('buf313', c0, {c0: 512}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg213_1', c1, {c0: 512, c1: 1536}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (786432, 1)
op315.sizes = ([512, 1536], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf313_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op315_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf308', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf312', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf313', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg212_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg213_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf315', get_index_7, add_3, None)
        return store
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op316: ExternKernelSchedulerNode(ExternKernelOut)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelOut
    buf316.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf316.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op316.node.kernel = extern_kernels.mm


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op317.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op317.node.kernel = extern_kernels.mm


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 786432}, None)]
op318.unmet_dependencies = [MemoryDep('buf316', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op318.met_dependencies = [MemoryDep('arg215_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (786432, 1)
op318.sizes = ([24, 512, 64], [])
buf316_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op318_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg215_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf318', get_index_2, add, None)
        return store
op318 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 786432}, None)]
op319.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 786432}, None)]
op319.met_dependencies = [MemoryDep('arg217_1', c1, {c0: 512, c1: 1536}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (786432, 1)
op319.sizes = ([512, 1536], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op319_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf319', get_index_2, mul, None)
        return store
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf318', mode=None), StarDep(name='buf319', mode=None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.bmm


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 12288}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 6291456}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (12288, 512)
op321.sizes = ([12288], [512])
buf320_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op321_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf321', get_index_1, reduction)
        return store_reduction
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 12288}, None)]
op322.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 6291456}, None),
        MemoryDep('buf321', c0, {c0: 12288}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf322.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (12288, 512)
op322.sizes = ([12288], [512])
buf320_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf322_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op322_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf322', get_index_2, reduction)
        return store_reduction
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op323.met_dependencies = [StarDep(name='arg218_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op323.node.kernel = extern_kernels.mm


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 6291456}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 6291456}, None),
        MemoryDep('buf321', c0, {c0: 12288}, None),
        MemoryDep('buf322', c0, {c0: 12288}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (6291456, 1)
op324.sizes = ([12288, 512], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf322_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf324_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op324_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf322', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf324', get_index_3, where_1, None)
        return store
op324 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 786432}, None)]
op325.unmet_dependencies = [MemoryDep('buf323', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op325.met_dependencies = [MemoryDep('arg219_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (786432, 1)
op325.sizes = ([24, 512, 64], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op325_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg219_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf325', get_index_2, add, None)
        return store
op325 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op326: ExternKernelSchedulerNode(ExternKernelOut)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf324', mode=None), StarDep(name='buf325', mode=None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ExternKernelOut
    buf326.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.node.kernel = extern_kernels.bmm


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 786432}, None)]
op327.unmet_dependencies = [MemoryDep('buf326', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (786432, 1)
op327.sizes = ([512, 24, 64], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op327_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf327', get_index_1, load, None)
        return store
op327 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
    ]
]
op328.node.kernel = extern_kernels.mm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 512}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 786432}, None),
        MemoryDep('buf328', c0, {c0: 786432}, None)]
op329.met_dependencies = [MemoryDep('arg221_1', c1, {c0: 512, c1: 1536}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf329.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (512, 1536)
op329.sizes = ([512], [1536])
buf328_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op329_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf315', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf329', get_index_3, getitem)
        return store_reduction
op329 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 512}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 786432}, None),
        MemoryDep('buf328', c0, {c0: 786432}, None)]
op330.met_dependencies = [MemoryDep('arg221_1', c1, {c0: 512, c1: 1536}, None)]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf330.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (512, 1536)
op330.sizes = ([512], [1536])
buf328_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op330_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf315', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf330', get_index_3, getitem_1)
        return store_reduction
op330 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 786432}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 786432}, None),
        MemoryDep('buf328', c0, {c0: 786432}, None),
        MemoryDep('buf329', c0, {c0: 512}, None),
        MemoryDep('buf330', c0, {c0: 512}, None)]
op332.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg222_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg223_1', c1, {c0: 512, c1: 1536}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf332.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (786432, 1)
op332.sizes = ([512, 1536], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf330_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op332_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf315', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf329', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf330', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg222_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg223_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf332', get_index_7, add_3, None)
        return store
op332 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op333: ExternKernelSchedulerNode(ExternKernelOut)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelOut
    buf333.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op333.node.kernel = extern_kernels.mm


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 3145728}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 3145728}, None)]
op334.met_dependencies = [MemoryDep('arg225_1', c1, {c0: 512, c1: 6144}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (3145728, 1)
op334.sizes = ([512, 6144], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op334_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg225_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf333', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg225_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf334', get_index_4, mul_2, None)
        return store
op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op335: ExternKernelSchedulerNode(ExternKernelOut)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op335.outputs = [
    buf335: ExternKernelOut
    buf335.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op335.node.kernel = extern_kernels.mm


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 512}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 786432}, None),
        MemoryDep('buf335', c0, {c0: 786432}, None)]
op336.met_dependencies = [MemoryDep('arg227_1', c1, {c0: 512, c1: 1536}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (512, 1536)
op336.sizes = ([512], [1536])
buf335_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op336_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf332', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf336', get_index_3, getitem)
        return store_reduction
op336 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 512}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 786432}, None),
        MemoryDep('buf335', c0, {c0: 786432}, None)]
op337.met_dependencies = [MemoryDep('arg227_1', c1, {c0: 512, c1: 1536}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf337.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (512, 1536)
op337.sizes = ([512], [1536])
buf335_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op337_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf332', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf337', get_index_3, getitem_1)
        return store_reduction
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 786432}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 786432}, None),
        MemoryDep('buf335', c0, {c0: 786432}, None),
        MemoryDep('buf336', c0, {c0: 512}, None),
        MemoryDep('buf337', c0, {c0: 512}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg228_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg229_1', c1, {c0: 512, c1: 1536}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (786432, 1)
op339.sizes = ([512, 1536], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf337_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op339_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf332', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf336', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf337', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg228_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg229_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf339', get_index_7, add_3, None)
        return store
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg230_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op340.node.kernel = extern_kernels.mm


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op341.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 786432}, None)]
op342.unmet_dependencies = [MemoryDep('buf340', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op342.met_dependencies = [MemoryDep('arg231_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (786432, 1)
op342.sizes = ([24, 512, 64], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op342_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf342', get_index_2, add, None)
        return store
op342 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 786432}, None)]
op343.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 786432}, None)]
op343.met_dependencies = [MemoryDep('arg233_1', c1, {c0: 512, c1: 1536}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (786432, 1)
op343.sizes = ([512, 1536], [])
buf341_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op343_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf343', get_index_2, mul, None)
        return store
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf342', mode=None), StarDep(name='buf343', mode=None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
    ]
]
op344.node.kernel = extern_kernels.bmm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 12288}, None)]
op345.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 6291456}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (12288, 512)
op345.sizes = ([12288], [512])
buf344_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op345_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf345', get_index_1, reduction)
        return store_reduction
op345 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 12288}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf344', c0, {c0: 6291456}, None),
        MemoryDep('buf345', c0, {c0: 12288}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf346.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (12288, 512)
op346.sizes = ([12288], [512])
buf344_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf346_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op346_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf345', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf346', get_index_2, reduction)
        return store_reduction
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op347.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf347.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op347.node.kernel = extern_kernels.mm


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 6291456}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf344', c0, {c0: 6291456}, None),
        MemoryDep('buf345', c0, {c0: 12288}, None),
        MemoryDep('buf346', c0, {c0: 12288}, None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (6291456, 1)
op348.sizes = ([12288, 512], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf346_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op348_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf345', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf346', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf348', get_index_3, where_1, None)
        return store
op348 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 786432}, None)]
op349.unmet_dependencies = [MemoryDep('buf347', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op349.met_dependencies = [MemoryDep('arg235_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (786432, 1)
op349.sizes = ([24, 512, 64], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op349_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg235_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf349', get_index_2, add, None)
        return store
op349 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op350: ExternKernelSchedulerNode(ExternKernelOut)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf348', mode=None), StarDep(name='buf349', mode=None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ExternKernelOut
    buf350.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf350.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.node.kernel = extern_kernels.bmm


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 786432}, None)]
op351.unmet_dependencies = [MemoryDep('buf350', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (786432, 1)
op351.sizes = ([512, 24, 64], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op351_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf351', get_index_1, load, None)
        return store
op351 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf351', mode=None)]
op352.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
]
op352.node.kernel = extern_kernels.mm


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 512}, None)]
op353.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 786432}, None),
        MemoryDep('buf352', c0, {c0: 786432}, None)]
op353.met_dependencies = [MemoryDep('arg237_1', c1, {c0: 512, c1: 1536}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf353.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (512, 1536)
op353.sizes = ([512], [1536])
buf352_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op353_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf339', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf353', get_index_3, getitem)
        return store_reduction
op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 512}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 786432}, None),
        MemoryDep('buf352', c0, {c0: 786432}, None)]
op354.met_dependencies = [MemoryDep('arg237_1', c1, {c0: 512, c1: 1536}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf354.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (512, 1536)
op354.sizes = ([512], [1536])
buf352_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op354_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf339', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf354', get_index_3, getitem_1)
        return store_reduction
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 786432}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 786432}, None),
        MemoryDep('buf352', c0, {c0: 786432}, None),
        MemoryDep('buf353', c0, {c0: 512}, None),
        MemoryDep('buf354', c0, {c0: 512}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg238_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg239_1', c1, {c0: 512, c1: 1536}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (786432, 1)
op356.sizes = ([512, 1536], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf354_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op356_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf339', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf353', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf354', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg238_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg239_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf356', get_index_7, add_3, None)
        return store
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op357: ExternKernelSchedulerNode(ExternKernelOut)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = [StarDep(name='arg240_1', mode=None)]
op357.outputs = [
    buf357: ExternKernelOut
    buf357.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
]
op357.node.kernel = extern_kernels.mm


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 3145728}, None)]
op358.unmet_dependencies = [MemoryDep('buf357', c0, {c0: 3145728}, None)]
op358.met_dependencies = [MemoryDep('arg241_1', c1, {c0: 512, c1: 6144}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (3145728, 1)
op358.sizes = ([512, 6144], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op358_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg241_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf357', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg241_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf358', get_index_4, mul_2, None)
        return store
op358 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = [StarDep(name='arg242_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op359.node.kernel = extern_kernels.mm


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 512}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 786432}, None),
        MemoryDep('buf359', c0, {c0: 786432}, None)]
op360.met_dependencies = [MemoryDep('arg243_1', c1, {c0: 512, c1: 1536}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf360.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (512, 1536)
op360.sizes = ([512], [1536])
buf359_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op360_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg243_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf360', get_index_3, getitem)
        return store_reduction
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 512}, None)]
op361.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 786432}, None),
        MemoryDep('buf359', c0, {c0: 786432}, None)]
op361.met_dependencies = [MemoryDep('arg243_1', c1, {c0: 512, c1: 1536}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf361.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (512, 1536)
op361.sizes = ([512], [1536])
buf359_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op361_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg243_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf361', get_index_3, getitem_1)
        return store_reduction
op361 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 786432}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 786432}, None),
        MemoryDep('buf359', c0, {c0: 786432}, None),
        MemoryDep('buf360', c0, {c0: 512}, None),
        MemoryDep('buf361', c0, {c0: 512}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg243_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg244_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg245_1', c1, {c0: 512, c1: 1536}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf363.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (786432, 1)
op363.sizes = ([512, 1536], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op363_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg243_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf360', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf361', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg244_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg245_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf363', get_index_7, add_3, None)
        return store
op363 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op364: ExternKernelSchedulerNode(ExternKernelOut)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op364.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op364.outputs = [
    buf364: ExternKernelOut
    buf364.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf364.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op364.node.kernel = extern_kernels.mm


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op365.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 786432}, None)]
op366.unmet_dependencies = [MemoryDep('buf364', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op366.met_dependencies = [MemoryDep('arg247_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (786432, 1)
op366.sizes = ([24, 512, 64], [])
buf364_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op366_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf366', get_index_2, add, None)
        return store
op366 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 786432}, None)]
op367.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 786432}, None)]
op367.met_dependencies = [MemoryDep('arg249_1', c1, {c0: 512, c1: 1536}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (786432, 1)
op367.sizes = ([512, 1536], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op367_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf367', get_index_2, mul, None)
        return store
op367 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf366', mode=None), StarDep(name='buf367', mode=None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
    ]
]
op368.node.kernel = extern_kernels.bmm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 12288}, None)]
op369.unmet_dependencies = [MemoryDep('buf368', c0, {c0: 6291456}, None)]
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf369.users = [
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
    ]
]
op369.group.device = cuda:0
op369.group.iteration = (12288, 512)
op369.sizes = ([12288], [512])
buf368_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op369_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf369', get_index_1, reduction)
        return store_reduction
op369 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 12288}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf368', c0, {c0: 6291456}, None),
        MemoryDep('buf369', c0, {c0: 12288}, None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf370.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (12288, 512)
op370.sizes = ([12288], [512])
buf368_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op370_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf369', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf370', get_index_2, reduction)
        return store_reduction
op370 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op371.met_dependencies = [StarDep(name='arg250_1', mode=None)]
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op371.node.kernel = extern_kernels.mm


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 6291456}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf368', c0, {c0: 6291456}, None),
        MemoryDep('buf369', c0, {c0: 12288}, None),
        MemoryDep('buf370', c0, {c0: 12288}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (6291456, 1)
op372.sizes = ([12288, 512], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf372_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op372_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf369', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf370', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf372', get_index_3, where_1, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 786432}, None)]
op373.unmet_dependencies = [MemoryDep('buf371', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op373.met_dependencies = [MemoryDep('arg251_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (786432, 1)
op373.sizes = ([24, 512, 64], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op373_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg251_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf373', get_index_2, add, None)
        return store
op373 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op374: ExternKernelSchedulerNode(ExternKernelOut)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf372', mode=None), StarDep(name='buf373', mode=None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ExternKernelOut
    buf374.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.node.kernel = extern_kernels.bmm


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 786432}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (786432, 1)
op375.sizes = ([512, 24, 64], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op375_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf375', get_index_1, load, None)
        return store
op375 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op376: ExternKernelSchedulerNode(ExternKernelOut)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf375', mode=None)]
op376.met_dependencies = [StarDep(name='arg252_1', mode=None)]
op376.outputs = [
    buf376: ExternKernelOut
    buf376.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf376.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
]
op376.node.kernel = extern_kernels.mm


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 512}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 786432}, None),
        MemoryDep('buf376', c0, {c0: 786432}, None)]
op377.met_dependencies = [MemoryDep('arg253_1', c1, {c0: 512, c1: 1536}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf377.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (512, 1536)
op377.sizes = ([512], [1536])
buf376_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op377_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg253_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf377', get_index_3, getitem)
        return store_reduction
op377 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 512}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 786432}, None),
        MemoryDep('buf376', c0, {c0: 786432}, None)]
op378.met_dependencies = [MemoryDep('arg253_1', c1, {c0: 512, c1: 1536}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf378.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (512, 1536)
op378.sizes = ([512], [1536])
buf376_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op378_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg253_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf378', get_index_3, getitem_1)
        return store_reduction
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 786432}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 786432}, None),
        MemoryDep('buf376', c0, {c0: 786432}, None),
        MemoryDep('buf377', c0, {c0: 512}, None),
        MemoryDep('buf378', c0, {c0: 512}, None)]
op380.met_dependencies = 
    [   MemoryDep('arg253_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg254_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg255_1', c1, {c0: 512, c1: 1536}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf380.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
    ]
]
op380.group.device = cuda:0
op380.group.iteration = (786432, 1)
op380.sizes = ([512, 1536], [])
buf376_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf378_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op380_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg253_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf377', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf378', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg254_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg255_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf380', get_index_7, add_3, None)
        return store
op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf381.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False)]
]
op381.node.kernel = extern_kernels.mm


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 3145728}, None)]
op382.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 3145728}, None)]
op382.met_dependencies = [MemoryDep('arg257_1', c1, {c0: 512, c1: 6144}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (3145728, 1)
op382.sizes = ([512, 6144], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op382_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg257_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf382', get_index_4, mul_2, None)
        return store
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op383: ExternKernelSchedulerNode(ExternKernelOut)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op383.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op383.outputs = [
    buf383: ExternKernelOut
    buf383.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
    ]
]
op383.node.kernel = extern_kernels.mm


op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 512}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 786432}, None),
        MemoryDep('buf383', c0, {c0: 786432}, None)]
op384.met_dependencies = [MemoryDep('arg259_1', c1, {c0: 512, c1: 1536}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf384.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (512, 1536)
op384.sizes = ([512], [1536])
buf383_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op384_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg259_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf380', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf384', get_index_3, getitem)
        return store_reduction
op384 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 512}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 786432}, None),
        MemoryDep('buf383', c0, {c0: 786432}, None)]
op385.met_dependencies = [MemoryDep('arg259_1', c1, {c0: 512, c1: 1536}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf385.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (512, 1536)
op385.sizes = ([512], [1536])
buf383_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op385_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg259_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf380', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf385', get_index_3, getitem_1)
        return store_reduction
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 786432}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 786432}, None),
        MemoryDep('buf383', c0, {c0: 786432}, None),
        MemoryDep('buf384', c0, {c0: 512}, None),
        MemoryDep('buf385', c0, {c0: 512}, None)]
op387.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg260_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg261_1', c1, {c0: 512, c1: 1536}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (786432, 1)
op387.sizes = ([512, 1536], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf385_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op387_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg259_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf380', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf384', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf385', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg260_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg261_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf387', get_index_7, add_3, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf388.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op388.node.kernel = extern_kernels.mm


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op389.met_dependencies = [StarDep(name='arg264_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False)]
]
op389.node.kernel = extern_kernels.mm


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 786432}, None)]
op390.unmet_dependencies = [MemoryDep('buf388', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op390.met_dependencies = [MemoryDep('arg263_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf390.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (786432, 1)
op390.sizes = ([24, 512, 64], [])
buf388_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op390_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf390', get_index_2, add, None)
        return store
op390 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 786432}, None)]
op391.unmet_dependencies = [MemoryDep('buf389', c0, {c0: 786432}, None)]
op391.met_dependencies = [MemoryDep('arg265_1', c1, {c0: 512, c1: 1536}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (786432, 1)
op391.sizes = ([512, 1536], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op391_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg265_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf391', get_index_2, mul, None)
        return store
op391 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op392: ExternKernelSchedulerNode(ExternKernelOut)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf390', mode=None), StarDep(name='buf391', mode=None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ExternKernelOut
    buf392.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=True, is_weak=False),
    ]
]
op392.node.kernel = extern_kernels.bmm


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 12288}, None)]
op393.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 6291456}, None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
    ]
]
op393.group.device = cuda:0
op393.group.iteration = (12288, 512)
op393.sizes = ([12288], [512])
buf392_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op393_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf393', get_index_1, reduction)
        return store_reduction
op393 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 12288}, None)]
op394.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 6291456}, None),
        MemoryDep('buf393', c0, {c0: 12288}, None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf394.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (12288, 512)
op394.sizes = ([12288], [512])
buf392_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf394_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op394_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf393', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf394', get_index_2, reduction)
        return store_reduction
op394 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op395.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf395.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op395.node.kernel = extern_kernels.mm


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 6291456}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 6291456}, None),
        MemoryDep('buf393', c0, {c0: 12288}, None),
        MemoryDep('buf394', c0, {c0: 12288}, None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (6291456, 1)
op396.sizes = ([12288, 512], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf394_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op396_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf393', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf394', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf396', get_index_3, where_1, None)
        return store
op396 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 786432}, None)]
op397.unmet_dependencies = [MemoryDep('buf395', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op397.met_dependencies = [MemoryDep('arg267_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (786432, 1)
op397.sizes = ([24, 512, 64], [])
buf395_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op397_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf397', get_index_2, add, None)
        return store
op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op398: ExternKernelSchedulerNode(ExternKernelOut)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = [StarDep(name='buf396', mode=None), StarDep(name='buf397', mode=None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ExternKernelOut
    buf398.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.node.kernel = extern_kernels.bmm


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 786432}, None)]
op399.unmet_dependencies = [MemoryDep('buf398', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (786432, 1)
op399.sizes = ([512, 24, 64], [])
buf398_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op399_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf399', get_index_1, load, None)
        return store
op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf399', mode=None)]
op400.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf400.users = [
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
    ]
]
op400.node.kernel = extern_kernels.mm


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 512}, None)]
op401.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 786432}, None),
        MemoryDep('buf400', c0, {c0: 786432}, None)]
op401.met_dependencies = [MemoryDep('arg269_1', c1, {c0: 512, c1: 1536}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf401.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (512, 1536)
op401.sizes = ([512], [1536])
buf400_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op401_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf387', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf401', get_index_3, getitem)
        return store_reduction
op401 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 512}, None)]
op402.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 786432}, None),
        MemoryDep('buf400', c0, {c0: 786432}, None)]
op402.met_dependencies = [MemoryDep('arg269_1', c1, {c0: 512, c1: 1536}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf402.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (512, 1536)
op402.sizes = ([512], [1536])
buf400_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op402_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf387', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf402', get_index_3, getitem_1)
        return store_reduction
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 786432}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 786432}, None),
        MemoryDep('buf400', c0, {c0: 786432}, None),
        MemoryDep('buf401', c0, {c0: 512}, None),
        MemoryDep('buf402', c0, {c0: 512}, None)]
op404.met_dependencies = 
    [   MemoryDep('arg269_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg270_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg271_1', c1, {c0: 512, c1: 1536}, None)]
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf404.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
]
op404.group.device = cuda:0
op404.group.iteration = (786432, 1)
op404.sizes = ([512, 1536], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf402_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op404_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf387', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf401', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf402', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg270_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg271_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf404', get_index_7, add_3, None)
        return store
op404 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf404', mode=None)]
op405.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op405.node.kernel = extern_kernels.mm


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 3145728}, None)]
op406.unmet_dependencies = [MemoryDep('buf405', c0, {c0: 3145728}, None)]
op406.met_dependencies = [MemoryDep('arg273_1', c1, {c0: 512, c1: 6144}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (3145728, 1)
op406.sizes = ([512, 6144], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op406_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg273_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf405', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf406', get_index_4, mul_2, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op407: ExternKernelSchedulerNode(ExternKernelOut)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf406', mode=None)]
op407.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op407.outputs = [
    buf407: ExternKernelOut
    buf407.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf407.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
]
op407.node.kernel = extern_kernels.mm


op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 512}, None)]
op408.unmet_dependencies = 
    [   MemoryDep('buf404', c0, {c0: 786432}, None),
        MemoryDep('buf407', c0, {c0: 786432}, None)]
op408.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 512, c1: 1536}, None)]
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf408.users = [NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (512, 1536)
op408.sizes = ([512], [1536])
buf407_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op408_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf404', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf408', get_index_3, getitem)
        return store_reduction
op408 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 512}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf404', c0, {c0: 786432}, None),
        MemoryDep('buf407', c0, {c0: 786432}, None)]
op409.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 512, c1: 1536}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf409.users = [NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (512, 1536)
op409.sizes = ([512], [1536])
buf407_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op409_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf404', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf409', get_index_3, getitem_1)
        return store_reduction
op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 786432}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf404', c0, {c0: 786432}, None),
        MemoryDep('buf407', c0, {c0: 786432}, None),
        MemoryDep('buf408', c0, {c0: 512}, None),
        MemoryDep('buf409', c0, {c0: 512}, None)]
op411.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg276_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg277_1', c1, {c0: 512, c1: 1536}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf411.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op411.group.device = cuda:0
op411.group.iteration = (786432, 1)
op411.sizes = ([512, 1536], [])
buf407_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf409_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op411_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf404', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf408', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf409', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg276_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg277_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf411', get_index_7, add_3, None)
        return store
op411 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op412: ExternKernelSchedulerNode(ExternKernelOut)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op412.met_dependencies = [StarDep(name='arg278_1', mode=None)]
op412.outputs = [
    buf412: ExternKernelOut
    buf412.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf412.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op412.node.kernel = extern_kernels.mm


op413: ExternKernelSchedulerNode(ExternKernelOut)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op413.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op413.outputs = [
    buf413: ExternKernelOut
    buf413.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf413.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False)]
]
op413.node.kernel = extern_kernels.mm


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 786432}, None)]
op414.unmet_dependencies = [MemoryDep('buf412', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op414.met_dependencies = [MemoryDep('arg279_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (786432, 1)
op414.sizes = ([24, 512, 64], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op414_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg279_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf414', get_index_2, add, None)
        return store
op414 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 786432}, None)]
op415.unmet_dependencies = [MemoryDep('buf413', c0, {c0: 786432}, None)]
op415.met_dependencies = [MemoryDep('arg281_1', c1, {c0: 512, c1: 1536}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (786432, 1)
op415.sizes = ([512, 1536], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op415_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf415', get_index_2, mul, None)
        return store
op415 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op416: ExternKernelSchedulerNode(ExternKernelOut)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf414', mode=None), StarDep(name='buf415', mode=None)]
op416.met_dependencies = []
op416.outputs = [
    buf416: ExternKernelOut
    buf416.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf416.users = [
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
    ]
]
op416.node.kernel = extern_kernels.bmm


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 12288}, None)]
op417.unmet_dependencies = [MemoryDep('buf416', c0, {c0: 6291456}, None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (12288, 512)
op417.sizes = ([12288], [512])
buf416_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op417_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf417', get_index_1, reduction)
        return store_reduction
op417 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 12288}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 6291456}, None),
        MemoryDep('buf417', c0, {c0: 12288}, None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf418.users = [NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (12288, 512)
op418.sizes = ([12288], [512])
buf416_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf418_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op418_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf417', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf418', get_index_2, reduction)
        return store_reduction
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op419: ExternKernelSchedulerNode(ExternKernelOut)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op419.met_dependencies = [StarDep(name='arg282_1', mode=None)]
op419.outputs = [
    buf419: ExternKernelOut
    buf419.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf419.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op419.node.kernel = extern_kernels.mm


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 6291456}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 6291456}, None),
        MemoryDep('buf417', c0, {c0: 12288}, None),
        MemoryDep('buf418', c0, {c0: 12288}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf420.users = [NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (6291456, 1)
op420.sizes = ([12288, 512], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf418_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf420_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op420_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf417', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf418', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf420', get_index_3, where_1, None)
        return store
op420 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 786432}, None)]
op421.unmet_dependencies = [MemoryDep('buf419', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op421.met_dependencies = [MemoryDep('arg283_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf421.users = [NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (786432, 1)
op421.sizes = ([24, 512, 64], [])
buf419_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op421_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg283_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf421', get_index_2, add, None)
        return store
op421 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op422: ExternKernelSchedulerNode(ExternKernelOut)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf420', mode=None), StarDep(name='buf421', mode=None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ExternKernelOut
    buf422.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.node.kernel = extern_kernels.bmm


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 786432}, None)]
op423.unmet_dependencies = [MemoryDep('buf422', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (786432, 1)
op423.sizes = ([512, 24, 64], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op423_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf423', get_index_1, load, None)
        return store
op423 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op424: ExternKernelSchedulerNode(ExternKernelOut)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg284_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelOut
    buf424.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op424.node.kernel = extern_kernels.mm


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 512}, None)]
op425.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 786432}, None),
        MemoryDep('buf424', c0, {c0: 786432}, None)]
op425.met_dependencies = [MemoryDep('arg285_1', c1, {c0: 512, c1: 1536}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf425.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (512, 1536)
op425.sizes = ([512], [1536])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op425_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf411', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf425', get_index_3, getitem)
        return store_reduction
op425 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 512}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 786432}, None),
        MemoryDep('buf424', c0, {c0: 786432}, None)]
op426.met_dependencies = [MemoryDep('arg285_1', c1, {c0: 512, c1: 1536}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf426.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (512, 1536)
op426.sizes = ([512], [1536])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op426_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf411', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf426', get_index_3, getitem_1)
        return store_reduction
op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 786432}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 786432}, None),
        MemoryDep('buf424', c0, {c0: 786432}, None),
        MemoryDep('buf425', c0, {c0: 512}, None),
        MemoryDep('buf426', c0, {c0: 512}, None)]
op428.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg286_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg287_1', c1, {c0: 512, c1: 1536}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf428.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (786432, 1)
op428.sizes = ([512, 1536], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf426_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op428_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf411', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf425', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf426', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg286_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg287_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf428', get_index_7, add_3, None)
        return store
op428 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op429: ExternKernelSchedulerNode(ExternKernelOut)
op429.writes = [StarDep(name='buf429', mode=None)]
op429.unmet_dependencies = [StarDep(name='buf428', mode=None)]
op429.met_dependencies = [StarDep(name='arg288_1', mode=None)]
op429.outputs = [
    buf429: ExternKernelOut
    buf429.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf429.users = [NodeUser(node=SchedulerNode(name='op430'), can_inplace=True, is_weak=False)]
]
op429.node.kernel = extern_kernels.mm


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 3145728}, None)]
op430.unmet_dependencies = [MemoryDep('buf429', c0, {c0: 3145728}, None)]
op430.met_dependencies = [MemoryDep('arg289_1', c1, {c0: 512, c1: 6144}, None)]
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf430.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (3145728, 1)
op430.sizes = ([512, 6144], [])
buf429_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op430_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf429', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg289_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf429', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf430', get_index_4, mul_2, None)
        return store
op430 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf430', mode=None)]
op431.met_dependencies = [StarDep(name='arg290_1', mode=None)]
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
    ]
]
op431.node.kernel = extern_kernels.mm


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 512}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 786432}, None),
        MemoryDep('buf431', c0, {c0: 786432}, None)]
op432.met_dependencies = [MemoryDep('arg291_1', c1, {c0: 512, c1: 1536}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf432.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (512, 1536)
op432.sizes = ([512], [1536])
buf431_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op432_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg291_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf428', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf432', get_index_3, getitem)
        return store_reduction
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 512}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 786432}, None),
        MemoryDep('buf431', c0, {c0: 786432}, None)]
op433.met_dependencies = [MemoryDep('arg291_1', c1, {c0: 512, c1: 1536}, None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf433.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (512, 1536)
op433.sizes = ([512], [1536])
buf431_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op433_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg291_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf428', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf433', get_index_3, getitem_1)
        return store_reduction
op433 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 786432}, None)]
op435.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 786432}, None),
        MemoryDep('buf431', c0, {c0: 786432}, None),
        MemoryDep('buf432', c0, {c0: 512}, None),
        MemoryDep('buf433', c0, {c0: 512}, None)]
op435.met_dependencies = 
    [   MemoryDep('arg291_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg292_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg293_1', c1, {c0: 512, c1: 1536}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf435.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=True, is_weak=False),
    ]
]
op435.group.device = cuda:0
op435.group.iteration = (786432, 1)
op435.sizes = ([512, 1536], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf433_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op435_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg291_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf428', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf432', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf433', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg292_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg293_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf435', get_index_7, add_3, None)
        return store
op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op436.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf436.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
]
op436.node.kernel = extern_kernels.mm


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op437.met_dependencies = [StarDep(name='arg296_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False)]
]
op437.node.kernel = extern_kernels.mm


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 786432}, None)]
op438.unmet_dependencies = [MemoryDep('buf436', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op438.met_dependencies = [MemoryDep('arg295_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (786432, 1)
op438.sizes = ([24, 512, 64], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op438_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg295_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf438', get_index_2, add, None)
        return store
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 786432}, None)]
op439.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 786432}, None)]
op439.met_dependencies = [MemoryDep('arg297_1', c1, {c0: 512, c1: 1536}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (786432, 1)
op439.sizes = ([512, 1536], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op439_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf439', get_index_2, mul, None)
        return store
op439 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf438', mode=None), StarDep(name='buf439', mode=None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False),
    ]
]
op440.node.kernel = extern_kernels.bmm


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 12288}, None)]
op441.unmet_dependencies = [MemoryDep('buf440', c0, {c0: 6291456}, None)]
op441.met_dependencies = []
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf441.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op441.group.device = cuda:0
op441.group.iteration = (12288, 512)
op441.sizes = ([12288], [512])
buf440_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op441_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf441', get_index_1, reduction)
        return store_reduction
op441 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 12288}, None)]
op442.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 6291456}, None),
        MemoryDep('buf441', c0, {c0: 12288}, None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf442.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (12288, 512)
op442.sizes = ([12288], [512])
buf440_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf442_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op442_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf441', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf442', get_index_2, reduction)
        return store_reduction
op442 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op443.met_dependencies = [StarDep(name='arg298_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op443.node.kernel = extern_kernels.mm


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 6291456}, None)]
op444.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 6291456}, None),
        MemoryDep('buf441', c0, {c0: 12288}, None),
        MemoryDep('buf442', c0, {c0: 12288}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (6291456, 1)
op444.sizes = ([12288, 512], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf442_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf444_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op444_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf441', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf442', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf444', get_index_3, where_1, None)
        return store
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 786432}, None)]
op445.unmet_dependencies = [MemoryDep('buf443', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op445.met_dependencies = [MemoryDep('arg299_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (786432, 1)
op445.sizes = ([24, 512, 64], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op445_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg299_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf445', get_index_2, add, None)
        return store
op445 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op446: ExternKernelSchedulerNode(ExternKernelOut)
op446.writes = [StarDep(name='buf446', mode=None)]
op446.unmet_dependencies = [StarDep(name='buf444', mode=None), StarDep(name='buf445', mode=None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ExternKernelOut
    buf446.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.node.kernel = extern_kernels.bmm


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 786432}, None)]
op447.unmet_dependencies = [MemoryDep('buf446', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (786432, 1)
op447.sizes = ([512, 24, 64], [])
buf446_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op447_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf446', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf447', get_index_1, load, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=True, is_weak=False),
    ]
]
op448.node.kernel = extern_kernels.mm


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 512}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 786432}, None),
        MemoryDep('buf448', c0, {c0: 786432}, None)]
op449.met_dependencies = [MemoryDep('arg301_1', c1, {c0: 512, c1: 1536}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf449.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (512, 1536)
op449.sizes = ([512], [1536])
buf448_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op449_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf449', get_index_3, getitem)
        return store_reduction
op449 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 512}, None)]
op450.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 786432}, None),
        MemoryDep('buf448', c0, {c0: 786432}, None)]
op450.met_dependencies = [MemoryDep('arg301_1', c1, {c0: 512, c1: 1536}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf450.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (512, 1536)
op450.sizes = ([512], [1536])
buf448_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op450_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf450', get_index_3, getitem_1)
        return store_reduction
op450 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 786432}, None)]
op452.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 786432}, None),
        MemoryDep('buf448', c0, {c0: 786432}, None),
        MemoryDep('buf449', c0, {c0: 512}, None),
        MemoryDep('buf450', c0, {c0: 512}, None)]
op452.met_dependencies = 
    [   MemoryDep('arg301_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg302_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg303_1', c1, {c0: 512, c1: 1536}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf452.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False),
    ]
]
op452.group.device = cuda:0
op452.group.iteration = (786432, 1)
op452.sizes = ([512, 1536], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf450_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op452_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf449', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf450', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg302_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg303_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf452', get_index_7, add_3, None)
        return store
op452 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op453: ExternKernelSchedulerNode(ExternKernelOut)
op453.writes = [StarDep(name='buf453', mode=None)]
op453.unmet_dependencies = [StarDep(name='buf452', mode=None)]
op453.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op453.outputs = [
    buf453: ExternKernelOut
    buf453.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf453.users = [NodeUser(node=SchedulerNode(name='op454'), can_inplace=True, is_weak=False)]
]
op453.node.kernel = extern_kernels.mm


op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 3145728}, None)]
op454.unmet_dependencies = [MemoryDep('buf453', c0, {c0: 3145728}, None)]
op454.met_dependencies = [MemoryDep('arg305_1', c1, {c0: 512, c1: 6144}, None)]
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf454.users = [NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
]
op454.group.device = cuda:0
op454.group.iteration = (3145728, 1)
op454.sizes = ([512, 6144], [])
buf453_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op454_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg305_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf453', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg305_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf454', get_index_4, mul_2, None)
        return store
op454 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op455: ExternKernelSchedulerNode(ExternKernelOut)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf454', mode=None)]
op455.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op455.outputs = [
    buf455: ExternKernelOut
    buf455.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf455.users = [
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False),
    ]
]
op455.node.kernel = extern_kernels.mm


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 512}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf452', c0, {c0: 786432}, None),
        MemoryDep('buf455', c0, {c0: 786432}, None)]
op456.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 512, c1: 1536}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf456.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (512, 1536)
op456.sizes = ([512], [1536])
buf455_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op456_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf452', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf456', get_index_3, getitem)
        return store_reduction
op456 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 512}, None)]
op457.unmet_dependencies = 
    [   MemoryDep('buf452', c0, {c0: 786432}, None),
        MemoryDep('buf455', c0, {c0: 786432}, None)]
op457.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 512, c1: 1536}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf457.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (512, 1536)
op457.sizes = ([512], [1536])
buf455_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op457_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf452', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf457', get_index_3, getitem_1)
        return store_reduction
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 786432}, None)]
op459.unmet_dependencies = 
    [   MemoryDep('buf452', c0, {c0: 786432}, None),
        MemoryDep('buf455', c0, {c0: 786432}, None),
        MemoryDep('buf456', c0, {c0: 512}, None),
        MemoryDep('buf457', c0, {c0: 512}, None)]
op459.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg308_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg309_1', c1, {c0: 512, c1: 1536}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf459.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=True, is_weak=False),
    ]
]
op459.group.device = cuda:0
op459.group.iteration = (786432, 1)
op459.sizes = ([512, 1536], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf457_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op459_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf452', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf456', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf457', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg308_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg309_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf459', get_index_7, add_3, None)
        return store
op459 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op460: ExternKernelSchedulerNode(ExternKernelOut)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op460.met_dependencies = [StarDep(name='arg310_1', mode=None)]
op460.outputs = [
    buf460: ExternKernelOut
    buf460.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf460.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op460.node.kernel = extern_kernels.mm


op461: ExternKernelSchedulerNode(ExternKernelOut)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op461.met_dependencies = [StarDep(name='arg312_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelOut
    buf461.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf461.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
]
op461.node.kernel = extern_kernels.mm


op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 786432}, None)]
op462.unmet_dependencies = [MemoryDep('buf460', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op462.met_dependencies = [MemoryDep('arg311_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf462.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (786432, 1)
op462.sizes = ([24, 512, 64], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op462_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg311_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf462', get_index_2, add, None)
        return store
op462 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 786432}, None)]
op463.unmet_dependencies = [MemoryDep('buf461', c0, {c0: 786432}, None)]
op463.met_dependencies = [MemoryDep('arg313_1', c1, {c0: 512, c1: 1536}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (786432, 1)
op463.sizes = ([512, 1536], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op463_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg313_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf463', get_index_2, mul, None)
        return store
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf462', mode=None), StarDep(name='buf463', mode=None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf464.users = [
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=True, is_weak=False),
    ]
]
op464.node.kernel = extern_kernels.bmm


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 12288}, None)]
op465.unmet_dependencies = [MemoryDep('buf464', c0, {c0: 6291456}, None)]
op465.met_dependencies = []
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf465.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
    ]
]
op465.group.device = cuda:0
op465.group.iteration = (12288, 512)
op465.sizes = ([12288], [512])
buf464_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op465_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf465', get_index_1, reduction)
        return store_reduction
op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 12288}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf464', c0, {c0: 6291456}, None),
        MemoryDep('buf465', c0, {c0: 12288}, None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf466.users = [NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (12288, 512)
op466.sizes = ([12288], [512])
buf464_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf466_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op466_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf465', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf466', get_index_2, reduction)
        return store_reduction
op466 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op467: ExternKernelSchedulerNode(ExternKernelOut)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op467.met_dependencies = [StarDep(name='arg314_1', mode=None)]
op467.outputs = [
    buf467: ExternKernelOut
    buf467.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf467.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op467.node.kernel = extern_kernels.mm


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 6291456}, None)]
op468.unmet_dependencies = 
    [   MemoryDep('buf464', c0, {c0: 6291456}, None),
        MemoryDep('buf465', c0, {c0: 12288}, None),
        MemoryDep('buf466', c0, {c0: 12288}, None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf468.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (6291456, 1)
op468.sizes = ([12288, 512], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf466_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf468_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op468_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf465', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf466', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf468', get_index_3, where_1, None)
        return store
op468 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 786432}, None)]
op469.unmet_dependencies = [MemoryDep('buf467', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op469.met_dependencies = [MemoryDep('arg315_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (786432, 1)
op469.sizes = ([24, 512, 64], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op469_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf469', get_index_2, add, None)
        return store
op469 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op470: ExternKernelSchedulerNode(ExternKernelOut)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf468', mode=None), StarDep(name='buf469', mode=None)]
op470.met_dependencies = []
op470.outputs = [
    buf470: ExternKernelOut
    buf470.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.node.kernel = extern_kernels.bmm


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 786432}, None)]
op471.unmet_dependencies = [MemoryDep('buf470', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op471.met_dependencies = []
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (786432, 1)
op471.sizes = ([512, 24, 64], [])
buf470_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op471_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf470', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf471', get_index_1, load, None)
        return store
op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op472: ExternKernelSchedulerNode(ExternKernelOut)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op472.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op472.outputs = [
    buf472: ExternKernelOut
    buf472.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf472.users = [
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=True, is_weak=False),
    ]
]
op472.node.kernel = extern_kernels.mm


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 512}, None)]
op473.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 786432}, None),
        MemoryDep('buf472', c0, {c0: 786432}, None)]
op473.met_dependencies = [MemoryDep('arg317_1', c1, {c0: 512, c1: 1536}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf473.users = [NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op473.group.device = cuda:0
op473.group.iteration = (512, 1536)
op473.sizes = ([512], [1536])
buf472_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op473_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf459', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf473', get_index_3, getitem)
        return store_reduction
op473 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 512}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 786432}, None),
        MemoryDep('buf472', c0, {c0: 786432}, None)]
op474.met_dependencies = [MemoryDep('arg317_1', c1, {c0: 512, c1: 1536}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf474.users = [NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (512, 1536)
op474.sizes = ([512], [1536])
buf472_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op474_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf459', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf474', get_index_3, getitem_1)
        return store_reduction
op474 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 786432}, None)]
op476.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 786432}, None),
        MemoryDep('buf472', c0, {c0: 786432}, None),
        MemoryDep('buf473', c0, {c0: 512}, None),
        MemoryDep('buf474', c0, {c0: 512}, None)]
op476.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg318_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg319_1', c1, {c0: 512, c1: 1536}, None)]
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf476.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
]
op476.group.device = cuda:0
op476.group.iteration = (786432, 1)
op476.sizes = ([512, 1536], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf474_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op476_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf459', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf473', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf474', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg318_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg319_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf476', get_index_7, add_3, None)
        return store
op476 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op477: ExternKernelSchedulerNode(ExternKernelOut)
op477.writes = [StarDep(name='buf477', mode=None)]
op477.unmet_dependencies = [StarDep(name='buf476', mode=None)]
op477.met_dependencies = [StarDep(name='arg320_1', mode=None)]
op477.outputs = [
    buf477: ExternKernelOut
    buf477.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf477.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False)]
]
op477.node.kernel = extern_kernels.mm


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 3145728}, None)]
op478.unmet_dependencies = [MemoryDep('buf477', c0, {c0: 3145728}, None)]
op478.met_dependencies = [MemoryDep('arg321_1', c1, {c0: 512, c1: 6144}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf478.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op478.group.device = cuda:0
op478.group.iteration = (3145728, 1)
op478.sizes = ([512, 6144], [])
buf477_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op478_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf477', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg321_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf478', get_index_4, mul_2, None)
        return store
op478 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op479: ExternKernelSchedulerNode(ExternKernelOut)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op479.met_dependencies = [StarDep(name='arg322_1', mode=None)]
op479.outputs = [
    buf479: ExternKernelOut
    buf479.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf479.users = [
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
]
op479.node.kernel = extern_kernels.mm


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 512}, None)]
op480.unmet_dependencies = 
    [   MemoryDep('buf476', c0, {c0: 786432}, None),
        MemoryDep('buf479', c0, {c0: 786432}, None)]
op480.met_dependencies = [MemoryDep('arg323_1', c1, {c0: 512, c1: 1536}, None)]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf480.users = [NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op480.group.device = cuda:0
op480.group.iteration = (512, 1536)
op480.sizes = ([512], [1536])
buf479_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op480_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg323_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf476', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf480', get_index_3, getitem)
        return store_reduction
op480 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 512}, None)]
op481.unmet_dependencies = 
    [   MemoryDep('buf476', c0, {c0: 786432}, None),
        MemoryDep('buf479', c0, {c0: 786432}, None)]
op481.met_dependencies = [MemoryDep('arg323_1', c1, {c0: 512, c1: 1536}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf481.users = [NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (512, 1536)
op481.sizes = ([512], [1536])
buf479_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op481_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg323_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf476', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf481', get_index_3, getitem_1)
        return store_reduction
op481 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 786432}, None)]
op483.unmet_dependencies = 
    [   MemoryDep('buf476', c0, {c0: 786432}, None),
        MemoryDep('buf479', c0, {c0: 786432}, None),
        MemoryDep('buf480', c0, {c0: 512}, None),
        MemoryDep('buf481', c0, {c0: 512}, None)]
op483.met_dependencies = 
    [   MemoryDep('arg323_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg324_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg325_1', c1, {c0: 512, c1: 1536}, None)]
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf483.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=True, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (786432, 1)
op483.sizes = ([512, 1536], [])
buf479_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf481_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op483_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg323_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf476', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf480', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf481', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg324_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg325_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf483', get_index_7, add_3, None)
        return store
op483 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op484: ExternKernelSchedulerNode(ExternKernelOut)
op484.writes = [StarDep(name='buf484', mode=None)]
op484.unmet_dependencies = [StarDep(name='buf483', mode=None)]
op484.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op484.outputs = [
    buf484: ExternKernelOut
    buf484.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op484.node.kernel = extern_kernels.mm


op485: ExternKernelSchedulerNode(ExternKernelOut)
op485.writes = [StarDep(name='buf485', mode=None)]
op485.unmet_dependencies = [StarDep(name='buf483', mode=None)]
op485.met_dependencies = [StarDep(name='arg328_1', mode=None)]
op485.outputs = [
    buf485: ExternKernelOut
    buf485.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf485.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=True, is_weak=False)]
]
op485.node.kernel = extern_kernels.mm


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 786432}, None)]
op486.unmet_dependencies = [MemoryDep('buf484', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op486.met_dependencies = [MemoryDep('arg327_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (786432, 1)
op486.sizes = ([24, 512, 64], [])
buf484_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op486_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf486', get_index_2, add, None)
        return store
op486 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 786432}, None)]
op487.unmet_dependencies = [MemoryDep('buf485', c0, {c0: 786432}, None)]
op487.met_dependencies = [MemoryDep('arg329_1', c1, {c0: 512, c1: 1536}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (786432, 1)
op487.sizes = ([512, 1536], [])
buf485_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op487_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg329_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf487', get_index_2, mul, None)
        return store
op487 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op488: ExternKernelSchedulerNode(ExternKernelOut)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf486', mode=None), StarDep(name='buf487', mode=None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ExternKernelOut
    buf488.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf488.users = [
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
    ]
]
op488.node.kernel = extern_kernels.bmm


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', c0, {c0: 12288}, None)]
op489.unmet_dependencies = [MemoryDep('buf488', c0, {c0: 6291456}, None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf489.users = [
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
    ]
]
op489.group.device = cuda:0
op489.group.iteration = (12288, 512)
op489.sizes = ([12288], [512])
buf488_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op489_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf489', get_index_1, reduction)
        return store_reduction
op489 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 12288}, None)]
op490.unmet_dependencies = 
    [   MemoryDep('buf488', c0, {c0: 6291456}, None),
        MemoryDep('buf489', c0, {c0: 12288}, None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf490.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (12288, 512)
op490.sizes = ([12288], [512])
buf488_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf490_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op490_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf489', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf490', get_index_2, reduction)
        return store_reduction
op490 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf483', mode=None)]
op491.met_dependencies = [StarDep(name='arg330_1', mode=None)]
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf491.users = [NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op491.node.kernel = extern_kernels.mm


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 6291456}, None)]
op492.unmet_dependencies = 
    [   MemoryDep('buf488', c0, {c0: 6291456}, None),
        MemoryDep('buf489', c0, {c0: 12288}, None),
        MemoryDep('buf490', c0, {c0: 12288}, None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf492.users = [NodeUser(node=ExternKernelSchedulerNode(name='op494'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (6291456, 1)
op492.sizes = ([12288, 512], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf490_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf492_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op492_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf489', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf490', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf492', get_index_3, where_1, None)
        return store
op492 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 786432}, None)]
op493.unmet_dependencies = [MemoryDep('buf491', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op493.met_dependencies = [MemoryDep('arg331_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf493.users = [NodeUser(node=ExternKernelSchedulerNode(name='op494'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (786432, 1)
op493.sizes = ([24, 512, 64], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op493_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg331_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf493', get_index_2, add, None)
        return store
op493 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op494: ExternKernelSchedulerNode(ExternKernelOut)
op494.writes = [StarDep(name='buf494', mode=None)]
op494.unmet_dependencies = [StarDep(name='buf492', mode=None), StarDep(name='buf493', mode=None)]
op494.met_dependencies = []
op494.outputs = [
    buf494: ExternKernelOut
    buf494.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf494.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.node.kernel = extern_kernels.bmm


op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 786432}, None)]
op495.unmet_dependencies = [MemoryDep('buf494', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op495.met_dependencies = []
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf495.users = [NodeUser(node=ExternKernelSchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (786432, 1)
op495.sizes = ([512, 24, 64], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op495_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf495', get_index_1, load, None)
        return store
op495 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op496: ExternKernelSchedulerNode(ExternKernelOut)
op496.writes = [StarDep(name='buf496', mode=None)]
op496.unmet_dependencies = [StarDep(name='buf495', mode=None)]
op496.met_dependencies = [StarDep(name='arg332_1', mode=None)]
op496.outputs = [
    buf496: ExternKernelOut
    buf496.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf496.users = [
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=True, is_weak=False),
    ]
]
op496.node.kernel = extern_kernels.mm


op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 512}, None)]
op497.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 786432}, None),
        MemoryDep('buf496', c0, {c0: 786432}, None)]
op497.met_dependencies = [MemoryDep('arg333_1', c1, {c0: 512, c1: 1536}, None)]
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf497.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (512, 1536)
op497.sizes = ([512], [1536])
buf496_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op497_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf483', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf497', get_index_3, getitem)
        return store_reduction
op497 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 512}, None)]
op498.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 786432}, None),
        MemoryDep('buf496', c0, {c0: 786432}, None)]
op498.met_dependencies = [MemoryDep('arg333_1', c1, {c0: 512, c1: 1536}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf498.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (512, 1536)
op498.sizes = ([512], [1536])
buf496_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op498_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf483', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf498', get_index_3, getitem_1)
        return store_reduction
op498 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 786432}, None)]
op500.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 786432}, None),
        MemoryDep('buf496', c0, {c0: 786432}, None),
        MemoryDep('buf497', c0, {c0: 512}, None),
        MemoryDep('buf498', c0, {c0: 512}, None)]
op500.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg334_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg335_1', c1, {c0: 512, c1: 1536}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf500.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False),
    ]
]
op500.group.device = cuda:0
op500.group.iteration = (786432, 1)
op500.sizes = ([512, 1536], [])
buf496_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf498_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op500_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf483', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf497', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf498', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg334_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg335_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf500', get_index_7, add_3, None)
        return store
op500 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op501: ExternKernelSchedulerNode(ExternKernelOut)
op501.writes = [StarDep(name='buf501', mode=None)]
op501.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op501.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op501.outputs = [
    buf501: ExternKernelOut
    buf501.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf501.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False)]
]
op501.node.kernel = extern_kernels.mm


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 3145728}, None)]
op502.unmet_dependencies = [MemoryDep('buf501', c0, {c0: 3145728}, None)]
op502.met_dependencies = [MemoryDep('arg337_1', c1, {c0: 512, c1: 6144}, None)]
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (3145728, 1)
op502.sizes = ([512, 6144], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op502_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf501', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg337_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf502', get_index_4, mul_2, None)
        return store
op502 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf502', mode=None)]
op503.met_dependencies = [StarDep(name='arg338_1', mode=None)]
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False),
    ]
]
op503.node.kernel = extern_kernels.mm


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 512}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf500', c0, {c0: 786432}, None),
        MemoryDep('buf503', c0, {c0: 786432}, None)]
op504.met_dependencies = [MemoryDep('arg339_1', c1, {c0: 512, c1: 1536}, None)]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf504.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (512, 1536)
op504.sizes = ([512], [1536])
buf503_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op504_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf500', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf504', get_index_3, getitem)
        return store_reduction
op504 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 512}, None)]
op505.unmet_dependencies = 
    [   MemoryDep('buf500', c0, {c0: 786432}, None),
        MemoryDep('buf503', c0, {c0: 786432}, None)]
op505.met_dependencies = [MemoryDep('arg339_1', c1, {c0: 512, c1: 1536}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf505.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (512, 1536)
op505.sizes = ([512], [1536])
buf503_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op505_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf500', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf505', get_index_3, getitem_1)
        return store_reduction
op505 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 786432}, None)]
op507.unmet_dependencies = 
    [   MemoryDep('buf500', c0, {c0: 786432}, None),
        MemoryDep('buf503', c0, {c0: 786432}, None),
        MemoryDep('buf504', c0, {c0: 512}, None),
        MemoryDep('buf505', c0, {c0: 512}, None)]
op507.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg340_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg341_1', c1, {c0: 512, c1: 1536}, None)]
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf507.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False),
    ]
]
op507.group.device = cuda:0
op507.group.iteration = (786432, 1)
op507.sizes = ([512, 1536], [])
buf503_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf505_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op507_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf500', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf504', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf505', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg340_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg341_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf507', get_index_7, add_3, None)
        return store
op507 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op508.met_dependencies = [StarDep(name='arg342_1', mode=None)]
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf508.users = [NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op508.node.kernel = extern_kernels.mm


op509: ExternKernelSchedulerNode(ExternKernelOut)
op509.writes = [StarDep(name='buf509', mode=None)]
op509.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op509.met_dependencies = [StarDep(name='arg344_1', mode=None)]
op509.outputs = [
    buf509: ExternKernelOut
    buf509.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False)]
]
op509.node.kernel = extern_kernels.mm


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 786432}, None)]
op510.unmet_dependencies = [MemoryDep('buf508', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op510.met_dependencies = [MemoryDep('arg343_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf510.users = [NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (786432, 1)
op510.sizes = ([24, 512, 64], [])
buf508_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op510_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg343_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf510', get_index_2, add, None)
        return store
op510 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 786432}, None)]
op511.unmet_dependencies = [MemoryDep('buf509', c0, {c0: 786432}, None)]
op511.met_dependencies = [MemoryDep('arg345_1', c1, {c0: 512, c1: 1536}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf511.users = [NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (786432, 1)
op511.sizes = ([512, 1536], [])
buf509_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op511_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg345_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf511', get_index_2, mul, None)
        return store
op511 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op512: ExternKernelSchedulerNode(ExternKernelOut)
op512.writes = [StarDep(name='buf512', mode=None)]
op512.unmet_dependencies = [StarDep(name='buf510', mode=None), StarDep(name='buf511', mode=None)]
op512.met_dependencies = []
op512.outputs = [
    buf512: ExternKernelOut
    buf512.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf512.users = [
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False),
    ]
]
op512.node.kernel = extern_kernels.bmm


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 12288}, None)]
op513.unmet_dependencies = [MemoryDep('buf512', c0, {c0: 6291456}, None)]
op513.met_dependencies = []
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf513.users = [
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
    ]
]
op513.group.device = cuda:0
op513.group.iteration = (12288, 512)
op513.sizes = ([12288], [512])
buf512_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op513_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf513', get_index_1, reduction)
        return store_reduction
op513 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op514: SchedulerNode(ComputedBuffer)
op514.writes = [MemoryDep('buf514', c0, {c0: 12288}, None)]
op514.unmet_dependencies = 
    [   MemoryDep('buf512', c0, {c0: 6291456}, None),
        MemoryDep('buf513', c0, {c0: 12288}, None)]
op514.met_dependencies = []
op514.outputs = [
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf514.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op514.group.device = cuda:0
op514.group.iteration = (12288, 512)
op514.sizes = ([12288], [512])
buf512_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf514_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op514_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf513', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf514', get_index_2, reduction)
        return store_reduction
op514 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op515: ExternKernelSchedulerNode(ExternKernelOut)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op515.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op515.outputs = [
    buf515: ExternKernelOut
    buf515.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf515.users = [NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False)]
]
op515.node.kernel = extern_kernels.mm


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 6291456}, None)]
op516.unmet_dependencies = 
    [   MemoryDep('buf512', c0, {c0: 6291456}, None),
        MemoryDep('buf513', c0, {c0: 12288}, None),
        MemoryDep('buf514', c0, {c0: 12288}, None)]
op516.met_dependencies = []
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf516.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (6291456, 1)
op516.sizes = ([12288, 512], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf514_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf516_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op516_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf513', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf514', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf516', get_index_3, where_1, None)
        return store
op516 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 786432}, None)]
op517.unmet_dependencies = [MemoryDep('buf515', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op517.met_dependencies = [MemoryDep('arg347_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf517.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (786432, 1)
op517.sizes = ([24, 512, 64], [])
buf515_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op517_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf517', get_index_2, add, None)
        return store
op517 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op518: ExternKernelSchedulerNode(ExternKernelOut)
op518.writes = [StarDep(name='buf518', mode=None)]
op518.unmet_dependencies = [StarDep(name='buf516', mode=None), StarDep(name='buf517', mode=None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ExternKernelOut
    buf518.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf518.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op518.node.kernel = extern_kernels.bmm


op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 786432}, None)]
op519.unmet_dependencies = [MemoryDep('buf518', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op519.met_dependencies = []
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf519.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (786432, 1)
op519.sizes = ([512, 24, 64], [])
buf518_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op519_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf519', get_index_1, load, None)
        return store
op519 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op520: ExternKernelSchedulerNode(ExternKernelOut)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = [StarDep(name='buf519', mode=None)]
op520.met_dependencies = [StarDep(name='arg348_1', mode=None)]
op520.outputs = [
    buf520: ExternKernelOut
    buf520.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf520.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False),
    ]
]
op520.node.kernel = extern_kernels.mm


op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 512}, None)]
op521.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 786432}, None),
        MemoryDep('buf520', c0, {c0: 786432}, None)]
op521.met_dependencies = [MemoryDep('arg349_1', c1, {c0: 512, c1: 1536}, None)]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf521.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (512, 1536)
op521.sizes = ([512], [1536])
buf520_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op521_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg349_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf521', get_index_3, getitem)
        return store_reduction
op521 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 512}, None)]
op522.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 786432}, None),
        MemoryDep('buf520', c0, {c0: 786432}, None)]
op522.met_dependencies = [MemoryDep('arg349_1', c1, {c0: 512, c1: 1536}, None)]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf522.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (512, 1536)
op522.sizes = ([512], [1536])
buf520_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op522_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg349_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf522', get_index_3, getitem_1)
        return store_reduction
op522 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 786432}, None)]
op524.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 786432}, None),
        MemoryDep('buf520', c0, {c0: 786432}, None),
        MemoryDep('buf521', c0, {c0: 512}, None),
        MemoryDep('buf522', c0, {c0: 512}, None)]
op524.met_dependencies = 
    [   MemoryDep('arg349_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg350_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg351_1', c1, {c0: 512, c1: 1536}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf524.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
]
op524.group.device = cuda:0
op524.group.iteration = (786432, 1)
op524.sizes = ([512, 1536], [])
buf520_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf522_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op524_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg349_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf521', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf522', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg350_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg351_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf524', get_index_7, add_3, None)
        return store
op524 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op525: ExternKernelSchedulerNode(ExternKernelOut)
op525.writes = [StarDep(name='buf525', mode=None)]
op525.unmet_dependencies = [StarDep(name='buf524', mode=None)]
op525.met_dependencies = [StarDep(name='arg352_1', mode=None)]
op525.outputs = [
    buf525: ExternKernelOut
    buf525.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf525.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False)]
]
op525.node.kernel = extern_kernels.mm


op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 3145728}, None)]
op526.unmet_dependencies = [MemoryDep('buf525', c0, {c0: 3145728}, None)]
op526.met_dependencies = [MemoryDep('arg353_1', c1, {c0: 512, c1: 6144}, None)]
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf526.users = [NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op526.group.device = cuda:0
op526.group.iteration = (3145728, 1)
op526.sizes = ([512, 6144], [])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op526_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf525', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg353_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf525', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg353_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf526', get_index_4, mul_2, None)
        return store
op526 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op527: ExternKernelSchedulerNode(ExternKernelOut)
op527.writes = [StarDep(name='buf527', mode=None)]
op527.unmet_dependencies = [StarDep(name='buf526', mode=None)]
op527.met_dependencies = [StarDep(name='arg354_1', mode=None)]
op527.outputs = [
    buf527: ExternKernelOut
    buf527.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
]
op527.node.kernel = extern_kernels.mm


op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 512}, None)]
op528.unmet_dependencies = 
    [   MemoryDep('buf524', c0, {c0: 786432}, None),
        MemoryDep('buf527', c0, {c0: 786432}, None)]
op528.met_dependencies = [MemoryDep('arg355_1', c1, {c0: 512, c1: 1536}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf528.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (512, 1536)
op528.sizes = ([512], [1536])
buf527_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op528_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg355_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf524', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf528', get_index_3, getitem)
        return store_reduction
op528 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 512}, None)]
op529.unmet_dependencies = 
    [   MemoryDep('buf524', c0, {c0: 786432}, None),
        MemoryDep('buf527', c0, {c0: 786432}, None)]
op529.met_dependencies = [MemoryDep('arg355_1', c1, {c0: 512, c1: 1536}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf529.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (512, 1536)
op529.sizes = ([512], [1536])
buf527_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op529_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg355_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf524', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf529', get_index_3, getitem_1)
        return store_reduction
op529 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 786432}, None)]
op531.unmet_dependencies = 
    [   MemoryDep('buf524', c0, {c0: 786432}, None),
        MemoryDep('buf527', c0, {c0: 786432}, None),
        MemoryDep('buf528', c0, {c0: 512}, None),
        MemoryDep('buf529', c0, {c0: 512}, None)]
op531.met_dependencies = 
    [   MemoryDep('arg355_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg356_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg357_1', c1, {c0: 512, c1: 1536}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf531.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
    ]
]
op531.group.device = cuda:0
op531.group.iteration = (786432, 1)
op531.sizes = ([512, 1536], [])
buf527_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf529_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op531_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg355_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf524', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf528', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf529', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg356_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg357_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf531', get_index_7, add_3, None)
        return store
op531 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op532: ExternKernelSchedulerNode(ExternKernelOut)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op532.met_dependencies = [StarDep(name='arg358_1', mode=None)]
op532.outputs = [
    buf532: ExternKernelOut
    buf532.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf532.users = [NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False)]
]
op532.node.kernel = extern_kernels.mm


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op533.met_dependencies = [StarDep(name='arg360_1', mode=None)]
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf533.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=True, is_weak=False)]
]
op533.node.kernel = extern_kernels.mm


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 786432}, None)]
op534.unmet_dependencies = [MemoryDep('buf532', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op534.met_dependencies = [MemoryDep('arg359_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (786432, 1)
op534.sizes = ([24, 512, 64], [])
buf532_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op534_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf532', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg359_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf534', get_index_2, add, None)
        return store
op534 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 786432}, None)]
op535.unmet_dependencies = [MemoryDep('buf533', c0, {c0: 786432}, None)]
op535.met_dependencies = [MemoryDep('arg361_1', c1, {c0: 512, c1: 1536}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (786432, 1)
op535.sizes = ([512, 1536], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op535_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg361_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf535', get_index_2, mul, None)
        return store
op535 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op536: ExternKernelSchedulerNode(ExternKernelOut)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf534', mode=None), StarDep(name='buf535', mode=None)]
op536.met_dependencies = []
op536.outputs = [
    buf536: ExternKernelOut
    buf536.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
    ]
]
op536.node.kernel = extern_kernels.bmm


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 12288}, None)]
op537.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 6291456}, None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf537.users = [
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
    ]
]
op537.group.device = cuda:0
op537.group.iteration = (12288, 512)
op537.sizes = ([12288], [512])
buf536_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op537_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf537', get_index_1, reduction)
        return store_reduction
op537 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 12288}, None)]
op538.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 6291456}, None),
        MemoryDep('buf537', c0, {c0: 12288}, None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (12288, 512)
op538.sizes = ([12288], [512])
buf536_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf538_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op538_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf537', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf538', get_index_2, reduction)
        return store_reduction
op538 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op539: ExternKernelSchedulerNode(ExternKernelOut)
op539.writes = [StarDep(name='buf539', mode=None)]
op539.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op539.met_dependencies = [StarDep(name='arg362_1', mode=None)]
op539.outputs = [
    buf539: ExternKernelOut
    buf539.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf539.users = [NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op539.node.kernel = extern_kernels.mm


op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 6291456}, None)]
op540.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 6291456}, None),
        MemoryDep('buf537', c0, {c0: 12288}, None),
        MemoryDep('buf538', c0, {c0: 12288}, None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (6291456, 1)
op540.sizes = ([12288, 512], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf538_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf540_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op540_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf537', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf538', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf540', get_index_3, where_1, None)
        return store
op540 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 786432}, None)]
op541.unmet_dependencies = [MemoryDep('buf539', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op541.met_dependencies = [MemoryDep('arg363_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf541.users = [NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op541.group.device = cuda:0
op541.group.iteration = (786432, 1)
op541.sizes = ([24, 512, 64], [])
buf539_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op541_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg363_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf541', get_index_2, add, None)
        return store
op541 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op542: ExternKernelSchedulerNode(ExternKernelOut)
op542.writes = [StarDep(name='buf542', mode=None)]
op542.unmet_dependencies = [StarDep(name='buf540', mode=None), StarDep(name='buf541', mode=None)]
op542.met_dependencies = []
op542.outputs = [
    buf542: ExternKernelOut
    buf542.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf542.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.node.kernel = extern_kernels.bmm


op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 786432}, None)]
op543.unmet_dependencies = [MemoryDep('buf542', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op543.met_dependencies = []
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf543.users = [NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (786432, 1)
op543.sizes = ([512, 24, 64], [])
buf542_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op543_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf543', get_index_1, load, None)
        return store
op543 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op544: ExternKernelSchedulerNode(ExternKernelOut)
op544.writes = [StarDep(name='buf544', mode=None)]
op544.unmet_dependencies = [StarDep(name='buf543', mode=None)]
op544.met_dependencies = [StarDep(name='arg364_1', mode=None)]
op544.outputs = [
    buf544: ExternKernelOut
    buf544.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf544.users = [
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
    ]
]
op544.node.kernel = extern_kernels.mm


op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 512}, None)]
op545.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 786432}, None),
        MemoryDep('buf544', c0, {c0: 786432}, None)]
op545.met_dependencies = [MemoryDep('arg365_1', c1, {c0: 512, c1: 1536}, None)]
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf545.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
]
op545.group.device = cuda:0
op545.group.iteration = (512, 1536)
op545.sizes = ([512], [1536])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op545_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg365_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf531', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf545', get_index_3, getitem)
        return store_reduction
op545 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 512}, None)]
op546.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 786432}, None),
        MemoryDep('buf544', c0, {c0: 786432}, None)]
op546.met_dependencies = [MemoryDep('arg365_1', c1, {c0: 512, c1: 1536}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf546.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (512, 1536)
op546.sizes = ([512], [1536])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op546_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg365_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf531', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf546', get_index_3, getitem_1)
        return store_reduction
op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 786432}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 786432}, None),
        MemoryDep('buf544', c0, {c0: 786432}, None),
        MemoryDep('buf545', c0, {c0: 512}, None),
        MemoryDep('buf546', c0, {c0: 512}, None)]
op548.met_dependencies = 
    [   MemoryDep('arg365_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg366_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg367_1', c1, {c0: 512, c1: 1536}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf548.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
    ]
]
op548.group.device = cuda:0
op548.group.iteration = (786432, 1)
op548.sizes = ([512, 1536], [])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf546_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op548_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg365_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf531', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf545', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf546', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg366_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg367_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf548', get_index_7, add_3, None)
        return store
op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op549: ExternKernelSchedulerNode(ExternKernelOut)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op549.met_dependencies = [StarDep(name='arg368_1', mode=None)]
op549.outputs = [
    buf549: ExternKernelOut
    buf549.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf549.users = [NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False)]
]
op549.node.kernel = extern_kernels.mm


op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 3145728}, None)]
op550.unmet_dependencies = [MemoryDep('buf549', c0, {c0: 3145728}, None)]
op550.met_dependencies = [MemoryDep('arg369_1', c1, {c0: 512, c1: 6144}, None)]
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf550.users = [NodeUser(node=ExternKernelSchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op550.group.device = cuda:0
op550.group.iteration = (3145728, 1)
op550.sizes = ([512, 6144], [])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op550_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg369_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf549', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg369_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf550', get_index_4, mul_2, None)
        return store
op550 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op551: ExternKernelSchedulerNode(ExternKernelOut)
op551.writes = [StarDep(name='buf551', mode=None)]
op551.unmet_dependencies = [StarDep(name='buf550', mode=None)]
op551.met_dependencies = [StarDep(name='arg370_1', mode=None)]
op551.outputs = [
    buf551: ExternKernelOut
    buf551.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf551.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
    ]
]
op551.node.kernel = extern_kernels.mm


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 512}, None)]
op552.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 786432}, None),
        MemoryDep('buf551', c0, {c0: 786432}, None)]
op552.met_dependencies = [MemoryDep('arg371_1', c1, {c0: 512, c1: 1536}, None)]
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf552.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (512, 1536)
op552.sizes = ([512], [1536])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op552_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg371_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf548', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf552', get_index_3, getitem)
        return store_reduction
op552 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 512}, None)]
op553.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 786432}, None),
        MemoryDep('buf551', c0, {c0: 786432}, None)]
op553.met_dependencies = [MemoryDep('arg371_1', c1, {c0: 512, c1: 1536}, None)]
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf553.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (512, 1536)
op553.sizes = ([512], [1536])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op553_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg371_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf548', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf553', get_index_3, getitem_1)
        return store_reduction
op553 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 786432}, None)]
op555.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 786432}, None),
        MemoryDep('buf551', c0, {c0: 786432}, None),
        MemoryDep('buf552', c0, {c0: 512}, None),
        MemoryDep('buf553', c0, {c0: 512}, None)]
op555.met_dependencies = 
    [   MemoryDep('arg371_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg372_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg373_1', c1, {c0: 512, c1: 1536}, None)]
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf555.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False),
    ]
]
op555.group.device = cuda:0
op555.group.iteration = (786432, 1)
op555.sizes = ([512, 1536], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf553_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op555_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg371_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf548', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf552', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf553', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg372_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg373_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf555', get_index_7, add_3, None)
        return store
op555 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op556: ExternKernelSchedulerNode(ExternKernelOut)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf555', mode=None)]
op556.met_dependencies = [StarDep(name='arg374_1', mode=None)]
op556.outputs = [
    buf556: ExternKernelOut
    buf556.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf556.users = [NodeUser(node=SchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op556.node.kernel = extern_kernels.mm


op557: ExternKernelSchedulerNode(ExternKernelOut)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf555', mode=None)]
op557.met_dependencies = [StarDep(name='arg376_1', mode=None)]
op557.outputs = [
    buf557: ExternKernelOut
    buf557.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf557.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=True, is_weak=False)]
]
op557.node.kernel = extern_kernels.mm


op558: SchedulerNode(ComputedBuffer)
op558.writes = [MemoryDep('buf558', c0, {c0: 786432}, None)]
op558.unmet_dependencies = [MemoryDep('buf556', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op558.met_dependencies = [MemoryDep('arg375_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op558.outputs = [
    buf558: ComputedBuffer
    buf558.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf558.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op558.group.device = cuda:0
op558.group.iteration = (786432, 1)
op558.sizes = ([24, 512, 64], [])
buf556_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op558_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg375_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf558', get_index_2, add, None)
        return store
op558 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 786432}, None)]
op559.unmet_dependencies = [MemoryDep('buf557', c0, {c0: 786432}, None)]
op559.met_dependencies = [MemoryDep('arg377_1', c1, {c0: 512, c1: 1536}, None)]
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (786432, 1)
op559.sizes = ([512, 1536], [])
buf557_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[24, 64, 512], stride=[64, 1, 1536])
class op559_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg377_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf559', get_index_2, mul, None)
        return store
op559 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op560: ExternKernelSchedulerNode(ExternKernelOut)
op560.writes = [StarDep(name='buf560', mode=None)]
op560.unmet_dependencies = [StarDep(name='buf558', mode=None), StarDep(name='buf559', mode=None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: ExternKernelOut
    buf560.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
    buf560.users = [
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=True, is_weak=False),
    ]
]
op560.node.kernel = extern_kernels.bmm


op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 12288}, None)]
op561.unmet_dependencies = [MemoryDep('buf560', c0, {c0: 6291456}, None)]
op561.met_dependencies = []
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf561.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
]
op561.group.device = cuda:0
op561.group.iteration = (12288, 512)
op561.sizes = ([12288], [512])
buf560_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op561_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf561', get_index_1, reduction)
        return store_reduction
op561 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 12288}, None)]
op562.unmet_dependencies = 
    [   MemoryDep('buf560', c0, {c0: 6291456}, None),
        MemoryDep('buf561', c0, {c0: 12288}, None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
    buf562.users = [NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False)]
]
op562.group.device = cuda:0
op562.group.iteration = (12288, 512)
op562.sizes = ([12288], [512])
buf560_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf562_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
class op562_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf561', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf562', get_index_2, reduction)
        return store_reduction
op562 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 12288
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp4 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op563: ExternKernelSchedulerNode(ExternKernelOut)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf555', mode=None)]
op563.met_dependencies = [StarDep(name='arg378_1', mode=None)]
op563.outputs = [
    buf563: ExternKernelOut
    buf563.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf563.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op563.node.kernel = extern_kernels.mm


op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 6291456}, None)]
op564.unmet_dependencies = 
    [   MemoryDep('buf560', c0, {c0: 6291456}, None),
        MemoryDep('buf561', c0, {c0: 12288}, None),
        MemoryDep('buf562', c0, {c0: 12288}, None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
    buf564.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (6291456, 1)
op564.sizes = ([12288, 512], [])
buf560_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 512], stride=[262144, 512, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf562_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 1], stride=[12288, 512, 1, 12288])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 512], stride=[6291456, 262144, 512, 1])
class op564_loop_body:
    var_ranges = {z0: 12288, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        constant = ops.constant(False, torch.bool)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(constant, constant_1, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf561', get_index_1)
        sub = ops.sub(where, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf562', get_index_2)
        truediv = ops.truediv(exp, load_2)
        constant_2 = ops.constant(False, torch.bool)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(constant_2, constant_3, truediv)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf564', get_index_3, where_1, None)
        return store
op564 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp4 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], False, tl.int1)
        tmp2 = -3.4028234663852886e+38
        tmp3 = tl.where(tmp1, tmp2, tmp0)
        tmp5 = tmp3 - tmp4
        tmp6 = tl_math.exp(tmp5)
        tmp8 = tmp6 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp1, tmp9, tmp8)
        tl.store(out_ptr0 + (x2), tmp10, None)


op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 786432}, None)]
op565.unmet_dependencies = [MemoryDep('buf563', 64*c0 + 1536*c1 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op565.met_dependencies = [MemoryDep('arg379_1', 64*c0 + c2, {c0: 24, c1: 512, c2: 64}, None)]
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (786432, 1)
op565.sizes = ([24, 512, 64], [])
buf563_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 512, 64], stride=[786432, 32768, 64, 1])
class op565_loop_body:
    var_ranges = {z0: 24, z1: 512, z2: 64}
    index0 = 64*z0 + 1536*z1 + z2
    index1 = 64*z0 + z2
    index2 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg379_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf565', get_index_2, add, None)
        return store
op565 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1536*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op566: ExternKernelSchedulerNode(ExternKernelOut)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf564', mode=None), StarDep(name='buf565', mode=None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: ExternKernelOut
    buf566.layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
    buf566.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op566.node.kernel = extern_kernels.bmm


op567: SchedulerNode(ComputedBuffer)
op567.writes = [MemoryDep('buf567', c0, {c0: 786432}, None)]
op567.unmet_dependencies = [MemoryDep('buf566', 64*c0 + 32768*c1 + c2, {c0: 512, c1: 24, c2: 64}, None)]
op567.met_dependencies = []
op567.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
    buf567.users = [NodeUser(node=ExternKernelSchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op567.group.device = cuda:0
op567.group.iteration = (786432, 1)
op567.sizes = ([512, 24, 64], [])
buf566_layout = FixedLayout('cuda', torch.float32, size=[24, 512, 64], stride=[32768, 64, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 24, 64], stride=[786432, 1536, 64, 1])
class op567_loop_body:
    var_ranges = {z0: 512, z1: 24, z2: 64}
    index0 = 64*z0 + 32768*z1 + z2
    index1 = 1536*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf566', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf567', get_index_1, load, None)
        return store
op567 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 24
        x2 = (xindex // 1536)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op568: ExternKernelSchedulerNode(ExternKernelOut)
op568.writes = [StarDep(name='buf568', mode=None)]
op568.unmet_dependencies = [StarDep(name='buf567', mode=None)]
op568.met_dependencies = [StarDep(name='arg380_1', mode=None)]
op568.outputs = [
    buf568: ExternKernelOut
    buf568.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf568.users = [
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False),
    ]
]
op568.node.kernel = extern_kernels.mm


op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 512}, None)]
op569.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 786432}, None),
        MemoryDep('buf568', c0, {c0: 786432}, None)]
op569.met_dependencies = [MemoryDep('arg381_1', c1, {c0: 512, c1: 1536}, None)]
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf569.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (512, 1536)
op569.sizes = ([512], [1536])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op569_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf568', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg381_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf555', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf569', get_index_3, getitem)
        return store_reduction
op569 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 512}, None)]
op570.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 786432}, None),
        MemoryDep('buf568', c0, {c0: 786432}, None)]
op570.met_dependencies = [MemoryDep('arg381_1', c1, {c0: 512, c1: 1536}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf570.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op570.group.device = cuda:0
op570.group.iteration = (512, 1536)
op570.sizes = ([512], [1536])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op570_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf568', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg381_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf555', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf570', get_index_3, getitem_1)
        return store_reduction
op570 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 786432}, None)]
op572.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 786432}, None),
        MemoryDep('buf568', c0, {c0: 786432}, None),
        MemoryDep('buf569', c0, {c0: 512}, None),
        MemoryDep('buf570', c0, {c0: 512}, None)]
op572.met_dependencies = 
    [   MemoryDep('arg381_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg382_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg383_1', c1, {c0: 512, c1: 1536}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf572.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op572.group.device = cuda:0
op572.group.iteration = (786432, 1)
op572.sizes = ([512, 1536], [])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf570_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op572_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf568', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg381_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf555', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf569', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf570', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg382_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg383_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf572', get_index_7, add_3, None)
        return store
op572 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op573: ExternKernelSchedulerNode(ExternKernelOut)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf572', mode=None)]
op573.met_dependencies = [StarDep(name='arg384_1', mode=None)]
op573.outputs = [
    buf573: ExternKernelOut
    buf573.layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
    buf573.users = [NodeUser(node=SchedulerNode(name='op574'), can_inplace=True, is_weak=False)]
]
op573.node.kernel = extern_kernels.mm


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 3145728}, None)]
op574.unmet_dependencies = [MemoryDep('buf573', c0, {c0: 3145728}, None)]
op574.met_dependencies = [MemoryDep('arg385_1', c1, {c0: 512, c1: 6144}, None)]
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
    buf574.users = [NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (3145728, 1)
op574.sizes = ([512, 6144], [])
buf573_layout = FixedLayout('cuda', torch.float32, size=[512, 6144], stride=[6144, 1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[6144], stride=[1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 6144], stride=[3145728, 6144, 1])
class op574_loop_body:
    var_ranges = {z0: 512, z1: 6144}
    index0 = 6144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg385_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf573', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg385_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf574', get_index_4, mul_2, None)
        return store
op574 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 6144
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op575: ExternKernelSchedulerNode(ExternKernelOut)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf574', mode=None)]
op575.met_dependencies = [StarDep(name='arg386_1', mode=None)]
op575.outputs = [
    buf575: ExternKernelOut
    buf575.layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
    buf575.users = [
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op575.node.kernel = extern_kernels.mm


op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 512}, None)]
op576.unmet_dependencies = 
    [   MemoryDep('buf572', c0, {c0: 786432}, None),
        MemoryDep('buf575', c0, {c0: 786432}, None)]
op576.met_dependencies = [MemoryDep('arg387_1', c1, {c0: 512, c1: 1536}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf576.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (512, 1536)
op576.sizes = ([512], [1536])
buf575_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op576_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf572', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf576', get_index_3, getitem)
        return store_reduction
op576 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 512}, None)]
op577.unmet_dependencies = 
    [   MemoryDep('buf572', c0, {c0: 786432}, None),
        MemoryDep('buf575', c0, {c0: 786432}, None)]
op577.met_dependencies = [MemoryDep('arg387_1', c1, {c0: 512, c1: 1536}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf577.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (512, 1536)
op577.sizes = ([512], [1536])
buf575_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op577_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf572', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf577', get_index_3, getitem_1)
        return store_reduction
op577 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 1536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tl.load(in_ptr2 + (r1 + (1536*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp4 = tmp2 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 786432}, None)]
op579.unmet_dependencies = 
    [   MemoryDep('buf572', c0, {c0: 786432}, None),
        MemoryDep('buf575', c0, {c0: 786432}, None),
        MemoryDep('buf576', c0, {c0: 512}, None),
        MemoryDep('buf577', c0, {c0: 512}, None)]
op579.met_dependencies = 
    [   MemoryDep('arg387_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg388_1', c1, {c0: 512, c1: 1536}, None),
        MemoryDep('arg389_1', c1, {c0: 512, c1: 1536}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (786432, 1)
op579.sizes = ([512, 1536], [])
buf575_layout = FixedLayout('cuda', torch.float32, size=[512, 1536], stride=[1536, 1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf577_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1536], stride=[786432, 1536, 1])
class op579_loop_body:
    var_ranges = {z0: 512, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf572', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf576', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf577', get_index_4)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-07, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg388_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg389_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf579', get_index_7, add_3, None)
        return store
op579 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1536
        x1 = (xindex // 1536)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1536.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-07
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 6144}, None)]
op580.unmet_dependencies = []
op580.met_dependencies = [MemoryDep('arg390_1', c0 + 1536*I, {c0: 1536, c1: 4}, None)]
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[1536, 4], stride=[4, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (6144, 1)
op580.sizes = ([1536, 4], [])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[2, 1536], stride=[1536, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[1536, 4], stride=[4, 1])
class op580_loop_body:
    var_ranges = {z0: 1536, z1: 4}
    index0 = z1
    index1 = z0 + 1536*I
    index2 = 4*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(2, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(4, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf580', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg390_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op580 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6144
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 4
        x1 = (xindex // 4)
        x2 = xindex
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 2, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x1 + (1536*x0)), tmp4, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 4, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x2), tmp12, None)


op581: ExternKernelSchedulerNode(ExternKernelOut)
op581.writes = [StarDep(name='buf581', mode=None)]
op581.unmet_dependencies = [StarDep(name='buf579', mode=None), StarDep(name='buf580', mode=None)]
op581.met_dependencies = []
op581.outputs = [
    buf581: ExternKernelOut
    buf581.layout = FixedLayout('cuda', torch.float32, size=[512, 4], stride=[4, 1])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
    ]
]
op581.node.kernel = extern_kernels.mm


op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 512}, None)]
op582.unmet_dependencies = [MemoryDep('buf581', 4*c0, {c0: 512}, None)]
op582.met_dependencies = [MemoryDep('arg391_1', I, {}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
    buf582.users = [
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op582.group.device = cuda:0
op582.group.iteration = (512, 1)
op582.sizes = ([512], [])
buf581_layout = FixedLayout('cuda', torch.float32, size=[512, 4], stride=[4, 1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
class op582_loop_body:
    var_ranges = {z0: 512}
    index0 = 4*z0
    index1 = I
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(2, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(4, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        add = ops.add(load, where)
        get_index_1 = self.get_index('index2')
        store = ops.store('buf582', get_index_1, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg391_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op582 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[512], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr1 + (tl.full([XBLOCK], 0, tl.int32)), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp1 >= tmp1
        tmp3 = tl.full([1], 2, tl.int64)
        tmp4 = tmp1 < tmp3
        tmp6 = tmp1 >= tmp3
        tmp7 = tl.full([1], 4, tl.int64)
        tmp8 = tmp1 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tmp13 = tmp0 + tmp12
        tl.store(out_ptr0 + (x0), tmp13, xmask)


op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', 0, {}, None)]
op583.unmet_dependencies = [MemoryDep('buf582', c0, {c0: 512}, None)]
op583.met_dependencies = []
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
    buf583.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op583.group.device = cuda:0
op583.group.iteration = (1, 512)
op583.sizes = ([], [512])
buf582_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
class op583_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf582', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf583', get_index_1, reduction)
        return store_reduction
op583 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp3, None)


op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', 0, {}, None)]
op584.unmet_dependencies = [MemoryDep('buf582', c0, {c0: 512}, None), MemoryDep('buf583', 0, {}, None)]
op584.met_dependencies = []
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
    buf584.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False)]
]
op584.group.device = cuda:0
op584.group.iteration = (1, 512)
op584.sizes = ([], [512])
buf582_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
class op584_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf582', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf583', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf584', get_index_2, reduction)
        return store_reduction
op584 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {3: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 4), equal_to_1=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.load(in_ptr1 + (0))
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp3 = tmp0 - tmp2
        tmp4 = tl_math.exp(tmp3)
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp7, None)


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 512}, None)]
op585.unmet_dependencies = [MemoryDep('buf581', 4*c0 + 1, {c0: 512}, None)]
op585.met_dependencies = [MemoryDep('arg391_1', I, {}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
    buf585.users = [
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op585.group.device = cuda:0
op585.group.iteration = (512, 1)
op585.sizes = ([512], [])
buf581_layout = FixedLayout('cuda', torch.float32, size=[512, 4], stride=[4, 1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
class op585_loop_body:
    var_ranges = {z0: 512}
    index0 = 4*z0 + 1
    index1 = I
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        constant = ops.constant(1, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(1, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(1, torch.int64)
        constant_5 = ops.constant(2, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(1, torch.int64)
        constant_7 = ops.constant(4, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        add = ops.add(load, where)
        get_index_1 = self.get_index('index2')
        store = ops.store('buf585', get_index_1, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg391_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op585 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[512], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (1 + (4*x0)), xmask, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr1 + (tl.full([XBLOCK], 1, tl.int32)), None, eviction_policy='evict_last')
        tmp1 = tl.full([1], 1, tl.int64)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 >= tmp2
        tmp4 = tl.full([1], 2, tl.int64)
        tmp5 = tmp1 < tmp4
        tmp7 = tmp1 >= tmp4
        tmp8 = tl.full([1], 4, tl.int64)
        tmp9 = tmp1 < tmp8
        tmp10 = 0.0
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp7, tmp10, tmp11)
        tmp13 = tl.where(tmp5, tmp6, tmp12)
        tmp14 = tmp0 + tmp13
        tl.store(out_ptr0 + (x0), tmp14, xmask)


op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', 0, {}, None)]
op586.unmet_dependencies = [MemoryDep('buf585', c0, {c0: 512}, None)]
op586.met_dependencies = []
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
    buf586.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op586.group.device = cuda:0
op586.group.iteration = (1, 512)
op586.sizes = ([], [512])
buf585_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
class op586_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf585', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf586', get_index_1, reduction)
        return store_reduction
op586 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
        tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp3, None)


op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', 0, {}, None)]
op587.unmet_dependencies = [MemoryDep('buf585', c0, {c0: 512}, None), MemoryDep('buf586', 0, {}, None)]
op587.met_dependencies = []
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
    buf587.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False)]
]
op587.group.device = cuda:0
op587.group.iteration = (1, 512)
op587.sizes = ([], [512])
buf585_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
class op587_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf585', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf586', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf587', get_index_2, reduction)
        return store_reduction
op587 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {3: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 4), equal_to_1=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.load(in_ptr1 + (0))
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp3 = tmp0 - tmp2
        tmp4 = tl_math.exp(tmp3)
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp7, None)


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', 0, {}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf582', tmp20, {}, None),
        MemoryDep('buf583', 0, {}, None),
        MemoryDep('buf584', 0, {}, None),
        MemoryDep('buf585', tmp60, {}, None),
        MemoryDep('buf586', 0, {}, None),
        MemoryDep('buf587', 0, {}, None)]
op588.met_dependencies = [MemoryDep('arg392_1', 0, {}, None), MemoryDep('arg393_1', 0, {}, None)]
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf588.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (1, 1)
op588.sizes = ([], [])
arg392_1_layout = FixedLayout('cuda', torch.int64, size=[1], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
arg393_1_layout = FixedLayout('cuda', torch.int64, size=[1], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[1, 1], stride=[1, 1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op588_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = indirect0
    index2 = indirect1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg392_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg392_1', get_index_1)
        constant_3 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(load_1, constant_3)
        constant_4 = ops.constant(512, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_4)
        constant_5 = ops.constant(512, torch.int64)
        ne_1 = ops.ne(minimum_1, constant_5)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg392_1', get_index_2)
        constant_6 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(load_2, constant_6)
        constant_7 = ops.constant(512, torch.int64)
        minimum_2 = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, minimum_2, constant_8)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf582', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf583', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf584', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_9 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_9)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg392_1', get_index_6)
        constant_10 = ops.constant(0, torch.int64)
        maximum_3 = ops.maximum(load_6, constant_10)
        constant_11 = ops.constant(512, torch.int64)
        minimum_3 = ops.minimum(maximum_3, constant_11)
        constant_12 = ops.constant(512, torch.int64)
        ne_2 = ops.ne(minimum_3, constant_12)
        to_dtype = ops.to_dtype(ne_2, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(where_1, to_dtype_1)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('arg393_1', get_index_7)
        constant_13 = ops.constant(0, torch.int64)
        maximum_4 = ops.maximum(load_7, constant_13)
        constant_14 = ops.constant(512, torch.int64)
        minimum_4 = ops.minimum(maximum_4, constant_14)
        constant_15 = ops.constant(512, torch.int64)
        ne_3 = ops.ne(minimum_4, constant_15)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('arg393_1', get_index_8)
        constant_16 = ops.constant(0, torch.int64)
        maximum_5 = ops.maximum(load_8, constant_16)
        constant_17 = ops.constant(512, torch.int64)
        minimum_5 = ops.minimum(maximum_5, constant_17)
        constant_18 = ops.constant(512, torch.int64)
        ne_4 = ops.ne(minimum_5, constant_18)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('arg393_1', get_index_9)
        constant_19 = ops.constant(0, torch.int64)
        maximum_6 = ops.maximum(load_9, constant_19)
        constant_20 = ops.constant(512, torch.int64)
        minimum_6 = ops.minimum(maximum_6, constant_20)
        constant_21 = ops.constant(0, torch.int64)
        where_2 = ops.where(ne_4, minimum_6, constant_21)
        set_indirect1 = self.set_indirect1(where_2)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('buf585', get_index_10)
        get_index_11 = self.get_index('index0')
        load_11 = ops.load('buf586', get_index_11)
        sub_2 = ops.sub(load_10, load_11)
        get_index_12 = self.get_index('index0')
        load_12 = ops.load('buf587', get_index_12)
        log_1 = ops.log(load_12)
        sub_3 = ops.sub(sub_2, log_1)
        neg_1 = ops.neg(sub_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(ne_3, neg_1, constant_22)
        get_index_13 = self.get_index('index0')
        load_13 = ops.load('arg393_1', get_index_13)
        constant_23 = ops.constant(0, torch.int64)
        maximum_7 = ops.maximum(load_13, constant_23)
        constant_24 = ops.constant(512, torch.int64)
        minimum_7 = ops.minimum(maximum_7, constant_24)
        constant_25 = ops.constant(512, torch.int64)
        ne_5 = ops.ne(minimum_7, constant_25)
        to_dtype_2 = ops.to_dtype(ne_5, torch.int64, src_dtype = torch.bool)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int64)
        truediv_1 = ops.truediv(where_3, to_dtype_3)
        add = ops.add(truediv, truediv_1)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf588', get_index_14, add, None)
        return store
op588 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*i64', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {8: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(8,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp14 = tl.load(in_ptr2 + (0))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp17 = tl.load(in_out_ptr0 + (0))
        tmp18 = tl.broadcast_to(tmp17, [XBLOCK])
        tmp27 = tl.load(in_ptr3 + (0))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp38 = tl.load(in_ptr5 + (0))
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK])
        tmp41 = tl.load(in_ptr6 + (0))
        tmp42 = tl.broadcast_to(tmp41, [XBLOCK])
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = triton_helpers.maximum(tmp1, tmp2)
        tmp4 = tl.full([1], 512, tl.int64)
        tmp5 = triton_helpers.minimum(tmp3, tmp4)
        tmp6 = tmp5 != tmp4
        tmp7 = tl.where(tmp6, tmp5, tmp2)
        tmp8 = tl.full([XBLOCK], 512, tl.int32)
        tmp9 = tmp7 + tmp8
        tmp10 = tmp7 < 0
        tmp11 = tl.where(tmp10, tmp9, tmp7)
        tl.device_assert((0 <= tmp11) & (tmp11 < 512), "index out of bounds: 0 <= tmp11 < 512")
        tmp13 = tl.load(in_ptr1 + (tmp11), None, eviction_policy='evict_last')
        tmp16 = tmp13 - tmp15
        tmp19 = tl_math.log(tmp18)
        tmp20 = tmp16 - tmp19
        tmp21 = -tmp20
        tmp22 = 0.0
        tmp23 = tl.where(tmp6, tmp21, tmp22)
        tmp24 = tmp6.to(tl.int64)
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp23 / tmp25
        tmp29 = triton_helpers.maximum(tmp28, tmp2)
        tmp30 = triton_helpers.minimum(tmp29, tmp4)
        tmp31 = tmp30 != tmp4
        tmp32 = tl.where(tmp31, tmp30, tmp2)
        tmp33 = tmp32 + tmp8
        tmp34 = tmp32 < 0
        tmp35 = tl.where(tmp34, tmp33, tmp32)
        tl.device_assert((0 <= tmp35) & (tmp35 < 512), "index out of bounds: 0 <= tmp35 < 512")
        tmp37 = tl.load(in_ptr4 + (tmp35), None, eviction_policy='evict_last')
        tmp40 = tmp37 - tmp39
        tmp43 = tl_math.log(tmp42)
        tmp44 = tmp40 - tmp43
        tmp45 = -tmp44
        tmp46 = tl.where(tmp31, tmp45, tmp22)
        tmp47 = tmp31.to(tl.int64)
        tmp48 = tmp47.to(tl.float32)
        tmp49 = tmp46 / tmp48
        tmp50 = tmp26 + tmp49
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp50, None)


op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', 0, {}, None)]
op589.unmet_dependencies = [MemoryDep('buf588', 0, {}, None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf589.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op589.group.device = cuda:0
op589.group.iteration = (1, 1)
op589.sizes = ([], [])
buf588_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf589_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op589_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf589', get_index_1, mul, None)
        return store
op589 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {1: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0,), equal_to_1=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = 0.5
        tmp3 = tmp1 * tmp2
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp3, None)


